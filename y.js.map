{"version":3,"sources":["y.js","runtime.js","IndexedDB.js","OperationBuffer.js","Operations.js"],"names":["_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","__proto__","_classCallCheck","instance","Constructor","global","wrap","innerFn","outerFn","self","tryLocsList","generator","Generator","_invoke","makeInvokeMethod","Context","tryCatch","fn","obj","arg","type","call","err","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","forEach","method","this","AwaitArgument","AsyncIterator","invoke","result","Promise","resolve","then","invokeNext","invokeThrow","unwrapped","enqueue","enqueueResult","previousPromise","invokeReturn","process","domain","bind","context","state","GenStateSuspendedStart","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","iterator","undefined","returnMethod","record","info","done","GenStateSuspendedYield","resultName","next","nextLoc","sent","dispatchException","abrupt","ContinueSentinel","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","values","iterable","iteratorMethod","iteratorSymbol","isNaN","length","i","hasOwn","hasOwnProperty","Symbol","inModule","module","runtime","regeneratorRuntime","exports","Gp","displayName","isGeneratorFunction","genFun","ctor","name","mark","awrap","async","iter","toString","keys","object","key","reverse","pop","prev","tempName","tempIndex","stop","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","window","AbstractTransaction","addOperation","op","context$2$0","getState","uid","t0","user","clock","setState","IndexedDB","Transaction","_AbstractTransaction","transaction","sv","objectStore","ob","setOperation","context$3$0","callee$3$0","context$4$0","put","getOperation","get","getStateVector","stateVector","cursorResult","cursor","openCursor","getStateSet","ss","_iterator","_isArray","_i","_ref","Array","isArray","getOperations","startSS","ops","endSV","_iterator2","_isArray2","_i2","_ref2","endState","startPos","endPos","range","IDBKeyRange","bound","t1","DB","namespace","_this","whenReadyListeners","ready","req","indexedDB","open","onerror","onsuccess","event","db","target","f","setTimeout","onupgradeneeded","createObjectStore","keyPath","whenReady","requestTransaction","makeGen","_this2","res","request","IDBRequest","IDBCursor","IDBOpenDBRequest","gen","apply","removeDatabase","deleteDatabase","OperationBuffer","Operation","yay"],"mappings":"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","file":"y.js","sourcesContent":[null,"/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var iteratorSymbol =\n    typeof Symbol === \"function\" && Symbol.iterator || \"@@iterator\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided, then outerFn.prototype instanceof Generator.\n    var generator = Object.create((outerFn || Generator).prototype);\n\n    generator._invoke = makeInvokeMethod(\n      innerFn, self || null,\n      new Context(tryLocsList || [])\n    );\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    genFun.__proto__ = GeneratorFunctionPrototype;\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `value instanceof AwaitArgument` to determine if the yielded value is\n  // meant to be awaited. Some may consider the name of this method too\n  // cutesy, but they are curmudgeons.\n  runtime.awrap = function(arg) {\n    return new AwaitArgument(arg);\n  };\n\n  function AwaitArgument(arg) {\n    this.arg = arg;\n  }\n\n  function AsyncIterator(generator) {\n    // This invoke function is written in a style that assumes some\n    // calling function (or Promise) will handle exceptions.\n    function invoke(method, arg) {\n      var result = generator[method](arg);\n      var value = result.value;\n      return value instanceof AwaitArgument\n        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)\n        : Promise.resolve(value).then(function(unwrapped) {\n            result.value = unwrapped;\n            return result;\n          }, invokeThrow);\n    }\n\n    if (typeof process === \"object\" && process.domain) {\n      invoke = process.domain.bind(invoke);\n    }\n\n    var invokeNext = invoke.bind(generator, \"next\");\n    var invokeThrow = invoke.bind(generator, \"throw\");\n    var invokeReturn = invoke.bind(generator, \"return\");\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      var enqueueResult =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(function() {\n          return invoke(method, arg);\n        }) : new Promise(function(resolve) {\n          resolve(invoke(method, arg));\n        });\n\n      // Avoid propagating enqueueResult failures to Promises returned by\n      // later invocations of the iterator, and call generator.return() to\n      // allow the generator a chance to clean up.\n      previousPromise = enqueueResult[\"catch\"](invokeReturn);\n\n      return enqueueResult;\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          if (method === \"return\" ||\n              (method === \"throw\" && delegate.iterator[method] === undefined)) {\n            // A return or throw (when the delegate iterator has no throw\n            // method) always terminates the yield* loop.\n            context.delegate = null;\n\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            var returnMethod = delegate.iterator[\"return\"];\n            if (returnMethod) {\n              var record = tryCatch(returnMethod, delegate.iterator, arg);\n              if (record.type === \"throw\") {\n                // If the return method threw an exception, let that\n                // exception prevail over the original return or throw.\n                method = \"throw\";\n                arg = record.arg;\n                continue;\n              }\n            }\n\n            if (method === \"return\") {\n              // Continue with the outer return, now that the delegate\n              // iterator has been terminated.\n              continue;\n            }\n          }\n\n          var record = tryCatch(\n            delegate.iterator[method],\n            delegate.iterator,\n            arg\n          );\n\n          if (record.type === \"throw\") {\n            context.delegate = null;\n\n            // Like returning generator.throw(uncaught), but without the\n            // overhead of an extra function call.\n            method = \"throw\";\n            arg = record.arg;\n            continue;\n          }\n\n          // Delegate generator ran and handled its own exceptions so\n          // regardless of what the method was, we continue as if it is\n          // \"next\" with an undefined arg.\n          method = \"next\";\n          arg = undefined;\n\n          var info = record.arg;\n          if (info.done) {\n            context[delegate.resultName] = info.value;\n            context.next = delegate.nextLoc;\n          } else {\n            state = GenStateSuspendedYield;\n            return info;\n          }\n\n          context.delegate = null;\n        }\n\n        if (method === \"next\") {\n          if (state === GenStateSuspendedYield) {\n            context.sent = arg;\n          } else {\n            delete context.sent;\n          }\n\n        } else if (method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw arg;\n          }\n\n          if (context.dispatchException(arg)) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            method = \"next\";\n            arg = undefined;\n          }\n\n        } else if (method === \"return\") {\n          context.abrupt(\"return\", arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          var info = {\n            value: record.arg,\n            done: context.done\n          };\n\n          if (record.arg === ContinueSentinel) {\n            if (context.delegate && method === \"next\") {\n              // Deliberately forget the last sent value so that we don't\n              // accidentally pass it on to the delegate.\n              arg = undefined;\n            }\n          } else {\n            return info;\n          }\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(arg) call above.\n          method = \"throw\";\n          arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset();\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function() {\n      this.prev = 0;\n      this.next = 0;\n      this.sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      // Pre-initialize at least 20 temporary variables to enable hidden\n      // class optimizations for simple generators.\n      for (var tempIndex = 0, tempName;\n           hasOwn.call(this, tempName = \"t\" + tempIndex) || tempIndex < 20;\n           ++tempIndex) {\n        this[tempName] = null;\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.next = finallyEntry.finallyLoc;\n      } else {\n        this.complete(record);\n      }\n\n      return ContinueSentinel;\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = record.arg;\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n","\ntype State = {\n  user: string,\n  clock: number\n};\n\ntype StateVector = Array<State>;\n\ntype StateSet = Object;\n\ntype IDBTransaction = Function;\ntype IDBObjectStore = Function;\ntype IDBRequest = Function;\ntype IDBCursor = Function;\ntype IDBKeyRange = Function;\n\ntype IDBOpenDBRequest = Function;\n\ndeclare var indexedDB : Object;\n\ndeclare var setTimeout : Function;\n\nclass AbstractTransaction { //eslint-disable-line no-unused-vars\n  constructor () {\n  }\n  *addOperation (op) {\n    var state = yield* this.getState(op.uid[0]);\n    if (state == null){\n      state = {\n        user: op.uid[0],\n        clock: 0\n      };\n    }\n    if (op.uid[1] === state.clock){\n      state.clock++;\n      yield* this.setState(state);\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nvar IndexedDB = (function(){ //eslint-disable-line no-unused-vars\n  class Transaction extends AbstractTransaction{\n    transaction: IDBTransaction;\n    sv: IDBObjectStore;\n    ob: IDBObjectStore;\n    constructor (transaction) {\n      super();\n      this.transaction = transaction;\n      this.sv = transaction.objectStore(\"StateVector\");\n      this.ob = transaction.objectStore(\"OperationBuffer\");\n    }\n    *setOperation (op) {\n        yield* (function*(){})();\n        yield this.ob.put(op);\n        return op;\n    }\n    *getOperation (uid) {\n        return yield this.ob.get(uid);\n    }\n    *setState (state : State) : State {\n      return yield this.sv.put(state);\n    }\n    *getState (user : string) : State {\n      return (yield this.sv.get(user)) || {\n        user: user,\n        clock: 0\n      };\n    }\n    *getStateVector () : StateVector {\n      var stateVector = [];\n      var cursorResult = this.sv.openCursor();\n      var cursor;\n      while ((cursor = yield cursorResult) != null) {\n        stateVector.push(cursor.value);\n        cursor.continue();\n      }\n      return stateVector;\n    }\n    *getStateSet () : StateSet {\n      var sv : StateVector = yield* this.getStateVector();\n      var ss : StateSet = {};\n      for (var state of sv){\n        ss[state.user] = state.clock;\n      }\n      return ss;\n    }\n\n    *getOperations (startSS : StateSet) {\n      if (startSS == null){\n        startSS = {};\n      }\n      var ops = [];\n\n      var endSV : StateVector = yield* this.getStateVector();\n      for (var endState of endSV) {\n        var user = endState.user;\n        var startPos = startSS[user] || 0;\n        var endPos = endState.clock;\n        var range = IDBKeyRange.bound([user, startPos], [user, endPos]);\n        var cursorResult = this.ob.openCursor(range);\n        var cursor;\n        while ((cursor = yield cursorResult) != null) {\n          ops.push(cursor.value);\n          cursor.continue();\n        }\n      }\n      return ops;\n    }\n  }\n  class DB {\n    namespace: string;\n    ready: Promise;\n    whenReadyListeners: Array<Function>;\n    constructor (namespace : string) {\n      this.whenReadyListeners = [];\n      this.namespace = namespace;\n      this.ready = false;\n\n      var req = indexedDB.open(namespace); //eslint-disable-line no-undef\n      req.onerror = function(){\n        throw new Error(\"Couldn't open the IndexedDB database!\");\n      };\n      req.onsuccess = (event)=>{\n        this.db = event.target.result;\n        this.whenReadyListeners.forEach(function(f){\n          setTimeout(f, 0);\n        });\n        this.whenReadyListeners = null;\n        this.ready = true;\n      };\n      req.onupgradeneeded = function(event){\n        var db = event.target.result;\n        db.createObjectStore(\"OperationBuffer\", {keyPath: \"uid\"});\n        db.createObjectStore(\"StateVector\", {keyPath: \"user\"});\n      };\n    }\n    whenReady (f : Function) {\n      if (this.ready){\n        setTimeout(f, 0);\n      } else {\n        this.whenReadyListeners.push(f);\n      }\n    }\n    requestTransaction (makeGen : Function) {\n      this.whenReady(()=>{\n        var transaction = new Transaction(this.db.transaction([\"OperationBuffer\", \"StateVector\"], \"readwrite\"));\n        var gen = makeGen.apply(transaction);\n\n        function handle(res : any){\n          var request : any = res.value;\n          if (res.done){\n            return;\n          } else if (request.constructor === IDBRequest\n                     || request.constructor === IDBCursor\n                     || request.constructor === IDBOpenDBRequest) {\n            request.onsuccess = function(){\n              handle(gen.next(request.result));\n            };\n            request.onerror = function(err){\n              gen.throw(err);\n            };\n          } else {\n            gen.throw(\"You can not yield this type!\");\n          }\n        }\n        handle(gen.next());\n      });\n    }\n    *removeDatabase () {\n      return yield indexedDB.deleteDatabase(this.namespace);\n    }\n  }\n  return DB;\n})();\n","/* @flow */\n\nclass OperationBuffer { //eslint-disable-line no-unused-vars\n  constructor () {\n\n  }\n}\n","/* @flow */\n\nclass Operation { //eslint-disable-line no-unused-vars\n  i : number;\n  constructor (op) {\n    this.i = op.i;\n  }\n  yay () {\n    return this.i;\n  }\n}\n"],"sourceRoot":"/source/"}
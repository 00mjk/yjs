{"version":3,"sources":["y.js","runtime.js","OperationStore.js","Operations.js","OperationStores/IndexedDB.js"],"names":["_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","__proto__","_classCallCheck","instance","Constructor","global","wrap","innerFn","outerFn","self","tryLocsList","generator","Generator","_invoke","makeInvokeMethod","Context","tryCatch","fn","obj","arg","type","call","err","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","forEach","method","this","AwaitArgument","AsyncIterator","invoke","result","Promise","resolve","then","invokeNext","invokeThrow","unwrapped","enqueue","enqueueResult","previousPromise","invokeReturn","process","domain","bind","context","state","GenStateSuspendedStart","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","iterator","undefined","returnMethod","record","info","done","GenStateSuspendedYield","resultName","next","nextLoc","sent","dispatchException","abrupt","ContinueSentinel","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","values","iterable","iteratorMethod","iteratorSymbol","isNaN","length","i","hasOwn","hasOwnProperty","Symbol","inModule","module","runtime","regeneratorRuntime","exports","Gp","displayName","isGeneratorFunction","genFun","ctor","name","mark","awrap","async","iter","toString","keys","object","key","reverse","pop","prev","tempName","tempIndex","stop","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","window","AbstractTransaction","store","addOperation","op","context$2$0","getState","id","clock","setState","operationAdded","AbstractOperationStore","listenersById","listenersByIdExecuteNow","listenersByIdRequestPending","whenOperationsExist","ids","f","args","listener","missing","_iterator","_isArray","Array","isArray","_i","_ref","sid","JSON","stringify","l","requestTransaction","callee$2$0","exeNow","ls","_iterator2","_isArray2","_i2","_ref2","_iterator3","_isArray3","_i3","_ref3","context$3$0","apply","t1","t2","parse","getOperation","t3","_iterator4","_isArray4","_i4","_ref4","Struct","Operation","user","context$1$0","t0","Insert","left","right","origin","setOperation","requiredOps","execute","IndexedDB","Transaction","_AbstractTransaction","transaction","db","sv","objectStore","os","buffer","put","get","removeOperation","getStateVector","stateVector","cursorResult","cursor","openCursor","getStateSet","ss","_iterator5","_isArray5","_i5","_ref5","getOperations","startSS","ops","endSV","_iterator6","_isArray6","_i6","_ref6","endState","startPos","endPos","range","IDBKeyRange","bound","OperationStore","_AbstractOperationStore","namespace","handleTransactions","t","request","IDBRequest","IDBCursor","onsuccess","tGen","onerror","transactionQueue","queue","shift","onRequest","IDBOpenDBRequest","event","target","onupgradeneeded","createObjectStore","keyPath","transactionGen","cont","context$4$0","indexedDB","open","makeGen","removeDatabase","close","deleteDatabase"],"mappings":"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","file":"y.js","sourcesContent":[null,"/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var iteratorSymbol =\n    typeof Symbol === \"function\" && Symbol.iterator || \"@@iterator\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided, then outerFn.prototype instanceof Generator.\n    var generator = Object.create((outerFn || Generator).prototype);\n\n    generator._invoke = makeInvokeMethod(\n      innerFn, self || null,\n      new Context(tryLocsList || [])\n    );\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    genFun.__proto__ = GeneratorFunctionPrototype;\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `value instanceof AwaitArgument` to determine if the yielded value is\n  // meant to be awaited. Some may consider the name of this method too\n  // cutesy, but they are curmudgeons.\n  runtime.awrap = function(arg) {\n    return new AwaitArgument(arg);\n  };\n\n  function AwaitArgument(arg) {\n    this.arg = arg;\n  }\n\n  function AsyncIterator(generator) {\n    // This invoke function is written in a style that assumes some\n    // calling function (or Promise) will handle exceptions.\n    function invoke(method, arg) {\n      var result = generator[method](arg);\n      var value = result.value;\n      return value instanceof AwaitArgument\n        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)\n        : Promise.resolve(value).then(function(unwrapped) {\n            result.value = unwrapped;\n            return result;\n          }, invokeThrow);\n    }\n\n    if (typeof process === \"object\" && process.domain) {\n      invoke = process.domain.bind(invoke);\n    }\n\n    var invokeNext = invoke.bind(generator, \"next\");\n    var invokeThrow = invoke.bind(generator, \"throw\");\n    var invokeReturn = invoke.bind(generator, \"return\");\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      var enqueueResult =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(function() {\n          return invoke(method, arg);\n        }) : new Promise(function(resolve) {\n          resolve(invoke(method, arg));\n        });\n\n      // Avoid propagating enqueueResult failures to Promises returned by\n      // later invocations of the iterator, and call generator.return() to\n      // allow the generator a chance to clean up.\n      previousPromise = enqueueResult[\"catch\"](invokeReturn);\n\n      return enqueueResult;\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          if (method === \"return\" ||\n              (method === \"throw\" && delegate.iterator[method] === undefined)) {\n            // A return or throw (when the delegate iterator has no throw\n            // method) always terminates the yield* loop.\n            context.delegate = null;\n\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            var returnMethod = delegate.iterator[\"return\"];\n            if (returnMethod) {\n              var record = tryCatch(returnMethod, delegate.iterator, arg);\n              if (record.type === \"throw\") {\n                // If the return method threw an exception, let that\n                // exception prevail over the original return or throw.\n                method = \"throw\";\n                arg = record.arg;\n                continue;\n              }\n            }\n\n            if (method === \"return\") {\n              // Continue with the outer return, now that the delegate\n              // iterator has been terminated.\n              continue;\n            }\n          }\n\n          var record = tryCatch(\n            delegate.iterator[method],\n            delegate.iterator,\n            arg\n          );\n\n          if (record.type === \"throw\") {\n            context.delegate = null;\n\n            // Like returning generator.throw(uncaught), but without the\n            // overhead of an extra function call.\n            method = \"throw\";\n            arg = record.arg;\n            continue;\n          }\n\n          // Delegate generator ran and handled its own exceptions so\n          // regardless of what the method was, we continue as if it is\n          // \"next\" with an undefined arg.\n          method = \"next\";\n          arg = undefined;\n\n          var info = record.arg;\n          if (info.done) {\n            context[delegate.resultName] = info.value;\n            context.next = delegate.nextLoc;\n          } else {\n            state = GenStateSuspendedYield;\n            return info;\n          }\n\n          context.delegate = null;\n        }\n\n        if (method === \"next\") {\n          if (state === GenStateSuspendedYield) {\n            context.sent = arg;\n          } else {\n            delete context.sent;\n          }\n\n        } else if (method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw arg;\n          }\n\n          if (context.dispatchException(arg)) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            method = \"next\";\n            arg = undefined;\n          }\n\n        } else if (method === \"return\") {\n          context.abrupt(\"return\", arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          var info = {\n            value: record.arg,\n            done: context.done\n          };\n\n          if (record.arg === ContinueSentinel) {\n            if (context.delegate && method === \"next\") {\n              // Deliberately forget the last sent value so that we don't\n              // accidentally pass it on to the delegate.\n              arg = undefined;\n            }\n          } else {\n            return info;\n          }\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(arg) call above.\n          method = \"throw\";\n          arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset();\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function() {\n      this.prev = 0;\n      this.next = 0;\n      this.sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      // Pre-initialize at least 20 temporary variables to enable hidden\n      // class optimizations for simple generators.\n      for (var tempIndex = 0, tempName;\n           hasOwn.call(this, tempName = \"t\" + tempIndex) || tempIndex < 20;\n           ++tempIndex) {\n        this[tempName] = null;\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.next = finallyEntry.finallyLoc;\n      } else {\n        this.complete(record);\n      }\n\n      return ContinueSentinel;\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = record.arg;\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n","/* @flow */\nclass AbstractTransaction { //eslint-disable-line no-unused-vars\n  constructor (store : OperationStore) {\n    this.store = store;\n  }\n  // Throws if operation is not expected.\n  *addOperation (op) {\n    var state = this.getState(op.id[0]);\n    if (op.id[1] === state.clock){\n      state.clock++;\n      yield* this.setState(state);\n      this.store.operationAdded(op);\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\ntype Listener = {\n  f : GeneratorFunction, // is called when all operations are available\n  missing : number // number of operations that are missing\n}\n\ntype Id = [string, number];\n\nclass AbstractOperationStore { //eslint-disable-line no-unused-vars\n  constructor () {\n    // E.g. this.listenersById[id] : Array<Listener>\n    this.listenersById = {};\n    // Execute the next time a transaction is requested\n    this.listenersByIdExecuteNow = [];\n    // A transaction is requested\n    this.listenersByIdRequestPending = false;\n    /* To make things more clear, the following naming conventions:\n       * ls : we put this.listenersById on ls\n       * l : Array<Listener>\n       * id : Id (can't use as property name)\n       * sid : String (converted from id via JSON.stringify\n                       so we can use it as a property name)\n\n      Always remember to first overwrite over\n      a property before you iterate over it!\n    */\n  }\n  // f is called as soon as every operation requested is available.\n  // Note that Transaction can (and should) buffer requests.\n  whenOperationsExist (ids : Array<Id>, f : GeneratorFunction, args : Array<any>) {\n    if (ids.length > 0) {\n      let listener : Listener = {\n        f: f,\n        args: args || [],\n        missing: ids.length\n      };\n\n      for (let id of ids) {\n        let sid = JSON.stringify(id);\n        let l = this.listenersById[sid];\n        if (l == null){\n          l = [];\n          this.listenersById[sid] = l;\n        }\n        l.push(listener);\n      }\n    } else {\n      this.listenersByIdExecuteNow.push({\n        f: f,\n        args: args || []\n      });\n    }\n\n    if (this.listenersByIdRequestPending){\n      return;\n    }\n\n    this.listenersByIdRequestPending = true;\n    var store = this;\n\n    this.requestTransaction(function*(){\n      var exeNow = store.listenersByIdExecuteNow;\n      store.listenersByIdExecuteNow = [];\n\n      var ls = store.listenersById;\n      store.listenersById = {};\n\n      store.listenersByIdRequestPending = false;\n\n      for (let listener of exeNow) {\n        yield* listener.f.apply(this, listener.args);\n      }\n\n      for (var sid in ls){\n        var l = ls[sid];\n        var id = JSON.parse(sid);\n        if ((yield* this.getOperation(id)) == null){\n          store.listenersById[sid] = l;\n        } else {\n          for (let listener of l) {\n            if (--listener.missing === 0){\n              yield* listener.f.apply(this, listener.args);\n            }\n          }\n        }\n      }\n    });\n  }\n  // called by a transaction when an operation is added\n  operationAdded (op) {\n    var l = this.listenersById[op.id];\n    if (l != null) {\n      for (var listener of l){\n        if (--listener.missing === 0){\n          this.whenOperationsExist([], listener.f, listener.args);\n        }\n      }\n    }\n  }\n}\n","/* @flow */\n\n// Op is anything that we could get from the OperationStore.\ntype Op = Object;\n\nvar Struct = {\n  Operation: {  //eslint-disable-line no-unused-vars\n    create: function*(op : Op, user : string) : Struct.Operation {\n      var state = yield* this.getState(user);\n      op.id = [user, state.clock];\n      return yield* this.addOperation(op);\n    }\n  },\n  Insert: {\n    create: function*( op : Op,\n                      user : string,\n                      left : Struct.Insert,\n                      right : Struct.Insert) : Struct.Insert {\n      op.left = left ? left.id : null;\n      op.origin = op.left;\n      op.right = right ? right.id : null;\n      op.type = \"Insert\";\n      yield* Struct.Operation.create(op, user);\n\n      if (left != null) {\n        left.right = op.id;\n        yield* this.setOperation(left);\n      }\n      if (right != null) {\n        right.left = op.id;\n        yield* this.setOperation(right);\n      }\n      return op;\n    },\n    requiredOps: function(op, ids){\n      ids.push(op.left);\n      ids.push(op.right);\n      return ids;\n    },\n    execute: function*(op){\n      return op;\n    }\n  }\n};\n","\ntype State = {\n  user: string,\n  clock: number\n};\n\ntype StateVector = Array<State>;\n\ntype StateSet = Object;\n\ntype IDBTransaction = Function;\ntype IDBObjectStore = Function;\ntype IDBRequest = Function;\ntype IDBCursor = Function;\ntype IDBKeyRange = Function;\n\ntype IDBOpenDBRequest = Function;\n\ndeclare var indexedDB : Object;\n\nvar IndexedDB = (function(){ //eslint-disable-line no-unused-vars\n  class Transaction extends AbstractTransaction { //eslint-disable-line\n    transaction: IDBTransaction;\n    sv: IDBObjectStore;\n    os: IDBObjectStore;\n    store: OperationStore;\n\n    constructor (store : OperationStore) {\n      super(store);\n      this.transaction = store.db.transaction([\"OperationStore\", \"StateVector\"], \"readwrite\");\n      this.sv = this.transaction.objectStore(\"StateVector\");\n      this.os = this.transaction.objectStore(\"OperationStore\");\n      this.buffer = {};\n    }\n    *setOperation (op) {\n      yield this.os.put(op);\n      this.buffer[JSON.stringify(op.id)] = op;\n      return op;\n    }\n    *getOperation (id) {\n      var op = this.buffer[JSON.stringify(id)];\n      if (op == null) {\n        op = yield this.os.get(id);\n        this.buffer[JSON.stringify(id)] = op;\n      }\n      return op;\n    }\n    *removeOperation (id) {\n      this.buffer[JSON.stringify(id)] = null;\n      return yield this.os.delete(id);\n    }\n    *setState (state : State) : State {\n      return yield this.sv.put(state);\n    }\n    *getState (user : string) : State {\n      var state;\n      if ((state = yield this.sv.get(user)) != null){\n        return state;\n      } else {\n        return {\n          user: user,\n          clock: 0\n        };\n      }\n    }\n    *getStateVector () : StateVector {\n      var stateVector = [];\n      var cursorResult = this.sv.openCursor();\n      var cursor;\n      while ((cursor = yield cursorResult) != null) {\n        stateVector.push(cursor.value);\n        cursor.continue();\n      }\n      return stateVector;\n    }\n    *getStateSet () : StateSet {\n      var sv : StateVector = yield* this.getStateVector();\n      var ss : StateSet = {};\n      for (var state of sv){\n        ss[state.user] = state.clock;\n      }\n      return ss;\n    }\n\n    *getOperations (startSS : StateSet) {\n      if (startSS == null){\n        startSS = {};\n      }\n      var ops = [];\n\n      var endSV : StateVector = yield* this.getStateVector();\n      for (var endState of endSV) {\n        var user = endState.user;\n        var startPos = startSS[user] || 0;\n        var endPos = endState.clock;\n        var range = IDBKeyRange.bound([user, startPos], [user, endPos]);\n        var cursorResult = this.os.openCursor(range);\n        var cursor;\n        while ((cursor = yield cursorResult) != null) {\n          ops.push(cursor.value);\n          cursor.continue();\n        }\n      }\n      return ops;\n    }\n  }\n  class OperationStore extends AbstractOperationStore { //eslint-disable-line no-undef\n    namespace: string;\n    ready: Promise;\n    whenReadyListeners: Array<Function>;\n    constructor (namespace : string) {\n      super();\n      this.namespace = namespace;\n      this.transactionQueue = {\n        queue: [],\n        onRequest: null\n      };\n\n      var store = this;\n\n      var tGen = (function *transactionGen(){\n        store.db = yield indexedDB.open(namespace, 3);\n        var transactionQueue = store.transactionQueue;\n\n        var transaction = null;\n        var cont = true;\n        while (cont) {\n          var request = yield transactionQueue;\n          transaction = new Transaction(store);\n\n          yield* request.call(transaction);/*\n          while (transactionQueue.queue.length > 0) {\n            yield* transactionQueue.queue.shift().call(transaction);\n          }*/\n        }\n      })();\n\n      function handleTransactions(t){ //eslint-disable-line no-unused-vars\n        var request = t.value;\n        if (t.done){\n          return;\n        } else if (request.constructor === IDBRequest\n                   || request.constructor === IDBCursor ) {\n          request.onsuccess = function(){\n            handleTransactions(tGen.next(request.result));\n          };\n          request.onerror = function(err){\n            tGen.throw(err);\n          };\n        } else if (request === store.transactionQueue) {\n          if (request.queue.length > 0){\n            handleTransactions(tGen.next(request.queue.shift()));\n          } else {\n            request.onRequest = function(){\n              request.onRequest = null;\n              handleTransactions(tGen.next(request.queue.shift()));\n            };\n          }\n        } else if ( request.constructor === IDBOpenDBRequest ) {\n          request.onsuccess = function(event){\n            var db = event.target.result;\n            handleTransactions(tGen.next(db));\n          };\n          request.onerror = function(){\n            tGen.throw(\"Couldn't open IndexedDB database!\");\n          };\n          request.onupgradeneeded = function(event){\n            var db = event.target.result;\n            db.createObjectStore(\"OperationStore\", {keyPath: \"id\"});\n            db.createObjectStore(\"StateVector\", {keyPath: \"user\"});\n          };\n        } else {\n          tGen.throw(\"You can not yield this type!\");\n        }\n      }\n      handleTransactions(tGen.next());\n\n    }\n    requestTransaction (makeGen : Function) {\n      this.transactionQueue.queue.push(makeGen);\n      if (this.transactionQueue.onRequest != null) {\n        this.transactionQueue.onRequest();\n      }\n    }\n    *removeDatabase () {\n      this.db.close();\n      yield indexedDB.deleteDatabase(this.namespace);\n    }\n  }\n  return OperationStore;\n})();\n"],"sourceRoot":"/source/"}
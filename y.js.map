{"version":3,"sources":["y.js","runtime.js","IndexedDB.js","OperationBuffer.js","Operations.js"],"names":["_classCallCheck","instance","Constructor","TypeError","global","wrap","innerFn","outerFn","self","tryLocsList","generator","Object","create","Generator","prototype","_invoke","makeInvokeMethod","Context","tryCatch","fn","obj","arg","type","call","err","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","forEach","method","this","AwaitArgument","AsyncIterator","invoke","result","value","Promise","resolve","then","invokeNext","invokeThrow","unwrapped","enqueue","enqueueResult","previousPromise","invokeReturn","process","domain","bind","context","state","GenStateSuspendedStart","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","iterator","undefined","returnMethod","record","info","done","GenStateSuspendedYield","resultName","next","nextLoc","sent","dispatchException","abrupt","ContinueSentinel","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","values","iterable","iteratorMethod","iteratorSymbol","isNaN","length","i","hasOwn","hasOwnProperty","Symbol","inModule","module","runtime","regeneratorRuntime","exports","Gp","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","__proto__","awrap","async","iter","toString","keys","object","key","reverse","pop","prev","tempName","tempIndex","stop","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","window","IndexedDB","callee$1$0","context$2$0","Transaction","transaction","setOperation","op","_this","reject","req","objectStore","put","onsuccess","onerror","getOperation","uid","_this2","get","getOperations","callee$3$0","context$4$0","DB","namespace","ready","yay","nay","indexedDB","open","event","target","onupgradeneeded","db","createObjectStore","keyPath","message","requestTransaction","makeGen","_x","_again","v","res","gen","apply","OperationBuffer","Operation"],"mappings":"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","file":"y.js","sourcesContent":[null,"/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var iteratorSymbol =\n    typeof Symbol === \"function\" && Symbol.iterator || \"@@iterator\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided, then outerFn.prototype instanceof Generator.\n    var generator = Object.create((outerFn || Generator).prototype);\n\n    generator._invoke = makeInvokeMethod(\n      innerFn, self || null,\n      new Context(tryLocsList || [])\n    );\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    genFun.__proto__ = GeneratorFunctionPrototype;\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `value instanceof AwaitArgument` to determine if the yielded value is\n  // meant to be awaited. Some may consider the name of this method too\n  // cutesy, but they are curmudgeons.\n  runtime.awrap = function(arg) {\n    return new AwaitArgument(arg);\n  };\n\n  function AwaitArgument(arg) {\n    this.arg = arg;\n  }\n\n  function AsyncIterator(generator) {\n    // This invoke function is written in a style that assumes some\n    // calling function (or Promise) will handle exceptions.\n    function invoke(method, arg) {\n      var result = generator[method](arg);\n      var value = result.value;\n      return value instanceof AwaitArgument\n        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)\n        : Promise.resolve(value).then(function(unwrapped) {\n            result.value = unwrapped;\n            return result;\n          }, invokeThrow);\n    }\n\n    if (typeof process === \"object\" && process.domain) {\n      invoke = process.domain.bind(invoke);\n    }\n\n    var invokeNext = invoke.bind(generator, \"next\");\n    var invokeThrow = invoke.bind(generator, \"throw\");\n    var invokeReturn = invoke.bind(generator, \"return\");\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      var enqueueResult =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(function() {\n          return invoke(method, arg);\n        }) : new Promise(function(resolve) {\n          resolve(invoke(method, arg));\n        });\n\n      // Avoid propagating enqueueResult failures to Promises returned by\n      // later invocations of the iterator, and call generator.return() to\n      // allow the generator a chance to clean up.\n      previousPromise = enqueueResult[\"catch\"](invokeReturn);\n\n      return enqueueResult;\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          if (method === \"return\" ||\n              (method === \"throw\" && delegate.iterator[method] === undefined)) {\n            // A return or throw (when the delegate iterator has no throw\n            // method) always terminates the yield* loop.\n            context.delegate = null;\n\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            var returnMethod = delegate.iterator[\"return\"];\n            if (returnMethod) {\n              var record = tryCatch(returnMethod, delegate.iterator, arg);\n              if (record.type === \"throw\") {\n                // If the return method threw an exception, let that\n                // exception prevail over the original return or throw.\n                method = \"throw\";\n                arg = record.arg;\n                continue;\n              }\n            }\n\n            if (method === \"return\") {\n              // Continue with the outer return, now that the delegate\n              // iterator has been terminated.\n              continue;\n            }\n          }\n\n          var record = tryCatch(\n            delegate.iterator[method],\n            delegate.iterator,\n            arg\n          );\n\n          if (record.type === \"throw\") {\n            context.delegate = null;\n\n            // Like returning generator.throw(uncaught), but without the\n            // overhead of an extra function call.\n            method = \"throw\";\n            arg = record.arg;\n            continue;\n          }\n\n          // Delegate generator ran and handled its own exceptions so\n          // regardless of what the method was, we continue as if it is\n          // \"next\" with an undefined arg.\n          method = \"next\";\n          arg = undefined;\n\n          var info = record.arg;\n          if (info.done) {\n            context[delegate.resultName] = info.value;\n            context.next = delegate.nextLoc;\n          } else {\n            state = GenStateSuspendedYield;\n            return info;\n          }\n\n          context.delegate = null;\n        }\n\n        if (method === \"next\") {\n          if (state === GenStateSuspendedYield) {\n            context.sent = arg;\n          } else {\n            delete context.sent;\n          }\n\n        } else if (method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw arg;\n          }\n\n          if (context.dispatchException(arg)) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            method = \"next\";\n            arg = undefined;\n          }\n\n        } else if (method === \"return\") {\n          context.abrupt(\"return\", arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          var info = {\n            value: record.arg,\n            done: context.done\n          };\n\n          if (record.arg === ContinueSentinel) {\n            if (context.delegate && method === \"next\") {\n              // Deliberately forget the last sent value so that we don't\n              // accidentally pass it on to the delegate.\n              arg = undefined;\n            }\n          } else {\n            return info;\n          }\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(arg) call above.\n          method = \"throw\";\n          arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset();\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function() {\n      this.prev = 0;\n      this.next = 0;\n      this.sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      // Pre-initialize at least 20 temporary variables to enable hidden\n      // class optimizations for simple generators.\n      for (var tempIndex = 0, tempName;\n           hasOwn.call(this, tempName = \"t\" + tempIndex) || tempIndex < 20;\n           ++tempIndex) {\n        this[tempName] = null;\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.next = finallyEntry.finallyLoc;\n      } else {\n        this.complete(record);\n      }\n\n      return ContinueSentinel;\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = record.arg;\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n","\nvar IndexedDB = (function(){ //eslint-disable-line no-unused-vars\n  var GeneratorFunction = (function*(){}).constructor;\n\n  class Transaction {\n    constructor (transaction) {\n      this.transaction = transaction;\n    }\n    setOperation (op) {\n      return new Promise((resolve, reject)=> {\n        var req = this.transaction.objectStore(\"OperationBuffer\").put(op);\n        req.onsuccess = function () {\n          resolve(op);\n        };\n        req.onerror = function () {\n          reject(\"Could not set Operation!\");\n        };\n      });\n    }\n    getOperation (uid) {\n      return new Promise((resolve, reject)=>{\n        var req = this.transaction.objectStore(\"OperationBuffer\").get(uid);\n        req.onsuccess = function () {\n          resolve(req.result);\n        };\n        req.onerror = function () {\n          reject(\"Could not get Operation\");\n        };\n      });\n    }\n    getOperations () {\n      var ops = [];\n      var ob = this.transaction.objectStore(\"OperationBuffer\");\n\n      return function* () {\n        var op = yield this.getOperation([\"u1\",0]);\n        return op.uid;\n      };\n    }\n    /*\n    getOperations: (state_map)->\n      flow = Promise.resolve()\n      ops = []\n      that = this\n      hb = that.t.objectStore(\"HistoryBuffer\")\n\n      that.getStateVector().then (end_state_vector)->\n        for end_state of end_state_vector\n          # convert to the db-structure\n          do (end_state = end_state)->\n            start_state =\n              user: end_state.name\n              state: state_map[end_state] ? 0\n\n            flow = flow.then ()->\n              from = [start_state.user, start_state.number]\n              to = [end_state.user, end_state.number]\n                cursor = event.target.result\n                if cursor?\n                  ops.push cursor.value # add Operation\n                  cursor.continue()\n                else\n                  # got all ops from this user\n                  defer.resolve ops\n              defer.promise\n    */\n  }\n  class DB {\n    constructor (namespace : string) {\n      this.namespace = namespace;\n      this.ready = new Promise(function(yay, nay){\n        var req = indexedDB.open(namespace); //eslint-disable-line no-undef\n        req.onerror = function(){\n          nay(\"Couldn't open the IndexedDB database!\");\n        };\n        req.onsuccess = function(event){\n          yay(event.target.result);\n        };\n        req.onupgradeneeded = function(event){\n          var db = event.target.result;\n          db.createObjectStore(\"OperationBuffer\", {keyPath: \"uid\"});\n          db.createObjectStore(\"StateVector\", {keyPath: \"user\"});\n        };\n      }).catch(function(message){\n          throw new Error(message);\n      });\n    }\n    requestTransaction (makeGen : Function) {\n      this.ready.then(function(db){\n        var transaction = new Transaction(db.transaction([\"OperationBuffer\", \"StateVector\"], \"readwrite\"));\n        var gen = makeGen.apply(transaction);\n        function handle(result : Object){\n          var v = result.value\n          if (result.done) {\n            return v;\n          } else if (v.constructor === Promise) {\n            return result.value.then(function(res){\n              return handle(gen.next(res));\n            }, function(err){\n              return handle(gen.throw(err));\n            });\n          } else if (v.constructor === GeneratorFunction){\n            return handle(v.apply(transaction).next());\n          } else {\n            throw new Error(\"I do only accept Promises and Generators!\")\n          }\n        }\n        return handle(gen.next());\n      });\n    }\n  }\n  return DB;\n})();\n","/* @flow */\n\nclass OperationBuffer { //eslint-disable-line no-unused-vars\n  i : number;\n  constructor () {\n    this.i = 4;\n  }\n}\n","/* @flow */\n\nclass Operation { //eslint-disable-line no-unused-vars\n  i : number;\n  constructor (op) {\n    this.i = op.i;\n  }\n  yay () {\n    return this.i;\n  }\n}\n"],"sourceRoot":"/source/"}
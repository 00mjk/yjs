{"version":3,"sources":["y.js","Struct.js","Connectors/Test.js","OperationStores/Memory.js","runtime.js","Connector.js","OperationStore.js","Connectors/WebRTC.js","OperationStores/IndexedDB.js","Types/List.js","Types/Map.js"],"names":["_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","__proto__","_classCallCheck","instance","Constructor","compareIds","id1","id2","getRandom","o","Array","Math","floor","random","length","keys","key","push","flushOne","bufs","i","globalRoom","buffers","userId","m","shift","user","users","receiveMessage","copyObject","c","global","wrap","innerFn","outerFn","self","tryLocsList","generator","Generator","_invoke","makeInvokeMethod","Context","tryCatch","fn","obj","arg","type","call","err","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","forEach","method","this","AwaitArgument","AsyncIterator","invoke","result","Promise","resolve","then","invokeNext","invokeThrow","unwrapped","enqueue","enqueueResult","previousPromise","invokeReturn","process","domain","bind","context","state","GenStateSuspendedStart","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","iterator","undefined","returnMethod","record","info","done","GenStateSuspendedYield","resultName","next","nextLoc","sent","dispatchException","abrupt","ContinueSentinel","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","values","iterable","iteratorMethod","iteratorSymbol","isNaN","hasOwn","hasOwnProperty","Symbol","inModule","module","runtime","regeneratorRuntime","exports","Gp","displayName","isGeneratorFunction","genFun","ctor","name","mark","awrap","async","iter","toString","object","reverse","pop","prev","tempName","tempIndex","stop","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","window","callee$0$0","context$1$0","Y","opts","db","connector","requestTransaction","callee$2$0","context$3$0","addOperation","id","struct","map","transact","destroy","disconnect","removeDatabase","AbstractConnector","y","role","connections","userEventListeners","whenSyncedListeners","currentSyncTarget","syncingClients","forwardToSyncingClients","debug","setUserId","onUserEvent","f","userLeft","findNextSyncTarget","_iterator","_isArray","isArray","_i","_ref","action","userJoined","isSynced","_iterator2","_isArray2","_i2","_ref2","whenSynced","syncUser","uid","conn","t0","t1","getStateVector","t3","t2","t4","stateVector","send","_iterator3","_isArray3","_i3","_ref3","sender","_this","console","log","JSON","stringify","callee$3$0","ops","sv","context$4$0","getOperations","os","setTimeout","filter","cli","syncingClientDuration","apply","broadcast","_iterator4","_isArray4","_i4","_ref4","client","parseMessageFromXml","parseArray","_x","_again","_function","node","_iterator5","_isArray5","_i5","_ref5","n","children","getAttribute","parseObject","json","attrName","attrs","int","parseInt","encodeMessageToXml","msg","encodeObject","encodeArray","setAttribute","array","_iterator6","_isArray6","_i6","_ref6","e","xmlns","AbstractTransaction","store","op","context$2$0","getState","clock","setState","setOperation","operationAdded","AbstractOperationStore","parentListeners","parentListenersRequestPending","parentListenersActivated","listenersById","listenersByIdExecuteNow","listenersByIdRequestPending","required","Struct","requiredOps","whenOperationsExist","execute","ids","args","listener","missing","_id","sid","l","exeNow","ls","parse","getOperation","t6","t5","t7","t8","listeners","parent","al","activatedOperations","parentId","notifyObservers","removeParentListener","g","addParentListener","Operation","Insert","start","end","left","right","origin","parentSub","getDistanceToOrigin","d","distanceToOrigin","tmp","p","t9","next_cl","t10","t11","t13","t16","List","ref","pos","res","operation","content","insert","contents","or","Map","get","set","removeUser","addUser","uname","u","setInterval","userIdCounter","Test","_AbstractConnector","options","message","flushAll","WebRTC","_AbstractConnector2","room","url","swr","SimpleWebRTC","once","joinRoom","webrtc","peers","on","peer","room_","payload","success","getPeers","sendDirectly","sendDirectlyToAll","IndexedDB","Transaction","_AbstractTransaction","transaction","objectStore","buffer","put","removeOperation","cursorResult","cursor","openCursor","getStateSet","ss","_iterator7","_isArray7","_i7","_ref7","startSS","endSV","_iterator8","_isArray8","_i8","_ref8","endState","startPos","endPos","range","IDBKeyRange","bound","OperationStore","_AbstractOperationStore","handleTransactions","t","request","IDBRequest","IDBCursor","onsuccess","tGen","onerror","transactionQueue","queue","onRequest","IDBOpenDBRequest","event","target","onupgradeneeded","createObjectStore","keyPath","namespace","idbVersion","transactionGen","cont","indexedDB","open","makeGen","close","deleteDatabase","Memory","_AbstractTransaction2","_iterator9","_isArray9","_i9","_ref9","makeOperationReady","_AbstractOperationStore2","gen","Create","_model","val","YList","model","args$3$0","arguments","YMap"],"mappings":"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","file":"y.js","sourcesContent":["/* @flow */\n\nconst GeneratorFunction = (function*(){}).constructor;\n\nclass Y { //eslint-disable-line no-unused-vars\n  constructor (opts) {\n    this.db = new Y[opts.db.name](this, opts.db);\n    this.connector = new Y[opts.connector.name](this, opts.connector);\n    this.db.requestTransaction(function*(){\n      // create initial Map type\n      yield* this.addOperation({\n        id: [\"_\", 0],\n        struct: \"Map\",\n        map: {}\n      });\n    });\n  }\n  transact (generator) {\n    if (generator.constructor !== GeneratorFunction) {\n      throw new Error(\"y.transact requires a Generator function! E.g. function*(){/*..*/}\");\n    }\n    this.db.requestTransaction(generator);\n  }\n  destroy () {\n    this.connector.disconnect();\n    this.db.removeDatabase();\n    this.connector = null;\n    this.db = null;\n    this.transact = function(){\n      throw new Error(\"Remember?, you destroyed this type ;)\");\n    };\n  }\n}\n","/* @flow */\n\n// Op is anything that we could get from the OperationStore.\ntype Op = Object;\ntype Id = [string, number];\n\ntype List = {\n  id: Id,\n  start: Insert,\n  end: Insert\n};\n\ntype Insert = {\n  id: Id,\n  left: Insert,\n  right: Insert,\n  origin: Insert,\n  parent: List,\n  content: any\n};\n\nfunction compareIds(id1, id2) {\n  if (id1 == null) {\n    if (id2 == null) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  if (id1[0] === id2[0] && id1[1] === id2[1]) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvar Struct = {\n  Operation: {  //eslint-disable-line no-unused-vars\n    create: function*(op : Op) : Struct.Operation {\n      var user = this.store.y.connector.userId;\n      var state = yield* this.getState(user);\n      op.id = [user, state.clock];\n      yield* this.addOperation(op);\n      this.store.y.connector.broadcast({\n        type: \"update\",\n        ops: [op]\n      });\n    }\n  },\n  Insert: {\n    /*{\n        content: any,\n        left: Id,\n        right: Id,\n        parent: Id,\n        parentSub: string (optional)\n      }\n    */\n    create: function*( op: Op ) : Insert {\n      if ( op.left === undefined\n        || op.right === undefined\n        || op.parent === undefined ) {\n          throw new Error(\"You must define left, right, and parent!\");\n        }\n      op.origin = op.left;\n      op.struct = \"Insert\";\n      yield* Struct.Operation.create.call(this, op);\n\n      if (op.left != null) {\n        op.left.right = op.id;\n        yield* this.setOperation(op.left);\n      }\n      if (op.right != null) {\n        op.right.left = op.id;\n        yield* this.setOperation(op.right);\n      }\n      var parent = yield* this.getOperation(op.parent);\n      if (op.parentSub != null){\n        if (compareIds(parent.map[op.parentSub], op.left)) {\n          parent.map[op.parentSub] = op.id;\n          yield* this.setOperation(parent);\n        }\n      } else {\n        var start = compareIds(parent.start, op.right);\n        var end = compareIds(parent.end, op.left);\n        if (start || end) {\n          if (start) {\n            parent.start = op.id;\n          }\n          if (end) {\n            parent.end = op.id;\n          }\n          yield* this.setOperation(parent);\n        }\n      }\n      return op;\n    },\n    requiredOps: function(op){\n      var ids = [];\n      if(op.left != null){\n        ids.push(op.left);\n      }\n      if(op.right != null){\n        ids.push(op.right);\n      }\n      if(op.right == null && op.left == null) {\n        ids.push(op.parent);\n      }\n      return ids;\n    },\n    getDistanceToOrigin: function *(op){\n      var d = 0;\n      var o = yield* this.getOperation(op.left);\n      while (op.origin !== (o ? o.id : null)) {\n        d++;\n        o = yield* this.getOperation(o.left);\n      }\n      return d;\n    },\n    /*\n    # $this has to find a unique position between origin and the next known character\n    # case 1: $origin equals $o.origin: the $creator parameter decides if left or right\n    #         let $OL= [o1,o2,o3,o4], whereby $this is to be inserted between o1 and o4\n    #         o2,o3 and o4 origin is 1 (the position of o2)\n    #         there is the case that $this.creator < o2.creator, but o3.creator < $this.creator\n    #         then o2 knows o3. Since on another client $OL could be [o1,o3,o4] the problem is complex\n    #         therefore $this would be always to the right of o3\n    # case 2: $origin < $o.origin\n    #         if current $this insert_position > $o origin: $this ins\n    #         else $insert_position will not change\n    #         (maybe we encounter case 1 later, then this will be to the right of $o)\n    # case 3: $origin > $o.origin\n    #         $this insert_position is to the left of $o (forever!)\n    */\n    execute: function*(op){\n      var distanceToOrigin = yield* Struct.Insert.getDistanceToOrigin.call(this, op); // most cases: 0 (starts from 0)\n      var i = distanceToOrigin; // loop counter\n      var o, tmp;\n      if (op.right == null && op.left == null) {\n       var p = yield* this.getOperation(op.parent);\n       if (op.parentSub != null) {\n         tmp = p.map[op.parentSub];\n         if (!compareIds(tmp, op.id)) {\n           op.right = tmp;\n         }\n         if (op.right == null) {\n           // this is the first ins in parent\n           p.map[op.parentSub] = op.id;\n           yield* this.setOperation(p);\n           yield* this.setOperation(op);\n           return;\n         }\n       } else {\n         tmp = p.start;\n         if (!compareIds(tmp, op.id)) {\n           op.left = tmp;\n         }\n         if (op.left == null) {\n           // this is the first ins in parent\n           p.start = op.id;\n           p.end = op.id;\n           yield* this.setOperation(p);\n           yield* this.setOperation(op);\n           return;\n         }\n       }\n      }\n\n      if (op.left != null) {\n        o = yield* this.getOperation(op.left);\n        o = yield* this.getOperation(o.right);\n      } else if (op.right != null) {\n        o = yield* this.getOperation(op.right);\n        while (o.left != null){\n          o = yield* this.getOperation(o.left);\n        }\n      }\n      while (true) {\n        if (o != null && o.id !== op.right){\n          if (Struct.Insert.getDistanceToOrigin(o) === i) {\n            // case 1\n            if (o.id[0] < op.id[0]) {\n              op.left = o.id;\n              distanceToOrigin = i + 1;\n            }\n          } else if ((tmp = Struct.Insert.getDistanceToOrigin(o)) < i) {\n            // case 2\n            if (i - distanceToOrigin <= tmp) {\n              op.left = o.id;\n              distanceToOrigin = i + 1;\n            }\n          } else {\n            break;\n          }\n          i++;\n          o = yield* this.getOperation(o.next_cl);\n        } else {\n          break;\n        }\n      }\n\n      // reconnect..\n      var left = null;\n      var right = null;\n      if (op.left != null) {\n        left = yield* this.getOperation(op.left);\n        left.right = op.id;\n        yield* this.setOperation(left);\n      }\n      if (op.right != null) {\n        right = yield* this.getOperation(op.right);\n        right.left = op.id;\n        yield* this.setOperation(right);\n      }\n      yield* this.setOperation(op);\n\n      // notify parent\n      var parent = yield* this.getOperation(op.parent);\n      if (op.parentSub != null) {\n        if (right == null) {\n          parent.map[op.parentSub] = op.id;\n          yield* this.setOperation(parent);\n        }\n      } else {\n        if (right == null || left == null) {\n          if (right == null) {\n            parent.end = op.id;\n          }\n          if (left == null) {\n            parent.start = op.id;\n          }\n          yield* this.setOperation(parent);\n        }\n      }\n      yield* this.setOperation(op);\n    }\n  },\n  List: {\n    create: function*( op : Op){\n      op.start = null;\n      op.end = null;\n      op.struct = \"List\";\n      return yield* Struct.Operation.create.call(this, op);\n    },\n    requiredOps: function(op){\n      var ids = [];\n      if (op.start != null) {\n        ids.push(op.start);\n      }\n      if (op.end != null){\n        ids.push(op.end);\n      }\n      return ids;\n    },\n    execute: function* (op) {\n      yield* this.setOperation(op);\n    },\n    ref: function* (op : Op, pos : number) : Insert {\n      var o = op.start;\n      while ( pos !== 0 || o != null) {\n        o = (yield* this.getOperation(o)).right;\n        pos--;\n      }\n      return (o == null) ? null : yield* this.getOperation(o);\n    },\n    map: function* (o : Op, f : Function) : Array<any> {\n      o = o.start;\n      var res = [];\n      while ( o != null) {\n        var operation = yield* this.getOperation(o);\n        res.push(f(operation.content));\n        o = operation.right;\n      }\n      return res;\n    },\n    insert: function* (op, pos : number, contents : Array<any>) {\n      var o = yield* Struct.List.ref.call(this, op, pos);\n      var or = yield* this.getOperation(o.right);\n      for (var key in contents) {\n        var insert = {\n          left: o,\n          right: or,\n          content: contents[key],\n          parent: op\n        };\n        o = yield* Struct.Insert.create.call(this, insert);\n      }\n    }\n  },\n  Map: {\n    /*\n      {\n        // empty\n      }\n    */\n    create: function*( op : Op ){\n      op.map = {};\n      op.struct = \"Map\";\n      return yield* Struct.Operation.create.call(this, op);\n    },\n    requiredOps: function(op){\n      var ids = [];\n      for (var end in op.map) {\n        ids.push(op.map[end]);\n      }\n      return ids;\n    },\n    execute: function* (op) {\n      yield* this.setOperation(op);\n    },\n    get: function* (op, name) {\n      var res = yield* this.getOperation(op.map[name]);\n      return (res != null) ? res.content : void 0;\n    },\n    set: function* (op, name, value) {\n      var end = op.map[name];\n      if (end == null) {\n        end = null;\n        op.map[name] = end;\n      }\n      var insert = {\n        left: end,\n        right: null,\n        content: value,\n        parent: op.id,\n        parentSub: name\n      };\n      yield* Struct.Insert.create.call(this, insert);\n    }\n  }\n};\n\nY.Struct = Struct;\n","// returns a random element of o\n// works on Object, and Array\nfunction getRandom (o) {\n  if (o instanceof Array) {\n    return o[Math.floor(Math.random() * o.length)];\n  } else if (o.constructor === Object) {\n    var keys = [];\n    for (var key in o) {\n      keys.push(key);\n    }\n    return o[getRandom(keys)];\n  }\n}\n\nvar globalRoom = {\n  users: {},\n  buffers: {},\n  removeUser: function(user : AbstractConnector){\n\n    for (var i in this.users) {\n      this.users[i].userLeft(user);\n    }\n    delete this.users[user];\n    delete this.buffers[user];\n  },\n  addUser: function(connector){\n    this.users[connector.userId] = connector;\n    this.buffers[connector.userId] = [];\n    for (var uname in this.users) {\n      if (uname !== connector.userId) {\n        var u = this.users[uname];\n        u.userJoined(connector.userId, \"master\");\n        connector.userJoined(u.userId, \"master\");\n      }\n    }\n  }\n};\nfunction flushOne(){\n  var bufs = [];\n  for (var i in globalRoom.buffers) {\n    if (globalRoom.buffers[i].length > 0) {\n      bufs.push(i);\n    }\n  }\n  if (bufs.length > 0) {\n    var userId = getRandom(bufs);\n    var m = globalRoom.buffers[userId].shift();\n    var user = globalRoom.users[userId];\n    user.receiveMessage(m[0], m[1]);\n    return true;\n  } else {\n    return false;\n  }\n}\nsetInterval(flushOne, 10);\n\nvar userIdCounter = 0;\n\nclass Test extends AbstractConnector {\n  constructor (y, options) {\n    if(options === undefined){\n      throw new Error(\"Options must not be undefined!\");\n    }\n    options.role = \"master\";\n    options.forwardToSyncingClients = false;\n    super(y, options);\n    this.setUserId((userIdCounter++) + \"\");\n    globalRoom.addUser(this);\n    this.globalRoom = globalRoom;\n  }\n  send (userId, message) {\n    globalRoom.buffers[userId].push([this.userId, message]);\n  }\n  broadcast (message) {\n    for (var key in globalRoom.buffers) {\n      globalRoom.buffers[key].push([this.userId, message]);\n    }\n  }\n  disconnect () {\n    globalRoom.removeUser(this.userId);\n  }\n  flushAll () {\n    var c = true;\n    while (c) {\n      c = flushOne();\n    }\n  }\n}\n\nY.Test = Test;\n","\ntype State = {\n  user: string,\n  clock: number\n};\n\n\nfunction copyObject (o) {\n  var c = {};\n  for (var key in o) {\n    c[key] = o[key];\n  }\n  return c;\n}\n\ntype StateVector = Array<State>;\ntype OperationSet = Object; // os[Id] = op\ntype StateSet = Object;\n\nY.Memory = (function(){ //eslint-disable-line no-unused-vars\n  class Transaction extends AbstractTransaction { //eslint-disable-line\n    ss: StateSet;\n    os: OperationSet;\n    store: OperationStore;\n\n    constructor (store : OperationStore) {\n      super(store);\n      this.ss = store.ss;\n      this.os = store.os;\n    }\n    *setOperation (op) {\n      this.os[JSON.stringify(op.id)] = op;\n      return op;\n    }\n    *getOperation (id) {\n      return this.os[JSON.stringify(id)];\n    }\n    *removeOperation (id) {\n      delete this.os[JSON.stringify(id)];\n    }\n    *setState (state : State) : State {\n      this.ss[state.user] = state.clock;\n    }\n    *getState (user : string) : State {\n      var clock = this.ss[user];\n      if (clock == null){\n        clock = 0;\n      }\n      return {\n        user: user,\n        clock: clock\n      };\n    }\n    *getStateVector () : StateVector {\n      var stateVector = [];\n\n      for (var user in this.ss) {\n        var clock = this.ss[user];\n        stateVector.push({\n          user: user,\n          clock: clock\n        });\n      }\n      return stateVector;\n    }\n    *getStateSet () : StateSet {\n      return this.ss;\n    }\n    *getOperations (startSS : StateSet) {\n      if (startSS == null){\n        startSS = {};\n      }\n      var ops = [];\n\n      var endSV : StateVector = yield* this.getStateVector();\n      for (var endState of endSV) {\n        var user = endState.user;\n        if (user === \"_\") {\n          continue;\n        }\n        var startPos = startSS[user] || 0;\n        var endPos = endState.clock;\n\n        for (var clock = startPos; clock <= endPos; clock++) {\n          var op = yield* this.getOperation([user, clock]);\n          if (op != null) {\n            ops.push(yield* this.makeOperationReady.call(this, startSS, op));\n          }\n        }\n      }\n      return ops;\n    }\n    *makeOperationReady (ss, op) {\n      var clock;\n      var o = op;\n      while (true){\n        // while unknown, go to the right\n        o = yield* this.getOperation(o.right);\n        if (o == null) {\n          break;\n        }\n        clock = ss[o.id[0]];\n        if (clock != null && o.id[1] < clock ) {\n          break;\n        }\n      }\n      op = copyObject(op);\n      op.right = (o == null) ? null : o.id;\n      return op;\n    }\n  }\n  class OperationStore extends AbstractOperationStore { //eslint-disable-line no-undef\n    constructor (y) {\n      super(y);\n      this.os = {};\n      this.ss = {};\n    }\n    requestTransaction (makeGen : Function) {\n      var t = new Transaction(this);\n      var gen = makeGen.call(t, new Y.Map.Create([\"_\", 0]));\n      var res = gen.next();\n      while(!res.done){\n        if (res.value === \"transaction\") {\n          res = gen.next(t);\n        } else {\n          throw new Error(\"You may not yield this type. (Maybe you meant to use 'yield*'?)\");\n        }\n      }\n    }\n    *removeDatabase () {\n      delete this.os;\n    }\n  }\n  return OperationStore;\n})();\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var iteratorSymbol =\n    typeof Symbol === \"function\" && Symbol.iterator || \"@@iterator\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided, then outerFn.prototype instanceof Generator.\n    var generator = Object.create((outerFn || Generator).prototype);\n\n    generator._invoke = makeInvokeMethod(\n      innerFn, self || null,\n      new Context(tryLocsList || [])\n    );\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    genFun.__proto__ = GeneratorFunctionPrototype;\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `value instanceof AwaitArgument` to determine if the yielded value is\n  // meant to be awaited. Some may consider the name of this method too\n  // cutesy, but they are curmudgeons.\n  runtime.awrap = function(arg) {\n    return new AwaitArgument(arg);\n  };\n\n  function AwaitArgument(arg) {\n    this.arg = arg;\n  }\n\n  function AsyncIterator(generator) {\n    // This invoke function is written in a style that assumes some\n    // calling function (or Promise) will handle exceptions.\n    function invoke(method, arg) {\n      var result = generator[method](arg);\n      var value = result.value;\n      return value instanceof AwaitArgument\n        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)\n        : Promise.resolve(value).then(function(unwrapped) {\n            result.value = unwrapped;\n            return result;\n          }, invokeThrow);\n    }\n\n    if (typeof process === \"object\" && process.domain) {\n      invoke = process.domain.bind(invoke);\n    }\n\n    var invokeNext = invoke.bind(generator, \"next\");\n    var invokeThrow = invoke.bind(generator, \"throw\");\n    var invokeReturn = invoke.bind(generator, \"return\");\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      var enqueueResult =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(function() {\n          return invoke(method, arg);\n        }) : new Promise(function(resolve) {\n          resolve(invoke(method, arg));\n        });\n\n      // Avoid propagating enqueueResult failures to Promises returned by\n      // later invocations of the iterator, and call generator.return() to\n      // allow the generator a chance to clean up.\n      previousPromise = enqueueResult[\"catch\"](invokeReturn);\n\n      return enqueueResult;\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          if (method === \"return\" ||\n              (method === \"throw\" && delegate.iterator[method] === undefined)) {\n            // A return or throw (when the delegate iterator has no throw\n            // method) always terminates the yield* loop.\n            context.delegate = null;\n\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            var returnMethod = delegate.iterator[\"return\"];\n            if (returnMethod) {\n              var record = tryCatch(returnMethod, delegate.iterator, arg);\n              if (record.type === \"throw\") {\n                // If the return method threw an exception, let that\n                // exception prevail over the original return or throw.\n                method = \"throw\";\n                arg = record.arg;\n                continue;\n              }\n            }\n\n            if (method === \"return\") {\n              // Continue with the outer return, now that the delegate\n              // iterator has been terminated.\n              continue;\n            }\n          }\n\n          var record = tryCatch(\n            delegate.iterator[method],\n            delegate.iterator,\n            arg\n          );\n\n          if (record.type === \"throw\") {\n            context.delegate = null;\n\n            // Like returning generator.throw(uncaught), but without the\n            // overhead of an extra function call.\n            method = \"throw\";\n            arg = record.arg;\n            continue;\n          }\n\n          // Delegate generator ran and handled its own exceptions so\n          // regardless of what the method was, we continue as if it is\n          // \"next\" with an undefined arg.\n          method = \"next\";\n          arg = undefined;\n\n          var info = record.arg;\n          if (info.done) {\n            context[delegate.resultName] = info.value;\n            context.next = delegate.nextLoc;\n          } else {\n            state = GenStateSuspendedYield;\n            return info;\n          }\n\n          context.delegate = null;\n        }\n\n        if (method === \"next\") {\n          if (state === GenStateSuspendedYield) {\n            context.sent = arg;\n          } else {\n            delete context.sent;\n          }\n\n        } else if (method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw arg;\n          }\n\n          if (context.dispatchException(arg)) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            method = \"next\";\n            arg = undefined;\n          }\n\n        } else if (method === \"return\") {\n          context.abrupt(\"return\", arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          var info = {\n            value: record.arg,\n            done: context.done\n          };\n\n          if (record.arg === ContinueSentinel) {\n            if (context.delegate && method === \"next\") {\n              // Deliberately forget the last sent value so that we don't\n              // accidentally pass it on to the delegate.\n              arg = undefined;\n            }\n          } else {\n            return info;\n          }\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(arg) call above.\n          method = \"throw\";\n          arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset();\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function() {\n      this.prev = 0;\n      this.next = 0;\n      this.sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      // Pre-initialize at least 20 temporary variables to enable hidden\n      // class optimizations for simple generators.\n      for (var tempIndex = 0, tempName;\n           hasOwn.call(this, tempName = \"t\" + tempIndex) || tempIndex < 20;\n           ++tempIndex) {\n        this[tempName] = null;\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.next = finallyEntry.finallyLoc;\n      } else {\n        this.complete(record);\n      }\n\n      return ContinueSentinel;\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = record.arg;\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n","\nclass AbstractConnector { //eslint-disable-line no-unused-vars\n  /*\n    opts\n     .role : String Role of this client (\"master\" or \"slave\")\n     .userId : String that uniquely defines the user.\n  */\n  constructor (y, opts) {\n    this.y = y;\n    if (opts == null){\n      opts = {};\n    }\n    if (opts.role == null || opts.role === \"master\") {\n      this.role = \"master\";\n    } else if (opts.role === \"slave\") {\n      this.role = \"slave\";\n    } else {\n      throw new Error(\"Role must be either 'master' or 'slave'!\");\n    }\n    this.role = opts.role;\n    this.connections = {};\n    this.userEventListeners = [];\n    this.whenSyncedListeners = [];\n    this.currentSyncTarget = null;\n    this.syncingClients = [];\n    this.forwardToSyncingClients = (opts.forwardToSyncingClients === false) ? false : true;\n    this.debug = opts.debug ? true : false;\n  }\n  setUserId (userId) {\n    this.userId = userId;\n    this.y.db.setUserId(userId);\n  }\n  onUserEvent (f) {\n    this.userEventListeners.push(f);\n  }\n  userLeft (user : string) {\n    delete this.connections[user];\n    if (user === this.currentSyncTarget){\n      this.currentSyncTarget = null;\n      this.findNextSyncTarget();\n    }\n    for (var f of this.userEventListeners){\n      f({\n        action: \"userLeft\",\n        user: user\n      });\n    }\n  }\n  userJoined (user, role) {\n    if(role == null){\n      throw new Error(\"You must specify the role of the joined user!\");\n    }\n    if (this.connections[user] != null) {\n      throw new Error(\"This user already joined!\");\n    }\n    this.connections[user] = {\n      isSynced: false,\n      role: role\n    };\n    for (var f of this.userEventListeners) {\n      f({\n        action: \"userJoined\",\n        user: user,\n        role: role\n      });\n    }\n    if (this.currentSyncTarget == null) {\n      this.findNextSyncTarget();\n    }\n  }\n  // Execute a function _when_ we are connected.\n  // If not connected, wait until connected\n  whenSynced (f) {\n    if (this.isSynced === true) {\n      f();\n    } else {\n      this.whenSyncedListeners.push(f);\n    }\n  }\n  // returns false, if there is no sync target\n  // true otherwise\n  findNextSyncTarget () {\n    if (this.currentSyncTarget != null && this.connections[this.currentSyncTarget].isSynced === false) {\n      throw new Error(\"The current sync has not finished!\");\n    }\n\n    var syncUser = null;\n    for (var uid in this.connections) {\n      syncUser = this.connections[uid];\n      if (!syncUser.isSynced) {\n        break;\n      }\n    }\n    if (syncUser != null){\n      var conn = this;\n      this.y.db.requestTransaction(function*(){\n        conn.currentSyncTarget = uid;\n        conn.send(uid, {\n          type: \"sync step 1\",\n          stateVector: yield* this.getStateVector()\n        });\n      });\n    }\n    // set the state to synced!\n    if (!this.isSynced) {\n      this.isSynced = true;\n      for (var f of this.whenSyncedListeners) {\n        f();\n      }\n      this.whenSyncedListeners = null;\n    }\n    return false;\n  }\n  // You received a raw message, and you know that it is intended for to Yjs. Then call this function.\n  receiveMessage (sender, m){\n    if (this.debug) {\n      console.log(`${sender} -> ${this.userId}: ${JSON.stringify(m)}`); //eslint-disable-line\n    }\n    if (m.type === \"sync step 1\") {\n      // TODO: make transaction, stream the ops\n      let conn = this;\n      this.y.db.requestTransaction(function*(){\n        var ops = yield* this.getOperations(m.stateVector);\n        var sv = yield* this.getStateVector();\n        conn.send(sender, {\n          type: \"sync step 2\",\n          os: ops,\n          stateVector: sv\n        });\n        if (this.forwardToSyncingClients) {\n          conn.syncingClients.push(sender);\n          setTimeout(function(){\n            conn.syncingClients = conn.syncingClients.filter(function(cli){\n              return cli !== sender;\n            });\n            conn.send(sender, {\n              type: \"sync done\"\n            });\n          }, conn.syncingClientDuration);\n        }\n      });\n    } else if (m.type === \"sync step 2\") {\n      this.y.db.apply(m.os);\n      let conn = this;\n      this.y.db.requestTransaction(function*(){\n        var ops = yield* this.getOperations(m.stateVector);\n        if (ops.length > 0) {\n          conn.broadcast({\n            type: \"update\",\n            ops: ops\n          });\n        }\n      });\n    } else if (m.type === \"sync done\") {\n      this.connections[sender].isSynced = true;\n      this.findNextSyncTarget();\n    } else if (m.type === \"update\") {\n      if (this.forwardToSyncingClients) {\n        for (var client of this.syncingClients) {\n          this.send(client, m);\n        }\n      }\n      this.y.db.apply(m.ops);\n    }\n  }\n  // Currently, the HB encodes operations as JSON. For the moment I want to keep it\n  // that way. Maybe we support encoding in the HB as XML in the future, but for now I don't want\n  // too much overhead. Y is very likely to get changed a lot in the future\n  //\n  // Because we don't want to encode JSON as string (with character escaping, wich makes it pretty much unreadable)\n  // we encode the JSON as XML.\n  //\n  // When the HB support encoding as XML, the format should look pretty much like this.\n  //\n  // does not support primitive values as array elements\n  // expects an ltx (less than xml) object\n  parseMessageFromXml (m) {\n    function parseArray (node) {\n      for (var n of node.children){\n        if (n.getAttribute(\"isArray\") === \"true\") {\n          return parseArray(n);\n        } else {\n          return parseObject(n);\n        }\n      }\n    }\n    function parseObject (node) {\n      var json = {};\n      for (var attrName in node.attrs) {\n        var value = node.attrs[attrName];\n        var int = parseInt(value);\n        if (isNaN(int) || (\"\" + int) !== value){\n          json[attrName] = value;\n        } else {\n          json[attrName] = int;\n        }\n      }\n      for (var n in node.children){\n        var name = n.name;\n        if (n.getAttribute(\"isArray\") === \"true\") {\n          json[name] = parseArray(n);\n        } else {\n          json[name] = parseObject(n);\n        }\n      }\n      return json;\n    }\n    parseObject(m);\n  }\n  // encode message in xml\n  // we use string because Strophe only accepts an \"xml-string\"..\n  // So {a:4,b:{c:5}} will look like\n  // <y a=\"4\">\n  //   <b c=\"5\"></b>\n  // </y>\n  // m - ltx element\n  // json - Object\n  encodeMessageToXml (msg, obj) {\n    // attributes is optional\n    function encodeObject (m, json) {\n      for (var name in json) {\n        var value = json[name];\n        if (name == null) {\n          // nop\n        } else if (value.constructor === Object) {\n          encodeObject(m.c(name), value);\n        } else if (value.constructor === Array) {\n          encodeArray(m.c(name), value);\n        } else {\n          m.setAttribute(name, value);\n        }\n      }\n    }\n    function encodeArray (m, array) {\n      m.setAttribute(\"isArray\", \"true\");\n      for (var e of array) {\n        if (e.constructor === Object) {\n          encodeObject(m.c(\"array-element\"), e);\n        } else {\n          encodeArray(m.c(\"array-element\"), e);\n        }\n      }\n    }\n    if (obj.constructor === Object) {\n      encodeObject(msg.c(\"y\", { xmlns: \"http://y.ninja/connector-stanza\" }), obj);\n    } else if (obj.constructor === Array) {\n      encodeArray(msg.c(\"y\", { xmlns: \"http://y.ninja/connector-stanza\" }), obj);\n    } else {\n      throw new Error(\"I can't encode this json!\");\n    }\n  }\n}\n","/* @flow */\nclass AbstractTransaction { //eslint-disable-line no-unused-vars\n  constructor (store : OperationStore) {\n    this.store = store;\n  }\n  // returns false if operation is not expected.\n  *addOperation (op) {\n    var state = yield* this.getState(op.id[0]);\n    if (op.id[1] === state.clock){\n      state.clock++;\n      yield* this.setState(state);\n      yield* this.setOperation(op);\n      this.store.operationAdded(op);\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\nY.AbstractTransaction = AbstractTransaction;\n\ntype Listener = {\n  f : GeneratorFunction, // is called when all operations are available\n  missing : number // number of operations that are missing\n}\n\ntype Id = [string, number];\n\nclass AbstractOperationStore { //eslint-disable-line no-unused-vars\n  constructor (y) {\n    this.y = y;\n    this.parentListeners = {};\n    this.parentListenersRequestPending = false;\n    this.parentListenersActivated = {};\n    // E.g. this.listenersById[id] : Array<Listener>\n    this.listenersById = {};\n    // Execute the next time a transaction is requested\n    this.listenersByIdExecuteNow = [];\n    // A transaction is requested\n    this.listenersByIdRequestPending = false;\n    /* To make things more clear, the following naming conventions:\n       * ls : we put this.listenersById on ls\n       * l : Array<Listener>\n       * id : Id (can't use as property name)\n       * sid : String (converted from id via JSON.stringify\n                       so we can use it as a property name)\n\n      Always remember to first overwrite over\n      a property before you iterate over it!\n    */\n  }\n  setUserId (userId) {\n    this.userId = userId;\n  }\n  apply (ops) {\n    for (var key in ops) {\n      var o = ops[key];\n      var required = Y.Struct[o.struct].requiredOps(o);\n      this.whenOperationsExist(required, Y.Struct[o.struct].execute, o);\n    }\n  }\n  // f is called as soon as every operation requested is available.\n  // Note that Transaction can (and should) buffer requests.\n  whenOperationsExist (ids : Array<Id>, f : GeneratorFunction, args : Array<any>) {\n    if (ids.length > 0) {\n      let listener : Listener = {\n        f: f,\n        args: args || [],\n        missing: ids.length\n      };\n\n      for (let key in ids) {\n        let id = ids[key];\n        let sid = JSON.stringify(id);\n        let l = this.listenersById[sid];\n        if (l == null){\n          l = [];\n          this.listenersById[sid] = l;\n        }\n        l.push(listener);\n      }\n    } else {\n      this.listenersByIdExecuteNow.push({\n        f: f,\n        args: args || []\n      });\n    }\n\n    if (this.listenersByIdRequestPending){\n      return;\n    }\n\n    this.listenersByIdRequestPending = true;\n    var store = this;\n\n    this.requestTransaction(function*(){\n      var exeNow = store.listenersByIdExecuteNow;\n      store.listenersByIdExecuteNow = [];\n\n      var ls = store.listenersById;\n      store.listenersById = {};\n\n      store.listenersByIdRequestPending = false;\n\n      for (let key in exeNow) {\n        let listener = exeNow[key];\n        yield* listener.f.call(this, listener.args);\n      }\n\n      for (var sid in ls){\n        var l = ls[sid];\n        var id = JSON.parse(sid);\n        if ((yield* this.getOperation(id)) == null){\n          store.listenersById[sid] = l;\n        } else {\n          for (let key in l) {\n            let listener = l[key];\n            if (--listener.missing === 0){\n              yield* listener.f.call(this, listener.args);\n            }\n          }\n        }\n      }\n    });\n  }\n  // called by a transaction when an operation is added\n  operationAdded (op) {\n    // notify whenOperation listeners (by id)\n    var l = this.listenersById[JSON.stringify(op.id)];\n    if (l != null) {\n      for (var key in l){\n        var listener = l[key];\n        if (--listener.missing === 0){\n          this.whenOperationsExist([], listener.f, listener.args);\n        }\n      }\n    }\n    // notify parent listeners, if possible\n    var listeners = this.parentListeners[op.parent];\n    if ( this.parentListenersRequestPending\n        || ( listeners == null )\n        || ( listeners.length === 0 )) {\n      return;\n    }\n    var al = this.parentListenersActivated[JSON.stringify(op.parent)];\n    if ( al == null ){\n      al = [];\n      this.parentListenersActivated[JSON.stringify(op.parent)] = al;\n    }\n    al.push(op);\n\n    this.parentListenersRequestPending = true;\n    var store = this;\n    this.requestTransaction(function*(){\n      store.parentListenersRequestPending = false;\n      var activatedOperations = store.parentListenersActivated;\n      store.parentListenersActivated = {};\n      for (var parentId in activatedOperations){\n        var parent = yield* this.getOperation(parentId);\n        Struct[parent.struct].notifyObservers(activatedOperations[parentId]);\n      }\n    });\n\n  }\n  removeParentListener (id, f) {\n    var ls = this.parentListeners[id];\n    if (ls != null) {\n      this.parentListeners[id] = ls.filter(function(g){\n        return (f !== g);\n      });\n    }\n  }\n  addParentListener (id, f) {\n    var ls = this.parentListeners[JSON.stringify(id)];\n    if (ls == null) {\n      ls = [];\n      this.parentListeners[JSON.stringify(id)] = ls;\n    }\n    ls.push(f);\n  }\n}\nY.AbstractOperationStore = AbstractOperationStore;\n","\nclass WebRTC extends AbstractConnector {\n  constructor (options) {\n    if(options === undefined){\n      throw new Error(\"Options must not be undefined!\");\n    }\n    super({\n      role: \"slave\"\n    });\n\n    var room = options.room;\n\n    // connect per default to our server\n    if(options.url == null){\n      options.url = \"https://yatta.ninja:8888\";\n    }\n\n    var swr = new SimpleWebRTC(options); //eslint-disable-line no-undef\n    this.swr = swr;\n    var self = this;\n\n    swr.once(\"connectionReady\", function(userId){\n      // SimpleWebRTC (swr) is initialized\n      swr.joinRoom(room);\n\n      swr.once(\"joinedRoom\", function(){\n        self.setUserId(userId);\n        var i;\n        // notify the connector class about all the users that already\n        // joined the session\n        for(i in self.swr.webrtc.peers){\n          self.userJoined(self.swr.webrtc.peers[i].id, \"master\");\n        }\n        swr.on(\"channelMessage\", function(peer, room_, message){\n          // The client received a message\n          // Check if the connector is already initialized,\n          // only then forward the message to the connector class\n          if(message.type != null ){\n            self.receiveMessage(peer.id, message.payload);\n          }\n        });\n      });\n\n      swr.on(\"createdPeer\", function(peer){\n        // a new peer/client joined the session.\n        // Notify the connector class, if the connector\n        // is already initialized\n        self.userJoined(peer.id, \"master\");\n      });\n\n      swr.on(\"peerStreamRemoved\", function(peer){\n        // a client left the session.\n        // Notify the connector class, if the connector\n        // is already initialized\n        self.userLeft(peer.id);\n      });\n    });\n  }\n  send (uid, message) {\n    var self = this;\n    // we have to make sure that the message is sent under all circumstances\n    var send = function(){\n      // check if the clients still exists\n      var peer = self.swr.webrtc.getPeers(uid)[0];\n      var success;\n      if(peer){\n        // success is true, if the message is successfully sent\n        success = peer.sendDirectly(\"simplewebrtc\", \"yjs\", message);\n      }\n      if(!success){\n        // resend the message if it didn't work\n        setTimeout(send, 500);\n      }\n    };\n    // try to send the message\n    send();\n  }\n  broadcast (message) {\n    this.swr.sendDirectlyToAll(\"simplewebrtc\", \"yjs\", message);\n  }\n}\n\nY.WebRTC = WebRTC;\n","\ntype State = {\n  user: string,\n  clock: number\n};\n\ntype StateVector = Array<State>;\n\ntype StateSet = Object;\n\ntype IDBTransaction = Function;\ntype IDBObjectStore = Function;\ntype IDBRequest = Function;\ntype IDBCursor = Function;\ntype IDBKeyRange = Function;\n\ntype IDBOpenDBRequest = Function;\n\ndeclare var indexedDB : Object;\n\nY.IndexedDB = (function(){ //eslint-disable-line no-unused-vars\n  class Transaction extends AbstractTransaction { //eslint-disable-line\n    transaction: IDBTransaction;\n    sv: IDBObjectStore;\n    os: IDBObjectStore;\n    store: OperationStore;\n\n    constructor (store : OperationStore) {\n      super(store);\n      this.transaction = store.db.transaction([\"OperationStore\", \"StateVector\"], \"readwrite\");\n      this.sv = this.transaction.objectStore(\"StateVector\");\n      this.os = this.transaction.objectStore(\"OperationStore\");\n      this.buffer = {};\n    }\n    *setOperation (op) {\n      yield this.os.put(op);\n      this.buffer[JSON.stringify(op.id)] = op;\n      return op;\n    }\n    *getOperation (id) {\n      var op = this.buffer[JSON.stringify(id)];\n      if (op == null) {\n        op = yield this.os.get(id);\n        this.buffer[JSON.stringify(id)] = op;\n      }\n      return op;\n    }\n    *removeOperation (id) {\n      this.buffer[JSON.stringify(id)] = null;\n      return yield this.os.delete(id);\n    }\n    *setState (state : State) : State {\n      return yield this.sv.put(state);\n    }\n    *getState (user : string) : State {\n      var state;\n      if ((state = yield this.sv.get(user)) != null){\n        return state;\n      } else {\n        return {\n          user: user,\n          clock: 0\n        };\n      }\n    }\n    *getStateVector () : StateVector {\n      var stateVector = [];\n      var cursorResult = this.sv.openCursor();\n      var cursor;\n      while ((cursor = yield cursorResult) != null) {\n        stateVector.push(cursor.value);\n        cursor.continue();\n      }\n      return stateVector;\n    }\n    *getStateSet () : StateSet {\n      var sv : StateVector = yield* this.getStateVector();\n      var ss : StateSet = {};\n      for (var state of sv){\n        ss[state.user] = state.clock;\n      }\n      return ss;\n    }\n\n    *getOperations (startSS : StateSet) {\n      if (startSS == null){\n        startSS = {};\n      }\n      var ops = [];\n\n      var endSV : StateVector = yield* this.getStateVector();\n      for (var endState of endSV) {\n        var user = endState.user;\n        var startPos = startSS[user] || 0;\n        var endPos = endState.clock;\n        var range = IDBKeyRange.bound([user, startPos], [user, endPos]);\n        var cursorResult = this.os.openCursor(range);\n        var cursor;\n        while ((cursor = yield cursorResult) != null) {\n          ops.push(cursor.value);\n          cursor.continue();\n        }\n      }\n      return ops;\n    }\n  }\n  class OperationStore extends AbstractOperationStore { //eslint-disable-line no-undef\n    namespace: string;\n    ready: Promise;\n    whenReadyListeners: Array<Function>;\n    constructor (y, opts) {\n      super(y);\n      if (opts == null) {\n        opts = {};\n      }\n      if (opts.namespace == null || typeof opts.namespace !== \"string\") {\n        throw new Error(\"IndexedDB: expect a string (opts.namespace)!\");\n      } else {\n        this.namespace = opts.namespace;\n      }\n      if (opts.idbVersion != null) {\n        this.idbVersion = opts.idbVersion;\n      } else {\n        this.idbVersion = 5;\n      }\n\n      this.transactionQueue = {\n        queue: [],\n        onRequest: null\n      };\n\n      var store = this;\n\n      var tGen = (function *transactionGen(){\n        store.db = yield indexedDB.open(opts.namespace, store.idbVersion);\n        var transactionQueue = store.transactionQueue;\n\n        var transaction = null;\n        var cont = true;\n        while (cont) {\n          var request = yield transactionQueue;\n          transaction = new Transaction(store);\n\n          yield* request.call(transaction, request);/*\n          while (transactionQueue.queue.length > 0) {\n            yield* transactionQueue.queue.shift().call(transaction);\n          }*/\n        }\n      })();\n\n      function handleTransactions(t){ //eslint-disable-line no-unused-vars\n        var request = t.value;\n        if (t.done){\n          return;\n        } else if (request.constructor === IDBRequest\n                   || request.constructor === IDBCursor ) {\n          request.onsuccess = function(){\n            handleTransactions(tGen.next(request.result));\n          };\n          request.onerror = function(err){\n            tGen.throw(err);\n          };\n        } else if (request === store.transactionQueue) {\n          if (request.queue.length > 0){\n            handleTransactions(tGen.next(request.queue.shift()));\n          } else {\n            request.onRequest = function(){\n              request.onRequest = null;\n              handleTransactions(tGen.next(request.queue.shift()));\n            };\n          }\n        } else if ( request.constructor === IDBOpenDBRequest ) {\n          request.onsuccess = function(event){\n            var db = event.target.result;\n            handleTransactions(tGen.next(db));\n          };\n          request.onerror = function(){\n            tGen.throw(\"Couldn't open IndexedDB database!\");\n          };\n          request.onupgradeneeded = function(event){\n            var db = event.target.result;\n            try {\n              db.createObjectStore(\"OperationStore\", {keyPath: \"id\"});\n              db.createObjectStore(\"StateVector\", {keyPath: \"user\"});\n            } catch (e) {\n                // console.log(\"Store already exists!\");\n            }\n          };\n        } else {\n          tGen.throw(\"You can not yield this type!\");\n        }\n      }\n      handleTransactions(tGen.next());\n\n    }\n    requestTransaction (makeGen : Function) {\n      this.transactionQueue.queue.push(makeGen);\n      if (this.transactionQueue.onRequest != null) {\n        this.transactionQueue.onRequest();\n      }\n    }\n    *removeDatabase () {\n      this.db.close();\n      yield indexedDB.deleteDatabase(this.namespace);\n    }\n  }\n  return OperationStore;\n})();\n","\n\n(function(){\n\n  class List {\n    constructor (_model) {\n      this._model = _model;\n    }\n    *val (pos) {\n      if (pos != null) {\n        var o = yield* this.Struct.List.ref(this._model, pos);\n        return o ? o.content : null;\n      } else {\n        return yield* this.Struct.List.map(this._model, function(c){return c; });\n      }\n    }\n    *insert (pos, contents) {\n      yield* this.Struct.List.insert(pos, contents);\n    }\n  }\n\n  Y.List = function* YList(){\n    var model = yield* this.Struct.List.create();\n    return new List(model);\n  };\n  Y.List.Create = List;\n})();\n","\n(function(){\n  class Map {\n    constructor (_model) {\n      this._model = _model;\n    }\n    *val () {\n      var transaction = yield \"transaction\";\n      var model = yield* transaction.getOperation(this._model);\n      if (arguments.length === 0) {\n        throw new Error(\"Implement this case!\");\n      } else if (arguments.length === 1) {\n        return yield* Y.Struct.Map.get.call(transaction, model, arguments[0]);\n      } else {\n        return yield* Y.Struct.Map.set.call(transaction, model, arguments[0], arguments[1]);\n      }\n    }\n  }\n\n  Y.Map = function* YMap(){\n    if (this instanceof Y.AbstractOperationStore) {\n      var model = yield* Y.Struct.map.create.call(this);\n      return new Map(model);\n    } else {\n      throw new Error(\"Don't use `new` to create this type!\");\n    }\n  };\n  Y.Map.Create = Map;\n})();\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["y.js","runtime.js","IndexedDB.js","OperationStore.js","Operations.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","__proto__","global","wrap","innerFn","outerFn","self","tryLocsList","generator","Generator","_invoke","makeInvokeMethod","Context","tryCatch","fn","obj","arg","type","call","err","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","forEach","method","this","AwaitArgument","AsyncIterator","invoke","result","Promise","resolve","then","invokeNext","invokeThrow","unwrapped","enqueue","enqueueResult","previousPromise","invokeReturn","process","domain","bind","context","state","GenStateSuspendedStart","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","iterator","undefined","returnMethod","record","info","done","GenStateSuspendedYield","resultName","next","nextLoc","sent","dispatchException","abrupt","ContinueSentinel","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","values","iterable","iteratorMethod","iteratorSymbol","isNaN","length","i","hasOwn","hasOwnProperty","Symbol","inModule","module","runtime","regeneratorRuntime","exports","Gp","displayName","isGeneratorFunction","genFun","ctor","name","mark","awrap","async","iter","toString","keys","object","key","reverse","pop","prev","tempName","tempIndex","stop","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","window","IndexedDB","Transaction","_AbstractTransaction","store","transaction","db","sv","objectStore","os","buffer","setOperation","op","context$3$0","put","JSON","stringify","uid","getOperation","id","get","removeOperation","setState","getState","user","t0","clock","getStateVector","stateVector","cursorResult","cursor","openCursor","getStateSet","ss","_iterator","_isArray","_i","_ref","Array","isArray","getOperations","startSS","ops","endSV","_iterator2","_isArray2","_i2","_ref2","endState","startPos","endPos","range","IDBKeyRange","bound","t1","AbstractTransaction","OperationStore","_AbstractOperationStore","namespace","_this","whenReadyListeners","ready","req","indexedDB","open","onerror","onsuccess","event","target","f","setTimeout","onupgradeneeded","createObjectStore","keyPath","whenReady","requestTransaction","makeGen","_this2","res","request","IDBRequest","IDBCursor","IDBOpenDBRequest","gen","apply","removeDatabase","close","deleteDatabase","AbstractOperationStore","addOperation","context$2$0","operationAdded","listenersById","listenersByIdExecuteNow","listenersByIdRequestPending","whenOperationsExist","ids","args","listener","missing","_iterator3","_isArray3","_i3","_ref3","sid","l","callee$2$0","exe","_iterator4","_isArray4","_i4","_ref4","ls","_iterator5","_isArray5","_i5","_ref5","t2","parse","t3","_iterator6","_isArray6","_i6","_ref6","Struct","Operation","context$1$0","Insert","left","right","origin","requiredOps","execute"],"mappings":"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","file":"y.js","sourcesContent":[null,"/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var iteratorSymbol =\n    typeof Symbol === \"function\" && Symbol.iterator || \"@@iterator\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided, then outerFn.prototype instanceof Generator.\n    var generator = Object.create((outerFn || Generator).prototype);\n\n    generator._invoke = makeInvokeMethod(\n      innerFn, self || null,\n      new Context(tryLocsList || [])\n    );\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    genFun.__proto__ = GeneratorFunctionPrototype;\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `value instanceof AwaitArgument` to determine if the yielded value is\n  // meant to be awaited. Some may consider the name of this method too\n  // cutesy, but they are curmudgeons.\n  runtime.awrap = function(arg) {\n    return new AwaitArgument(arg);\n  };\n\n  function AwaitArgument(arg) {\n    this.arg = arg;\n  }\n\n  function AsyncIterator(generator) {\n    // This invoke function is written in a style that assumes some\n    // calling function (or Promise) will handle exceptions.\n    function invoke(method, arg) {\n      var result = generator[method](arg);\n      var value = result.value;\n      return value instanceof AwaitArgument\n        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)\n        : Promise.resolve(value).then(function(unwrapped) {\n            result.value = unwrapped;\n            return result;\n          }, invokeThrow);\n    }\n\n    if (typeof process === \"object\" && process.domain) {\n      invoke = process.domain.bind(invoke);\n    }\n\n    var invokeNext = invoke.bind(generator, \"next\");\n    var invokeThrow = invoke.bind(generator, \"throw\");\n    var invokeReturn = invoke.bind(generator, \"return\");\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      var enqueueResult =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(function() {\n          return invoke(method, arg);\n        }) : new Promise(function(resolve) {\n          resolve(invoke(method, arg));\n        });\n\n      // Avoid propagating enqueueResult failures to Promises returned by\n      // later invocations of the iterator, and call generator.return() to\n      // allow the generator a chance to clean up.\n      previousPromise = enqueueResult[\"catch\"](invokeReturn);\n\n      return enqueueResult;\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          if (method === \"return\" ||\n              (method === \"throw\" && delegate.iterator[method] === undefined)) {\n            // A return or throw (when the delegate iterator has no throw\n            // method) always terminates the yield* loop.\n            context.delegate = null;\n\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            var returnMethod = delegate.iterator[\"return\"];\n            if (returnMethod) {\n              var record = tryCatch(returnMethod, delegate.iterator, arg);\n              if (record.type === \"throw\") {\n                // If the return method threw an exception, let that\n                // exception prevail over the original return or throw.\n                method = \"throw\";\n                arg = record.arg;\n                continue;\n              }\n            }\n\n            if (method === \"return\") {\n              // Continue with the outer return, now that the delegate\n              // iterator has been terminated.\n              continue;\n            }\n          }\n\n          var record = tryCatch(\n            delegate.iterator[method],\n            delegate.iterator,\n            arg\n          );\n\n          if (record.type === \"throw\") {\n            context.delegate = null;\n\n            // Like returning generator.throw(uncaught), but without the\n            // overhead of an extra function call.\n            method = \"throw\";\n            arg = record.arg;\n            continue;\n          }\n\n          // Delegate generator ran and handled its own exceptions so\n          // regardless of what the method was, we continue as if it is\n          // \"next\" with an undefined arg.\n          method = \"next\";\n          arg = undefined;\n\n          var info = record.arg;\n          if (info.done) {\n            context[delegate.resultName] = info.value;\n            context.next = delegate.nextLoc;\n          } else {\n            state = GenStateSuspendedYield;\n            return info;\n          }\n\n          context.delegate = null;\n        }\n\n        if (method === \"next\") {\n          if (state === GenStateSuspendedYield) {\n            context.sent = arg;\n          } else {\n            delete context.sent;\n          }\n\n        } else if (method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw arg;\n          }\n\n          if (context.dispatchException(arg)) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            method = \"next\";\n            arg = undefined;\n          }\n\n        } else if (method === \"return\") {\n          context.abrupt(\"return\", arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          var info = {\n            value: record.arg,\n            done: context.done\n          };\n\n          if (record.arg === ContinueSentinel) {\n            if (context.delegate && method === \"next\") {\n              // Deliberately forget the last sent value so that we don't\n              // accidentally pass it on to the delegate.\n              arg = undefined;\n            }\n          } else {\n            return info;\n          }\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(arg) call above.\n          method = \"throw\";\n          arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset();\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function() {\n      this.prev = 0;\n      this.next = 0;\n      this.sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      // Pre-initialize at least 20 temporary variables to enable hidden\n      // class optimizations for simple generators.\n      for (var tempIndex = 0, tempName;\n           hasOwn.call(this, tempName = \"t\" + tempIndex) || tempIndex < 20;\n           ++tempIndex) {\n        this[tempName] = null;\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.next = finallyEntry.finallyLoc;\n      } else {\n        this.complete(record);\n      }\n\n      return ContinueSentinel;\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = record.arg;\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n","\ntype State = {\n  user: string,\n  clock: number\n};\n\ntype StateVector = Array<State>;\n\ntype StateSet = Object;\n\ntype IDBTransaction = Function;\ntype IDBObjectStore = Function;\ntype IDBRequest = Function;\ntype IDBCursor = Function;\ntype IDBKeyRange = Function;\n\ntype IDBOpenDBRequest = Function;\n\ndeclare var indexedDB : Object;\n\ndeclare var setTimeout : Function;\n\nvar IndexedDB = (function(){ //eslint-disable-line no-unused-vars\n  class Transaction extends AbstractTransaction { //eslint-disable-line\n    transaction: IDBTransaction;\n    sv: IDBObjectStore;\n    os: IDBObjectStore;\n    store: OperationStore;\n\n    constructor (store : OperationStore) {\n      super(store);\n      this.transaction = store.db.transaction([\"OperationStore\", \"StateVector\"], \"readwrite\");\n      this.sv = this.transaction.objectStore(\"StateVector\");\n      this.os = this.transaction.objectStore(\"OperationStore\");\n      this.buffer = {};\n    }\n    *setOperation (op) {\n      yield this.os.put(op);\n      this.buffer[JSON.stringify(op.uid)] = op;\n      return op;\n    }\n    *getOperation (id) {\n      var op = this.buffer[JSON.stringify(id)];\n      if (op == null) {\n        op = yield this.os.get(id);\n        this.buffer[JSON.stringify(id)] = op;\n      }\n      return op;\n    }\n    *removeOperation (id) {\n      return yield this.os.delete(id);\n    }\n    *setState (state : State) : State {\n      return yield this.sv.put(state);\n    }\n    *getState (user : string) : State {\n      var state;\n      if ((state = yield this.sv.get(user)) != null){\n        return state;\n      } else {\n        return {\n          user: user,\n          clock: 0\n        };\n      }\n    }\n    *getStateVector () : StateVector {\n      var stateVector = [];\n      var cursorResult = this.sv.openCursor();\n      var cursor;\n      while ((cursor = yield cursorResult) != null) {\n        stateVector.push(cursor.value);\n        cursor.continue();\n      }\n      return stateVector;\n    }\n    *getStateSet () : StateSet {\n      var sv : StateVector = yield* this.getStateVector();\n      var ss : StateSet = {};\n      for (var state of sv){\n        ss[state.user] = state.clock;\n      }\n      return ss;\n    }\n\n    *getOperations (startSS : StateSet) {\n      if (startSS == null){\n        startSS = {};\n      }\n      var ops = [];\n\n      var endSV : StateVector = yield* this.getStateVector();\n      for (var endState of endSV) {\n        var user = endState.user;\n        var startPos = startSS[user] || 0;\n        var endPos = endState.clock;\n        var range = IDBKeyRange.bound([user, startPos], [user, endPos]);\n        var cursorResult = this.os.openCursor(range);\n        var cursor;\n        while ((cursor = yield cursorResult) != null) {\n          ops.push(cursor.value);\n          cursor.continue();\n        }\n      }\n      return ops;\n    }\n  }\n  class OperationStore extends AbstractOperationStore { //eslint-disable-line no-undef\n    namespace: string;\n    ready: Promise;\n    whenReadyListeners: Array<Function>;\n    constructor (namespace : string) {\n      super();\n      this.whenReadyListeners = [];\n      this.namespace = namespace;\n      this.ready = false;\n\n      var req = indexedDB.open(namespace, 2); //eslint-disable-line no-undef\n      req.onerror = function(){\n        throw new Error(\"Couldn't open the IndexedDB database!\");\n      };\n      req.onsuccess = (event)=>{\n        this.db = event.target.result;\n        this.whenReadyListeners.forEach(function(f){\n          setTimeout(f, 0);\n        });\n        this.whenReadyListeners = null;\n        this.ready = true;\n      };\n      req.onupgradeneeded = function(event){\n        var db = event.target.result;\n        db.createObjectStore(\"OperationStore\", {keyPath: \"id\"});\n        db.createObjectStore(\"StateVector\", {keyPath: \"user\"});\n      };\n    }\n    whenReady (f : Function) {\n      if (this.ready){\n        setTimeout(f, 0);\n      } else {\n        this.whenReadyListeners.push(f);\n      }\n    }\n    requestTransaction (makeGen : Function) {\n      this.whenReady(()=>{\n        var transaction = new Transaction(this);\n        var gen = makeGen.apply(transaction);\n\n        function handle(res : any){\n          var request : any = res.value;\n          if (res.done){\n            return;\n          } else if (request.constructor === IDBRequest\n                     || request.constructor === IDBCursor\n                     || request.constructor === IDBOpenDBRequest) {\n            request.onsuccess = function(){\n              handle(gen.next(request.result));\n            };\n            request.onerror = function(err){\n              gen.throw(err);\n            };\n          } else {\n            gen.throw(\"You can not yield this type!\");\n          }\n        }\n        handle(gen.next());\n      });\n    }\n    *removeDatabase () {\n      this.db.close();\n      yield indexedDB.deleteDatabase(this.namespace);\n    }\n  }\n  return OperationStore;\n})();\n","/* @flow */\nclass AbstractTransaction { //eslint-disable-line no-unused-vars\n  constructor (store : OperationStore) {\n    this.store = store;\n  }\n  // Throws if operation is not expected.\n  *addOperation (op) {\n    var state = this.getState(op.id[0]);\n    if (op.id[1] === state.clock){\n      state.clock++;\n      yield* this.setState(state);\n      this.store.operationAdded(op);\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\ntype Listener = {\n  f : GeneratorFunction, // is called when all operations are available\n  missing : number // number of operations that are missing\n}\n\ntype GeneratorFunction = Function;\n\ntype Id = [string, number];\n\nclass AbstractOperationStore { //eslint-disable-line no-unused-vars\n  constructor () {\n    // E.g. this.listenersById[id] : Array<Listener>\n    this.listenersById = {};\n    // Execute the next time a transaction is requested\n    this.listenersByIdExecuteNow = [];\n    // A transaction is requested\n    this.listenersByIdRequestPending = false;\n    /* To make things more clear, the following naming conventions:\n       * ls : we put this.listenersById on ls\n       * l : Array<Listener>\n       * id : Id (can't use as property name)\n       * sid : String (converted from id via JSON.stringify\n                       so we can use it as a property name)\n\n      Always remember to first overwrite over\n      a property before you iterate over it!\n    */\n  }\n  // f is called as soon as every operation requested is available.\n  // Note that Transaction can (and should) buffer requests.\n  whenOperationsExist (ids : Array<Id>, f : GeneratorFunction, args : Array<any>) {\n    if (ids.length > 0) {\n      let listener : Listener = {\n        f: f,\n        args: args || [],\n        missing: ids.length\n      };\n\n      for (let id of ids) {\n        let sid = JSON.stringify(id);\n        let l = this.listenersById[sid];\n        if (l == null){\n          l = [];\n          this.listenersById[sid] = l;\n        }\n        l.push(listener);\n      }\n    } else {\n      this.listenersByIdExecuteNow.push({\n        f: f,\n        args: args || []\n      });\n    }\n\n    if (this.listenersByIdRequestPending){\n      return;\n    }\n\n    this.listenersByIdRequestPending = true;\n    var store = this;\n\n    this.requestTransaction(function*(){\n      var exe = store.listenersByIdExecuteNow;\n      store.listenersByIdExecuteNow = [];\n      for (let listener of exe) {\n        yield* listener.f.apply(this, listener.args);\n      }\n\n      var ls = store.listenersById;\n      store.listenersById = {};\n      for (var sid in ls){\n        var l = ls[sid];\n        var id = JSON.parse(sid);\n        if ((yield* this.getOperation(id)) == null){\n          store.listenersById[sid] = l;\n        } else {\n          for (let listener of l) {\n            if (--listener.missing === 0){\n              yield* listener.f.apply(this, listener.args);\n            }\n          }\n        }\n      }\n\n      store.listenersByIdRequestPending = false;\n    });\n\n  }\n  // called by a transaction when an operation is added\n  operationAdded (op) {\n    var l = this.listenersById[op.id];\n    for (var listener of l){\n      if (--listener.missing === 0){\n        this.whenOperationsExist([], listener.f, listener.args);\n      }\n    }\n  }\n}\n","/* @flow */\n\n// Op is anything that we could get from the OperationStore.\ntype Op = Object;\n\nvar Struct = {\n  Operation: {  //eslint-disable-line no-unused-vars\n    create: function*(op : Op, user : string) : Struct.Operation {\n      var state = yield* this.getState(user);\n      op.id = [user, state.clock];\n      return yield* this.addOperation(op);\n    }\n  },\n  Insert: {\n    create: function*( op : Op,\n                      user : string,\n                      left : Struct.Insert,\n                      right : Struct.Insert) : Struct.Insert {\n      op.left = left ? left.id : null;\n      op.origin = op.left;\n      op.right = right ? right.id : null;\n      op.type = \"Insert\";\n      yield* Struct.Operation.create(op, user);\n\n      if (left != null) {\n        left.right = op.id;\n        yield* this.setOperation(left);\n      }\n      if (right != null) {\n        right.left = op.id;\n        yield* this.setOperation(right);\n      }\n      return op;\n    },\n    requiredOps: function(op, ids){\n      ids.push(op.left);\n      ids.push(op.right);\n      return ids;\n    },\n    execute: function*(op){\n      return op;\n    }\n  }\n};\n"],"sourceRoot":"/source/"}
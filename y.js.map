{"version":3,"sources":["y.js","Struct.js","Connectors/Test.js","runtime.js","Connector.js","OperationStore.js","Connectors/WebRTC.js","OperationStores/IndexedDB.js","OperationStores/Memory.js","Types/List.js","Types/Map.js"],"names":["_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","__proto__","_classCallCheck","instance","Constructor","compareIds","id1","id2","getRandom","o","Array","Math","floor","random","length","keys","key","push","flushOne","bufs","i","globalRoom","buffers","userId","m","shift","user","users","receiveMessage","global","wrap","innerFn","outerFn","self","tryLocsList","generator","Generator","_invoke","makeInvokeMethod","Context","tryCatch","fn","obj","arg","type","call","err","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","forEach","method","this","AwaitArgument","AsyncIterator","invoke","result","Promise","resolve","then","invokeNext","invokeThrow","unwrapped","enqueue","enqueueResult","previousPromise","invokeReturn","process","domain","bind","context","state","GenStateSuspendedStart","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","iterator","undefined","returnMethod","record","info","done","GenStateSuspendedYield","resultName","next","nextLoc","sent","dispatchException","abrupt","ContinueSentinel","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","values","iterable","iteratorMethod","iteratorSymbol","isNaN","hasOwn","hasOwnProperty","Symbol","inModule","module","runtime","regeneratorRuntime","exports","Gp","displayName","isGeneratorFunction","genFun","ctor","name","mark","awrap","async","iter","toString","object","reverse","pop","prev","tempName","tempIndex","stop","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","window","callee$0$0","context$1$0","Y","opts","db","connector","y","requestTransaction","callee$2$0","context$3$0","addOperation","id","struct","map","root","Map","Create","transact","destroy","disconnect","removeDatabase","AbstractConnector","role","connections","userEventListeners","whenSyncedListeners","currentSyncTarget","syncingClients","forwardToSyncingClients","debug","setUserId","onUserEvent","f","userLeft","findNextSyncTarget","_iterator","_isArray","isArray","_i","_ref","action","userJoined","isSynced","_iterator2","_isArray2","_i2","_ref2","whenSynced","syncUser","uid","conn","t0","t1","getStateVector","t3","t2","t4","stateVector","send","_iterator3","_isArray3","_i3","_ref3","sender","_this","console","log","JSON","stringify","callee$3$0","ops","sv","context$4$0","getOperations","os","setTimeout","filter","cli","syncingClientDuration","apply","broadcast","_iterator4","_isArray4","_i4","_ref4","client","parseMessageFromXml","parseArray","_x","_again","_function","node","_iterator5","_isArray5","_i5","_ref5","n","children","getAttribute","parseObject","json","attrName","attrs","int","parseInt","encodeMessageToXml","msg","encodeObject","c","encodeArray","setAttribute","array","_iterator6","_isArray6","_i6","_ref6","e","xmlns","AbstractTransaction","store","op","context$2$0","getState","clock","setState","setOperation","operationAdded","AbstractOperationStore","parentListeners","parentListenersRequestPending","parentListenersActivated","listenersById","listenersByIdExecuteNow","listenersByIdRequestPending","required","Struct","requiredOps","whenOperationsExist","execute","ids","args","listener","missing","_id","sid","l","exeNow","ls","parse","getOperation","t6","t5","t7","t8","listeners","parent","al","activatedOperations","parentId","notifyObservers","removeParentListener","g","addParentListener","Operation","Insert","start","end","left","right","origin","parentSub","getDistanceToOrigin","d","distanceToOrigin","tmp","p","t9","next_cl","t10","t11","t13","t16","List","ref","pos","res","operation","content","insert","contents","or","get","set","removeUser","addUser","uname","u","setInterval","userIdCounter","Test","_AbstractConnector","options","message","flushAll","WebRTC","_AbstractConnector2","room","url","swr","SimpleWebRTC","once","joinRoom","webrtc","peers","on","peer","room_","payload","success","getPeers","sendDirectly","sendDirectlyToAll","IndexedDB","Transaction","_AbstractTransaction","transaction","objectStore","buffer","put","removeOperation","cursorResult","cursor","openCursor","getStateSet","ss","_iterator7","_isArray7","_i7","_ref7","startSS","endSV","_iterator8","_isArray8","_i8","_ref8","endState","startPos","endPos","range","IDBKeyRange","bound","OperationStore","_AbstractOperationStore","handleTransactions","t","request","IDBRequest","IDBCursor","onsuccess","tGen","onerror","transactionQueue","queue","onRequest","IDBOpenDBRequest","event","target","onupgradeneeded","createObjectStore","keyPath","namespace","idbVersion","transactionGen","cont","indexedDB","open","makeGen","close","deleteDatabase","Memory","_AbstractTransaction2","_iterator9","_isArray9","_i9","_ref9","_AbstractOperationStore2","gen","_model","val","YList","model","args$3$0","arguments","YMap"],"mappings":"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","file":"y.js","sourcesContent":["/* @flow */\n\nconst GeneratorFunction = (function*(){}).constructor;\n\nclass Y { //eslint-disable-line no-unused-vars\n  constructor (opts) {\n    this.db = new Y[opts.db.name](this, opts.db);\n    this.connector = new Y[opts.connector.name](this, opts.connector);\n    var y = this;\n    this.db.requestTransaction(function*(){\n      yield* this.addOperation({\n        id: [\"_\", 0],\n        struct: \"Map\",\n        map: {}\n      });\n      y.root = new Y.Map.Create([\"_\", 0]);\n    });\n  }\n  transact (generator) {\n    if (generator.constructor !== GeneratorFunction) {\n      throw new Error(\"y.transact requires a Generator function! E.g. function*(){/*..*/}\");\n    }\n    this.db.requestTransaction(generator);\n  }\n  destroy () {\n    this.connector.disconnect();\n    this.db.removeDatabase();\n    this.connector = null;\n    this.db = null;\n    this.transact = function(){\n      throw new Error(\"Remember?, you destroyed this type ;)\");\n    };\n  }\n}\n","/* @flow */\n\n// Op is anything that we could get from the OperationStore.\ntype Op = Object;\ntype Id = [string, number];\n\ntype List = {\n  id: Id,\n  start: Insert,\n  end: Insert\n};\n\ntype Insert = {\n  id: Id,\n  left: Insert,\n  right: Insert,\n  origin: Insert,\n  parent: List,\n  content: any\n};\n\nfunction compareIds(id1, id2) {\n  if (id1 == null) {\n    if (id2 == null) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  if (id1[0] === id2[0] && id1[1] === id2[1]) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvar Struct = {\n  Operation: {  //eslint-disable-line no-unused-vars\n    create: function*(op : Op) : Struct.Operation {\n      var user = this.store.y.connector.userId;\n      var state = yield* this.getState(user);\n      op.id = [user, state.clock];\n      yield* this.addOperation(op);\n      this.store.y.connector.broadcast({\n        type: \"update\",\n        ops: [op]\n      });\n    }\n  },\n  Insert: {\n    /*{\n        content: any,\n        left: Id,\n        right: Id,\n        parent: Id,\n        parentSub: string (optional)\n      }\n    */\n    create: function*( op: Op ) : Insert {\n      if ( op.left === undefined\n        || op.right === undefined\n        || op.parent === undefined ) {\n          throw new Error(\"You must define left, right, and parent!\");\n        }\n      op.origin = op.left;\n      op.struct = \"Insert\";\n      yield* Struct.Operation.create.call(this, op);\n\n      if (op.left != null) {\n        op.left.right = op.id;\n        yield* this.setOperation(op.left);\n      }\n      if (op.right != null) {\n        op.right.left = op.id;\n        yield* this.setOperation(op.right);\n      }\n      var parent = yield* this.getOperation(op.parent);\n      if (op.parentSub != null){\n        if (compareIds(parent.map[op.parentSub], op.left)) {\n          parent.map[op.parentSub] = op.id;\n          yield* this.setOperation(parent);\n        }\n      } else {\n        var start = compareIds(parent.start, op.right);\n        var end = compareIds(parent.end, op.left);\n        if (start || end) {\n          if (start) {\n            parent.start = op.id;\n          }\n          if (end) {\n            parent.end = op.id;\n          }\n          yield* this.setOperation(parent);\n        }\n      }\n      return op;\n    },\n    requiredOps: function(op){\n      var ids = [];\n      if(op.left != null){\n        ids.push(op.left);\n      }\n      if(op.right != null){\n        ids.push(op.right);\n      }\n      if(op.right == null && op.left == null) {\n        ids.push(op.parent);\n      }\n      return ids;\n    },\n    getDistanceToOrigin: function *(op){\n      var d = 0;\n      var o = yield* this.getOperation(op.left);\n      while (op.origin !== (o ? o.id : null)) {\n        d++;\n        o = yield* this.getOperation(o.left);\n      }\n      return d;\n    },\n    /*\n    # $this has to find a unique position between origin and the next known character\n    # case 1: $origin equals $o.origin: the $creator parameter decides if left or right\n    #         let $OL= [o1,o2,o3,o4], whereby $this is to be inserted between o1 and o4\n    #         o2,o3 and o4 origin is 1 (the position of o2)\n    #         there is the case that $this.creator < o2.creator, but o3.creator < $this.creator\n    #         then o2 knows o3. Since on another client $OL could be [o1,o3,o4] the problem is complex\n    #         therefore $this would be always to the right of o3\n    # case 2: $origin < $o.origin\n    #         if current $this insert_position > $o origin: $this ins\n    #         else $insert_position will not change\n    #         (maybe we encounter case 1 later, then this will be to the right of $o)\n    # case 3: $origin > $o.origin\n    #         $this insert_position is to the left of $o (forever!)\n    */\n    execute: function*(op){\n      var distanceToOrigin = yield* Struct.Insert.getDistanceToOrigin.call(this, op); // most cases: 0 (starts from 0)\n      var i = distanceToOrigin; // loop counter\n      var o, tmp;\n      if (op.right == null && op.left == null) {\n       var p = yield* this.getOperation(op.parent);\n       if (op.parentSub != null) {\n         tmp = p.map[op.parentSub];\n         if (!compareIds(tmp, op.id)) {\n           op.right = tmp;\n         }\n         if (op.right == null) {\n           // this is the first ins in parent\n           p.map[op.parentSub] = op.id;\n           yield* this.setOperation(p);\n           yield* this.setOperation(op);\n           return;\n         }\n       } else {\n         tmp = p.start;\n         if (!compareIds(tmp, op.id)) {\n           op.left = tmp;\n         }\n         if (op.left == null) {\n           // this is the first ins in parent\n           p.start = op.id;\n           p.end = op.id;\n           yield* this.setOperation(p);\n           yield* this.setOperation(op);\n           return;\n         }\n       }\n      }\n\n      if (op.left != null) {\n        o = yield* this.getOperation(op.left);\n        o = yield* this.getOperation(o.right);\n      } else if (op.right != null) {\n        o = yield* this.getOperation(op.right);\n        while (o.left != null){\n          o = yield* this.getOperation(o.left);\n        }\n      }\n      while (true) {\n        if (o.id !== op.right){\n          if (Struct.Insert.getDistanceToOrigin(o) === i) {\n            // case 1\n            if (o.id[0] < op.id[0]) {\n              op.left = o;\n              distanceToOrigin = i + 1;\n            }\n          } else if ((tmp = Struct.Insert.getDistanceToOrigin(o)) < i) {\n            // case 2\n            if (i - distanceToOrigin <= tmp) {\n              op.left = o;\n              distanceToOrigin = i + 1;\n            }\n          } else {\n            break;\n          }\n          i++;\n          o = yield* this.getOperation(o.next_cl);\n        } else {\n          break;\n        }\n      }\n\n      // reconnect..\n      var left = null;\n      var right = null;\n      if (op.left != null) {\n        left = yield* this.getOperation(op.left);\n        left.right = op.id;\n        yield* this.setOperation(left);\n      }\n      if (op.right != null) {\n        right = yield* this.getOperation(op.right);\n        right.left = op.id;\n        yield* this.setOperation(right);\n      }\n      yield* this.setOperation(op);\n\n      // notify parent\n      var parent = yield* this.getOperation(op.parent);\n      if (op.parentSub != null) {\n        if (right == null) {\n          parent.map[op.parentSub] = op.id;\n          yield* this.setOperation(parent);\n        }\n      } else {\n        if (right == null || left == null) {\n          if (right == null) {\n            parent.end = op.id;\n          }\n          if (left == null) {\n            parent.start = op.id;\n          }\n          yield* this.setOperation(parent);\n        }\n      }\n      yield* this.setOperation(op);\n    }\n  },\n  List: {\n    create: function*( op : Op){\n      op.start = null;\n      op.end = null;\n      op.struct = \"List\";\n      return yield* Struct.Operation.create.call(this, op);\n    },\n    requiredOps: function(op){\n      var ids = [];\n      if (op.start != null) {\n        ids.push(op.start);\n      }\n      if (op.end != null){\n        ids.push(op.end);\n      }\n      return ids;\n    },\n    execute: function* (op) {\n      yield* this.setOperation(op);\n    },\n    ref: function* (op : Op, pos : number) : Insert {\n      var o = op.start;\n      while ( pos !== 0 || o != null) {\n        o = (yield* this.getOperation(o)).right;\n        pos--;\n      }\n      return (o == null) ? null : yield* this.getOperation(o);\n    },\n    map: function* (o : Op, f : Function) : Array<any> {\n      o = o.start;\n      var res = [];\n      while ( o != null) {\n        var operation = yield* this.getOperation(o);\n        res.push(f(operation.content));\n        o = operation.right;\n      }\n      return res;\n    },\n    insert: function* (op, pos : number, contents : Array<any>) {\n      var o = yield* Struct.List.ref.call(this, op, pos);\n      var or = yield* this.getOperation(o.right);\n      for (var key in contents) {\n        var insert = {\n          left: o,\n          right: or,\n          content: contents[key],\n          parent: op\n        };\n        o = yield* Struct.Insert.create.call(this, insert);\n      }\n    }\n  },\n  Map: {\n    /*\n      {\n        // empty\n      }\n    */\n    create: function*( op : Op ){\n      op.map = {};\n      op.struct = \"Map\";\n      return yield* Struct.Operation.create.call(this, op);\n    },\n    requiredOps: function(op){\n      var ids = [];\n      for (var end in op.map) {\n        ids.push(op.map[end]);\n      }\n      return ids;\n    },\n    execute: function* (op) {\n      yield* this.setOperation(op);\n    },\n    get: function* (op, name) {\n      var res = yield* this.getOperation(op.map[name]);\n      return (res != null) ? res.content : void 0;\n    },\n    set: function* (op, name, value) {\n      var end = op.map[name];\n      if (end == null) {\n        end = null;\n        op.map[name] = end;\n      }\n      var insert = {\n        left: end,\n        right: null,\n        content: value,\n        parent: op.id,\n        parentSub: name\n      };\n      yield* Struct.Insert.create.call(this, insert);\n    }\n  }\n};\n\nY.Struct = Struct;\n","// returns a random element of o\n// works on Object, and Array\nfunction getRandom (o) {\n  if (o instanceof Array) {\n    return o[Math.floor(Math.random() * o.length)];\n  } else if (o.constructor === Object) {\n    var keys = [];\n    for (var key in o) {\n      keys.push(key);\n    }\n    return o[getRandom(keys)];\n  }\n}\n\nvar globalRoom = {\n  users: {},\n  buffers: {},\n  removeUser: function(user : AbstractConnector){\n\n    for (var i in this.users) {\n      this.users[i].userLeft(user);\n    }\n    delete this.users[user];\n    delete this.buffers[user];\n  },\n  addUser: function(connector){\n    this.users[connector.userId] = connector;\n    this.buffers[connector.userId] = [];\n    for (var uname in this.users) {\n      if (uname !== connector.userId) {\n        var u = this.users[uname];\n        u.userJoined(connector.userId, \"master\");\n        connector.userJoined(u.userId, \"master\");\n      }\n    }\n  }\n};\nfunction flushOne(){\n  var bufs = [];\n  for (var i in globalRoom.buffers) {\n    if (globalRoom.buffers[i].length > 0) {\n      bufs.push(i);\n    }\n  }\n  if (bufs.length > 0) {\n    var userId = getRandom(bufs);\n    var m = globalRoom.buffers[userId].shift();\n    var user = globalRoom.users[userId];\n    user.receiveMessage(m[0], m[1]);\n    return true;\n  } else {\n    return false;\n  }\n}\nsetInterval(flushOne, 10);\n\nvar userIdCounter = 0;\n\nclass Test extends AbstractConnector {\n  constructor (y, options) {\n    if(options === undefined){\n      throw new Error(\"Options must not be undefined!\");\n    }\n    options.role = \"master\";\n    options.forwardToSyncingClients = false;\n    super(y, options);\n    this.setUserId((userIdCounter++) + \"\");\n    globalRoom.addUser(this);\n    this.globalRoom = globalRoom;\n  }\n  send (userId, message) {\n    globalRoom.buffers[userId].push([this.userId, message]);\n  }\n  broadcast (message) {\n    for (var key in globalRoom.buffers) {\n      globalRoom.buffers[key].push([this.userId, message]);\n    }\n  }\n  disconnect () {\n    globalRoom.removeUser(this.userId);\n  }\n  flushAll () {\n    var c = true;\n    while (c) {\n      c = flushOne();\n    }\n  }\n}\n\nY.Test = Test;\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var iteratorSymbol =\n    typeof Symbol === \"function\" && Symbol.iterator || \"@@iterator\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided, then outerFn.prototype instanceof Generator.\n    var generator = Object.create((outerFn || Generator).prototype);\n\n    generator._invoke = makeInvokeMethod(\n      innerFn, self || null,\n      new Context(tryLocsList || [])\n    );\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    genFun.__proto__ = GeneratorFunctionPrototype;\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `value instanceof AwaitArgument` to determine if the yielded value is\n  // meant to be awaited. Some may consider the name of this method too\n  // cutesy, but they are curmudgeons.\n  runtime.awrap = function(arg) {\n    return new AwaitArgument(arg);\n  };\n\n  function AwaitArgument(arg) {\n    this.arg = arg;\n  }\n\n  function AsyncIterator(generator) {\n    // This invoke function is written in a style that assumes some\n    // calling function (or Promise) will handle exceptions.\n    function invoke(method, arg) {\n      var result = generator[method](arg);\n      var value = result.value;\n      return value instanceof AwaitArgument\n        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)\n        : Promise.resolve(value).then(function(unwrapped) {\n            result.value = unwrapped;\n            return result;\n          }, invokeThrow);\n    }\n\n    if (typeof process === \"object\" && process.domain) {\n      invoke = process.domain.bind(invoke);\n    }\n\n    var invokeNext = invoke.bind(generator, \"next\");\n    var invokeThrow = invoke.bind(generator, \"throw\");\n    var invokeReturn = invoke.bind(generator, \"return\");\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      var enqueueResult =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(function() {\n          return invoke(method, arg);\n        }) : new Promise(function(resolve) {\n          resolve(invoke(method, arg));\n        });\n\n      // Avoid propagating enqueueResult failures to Promises returned by\n      // later invocations of the iterator, and call generator.return() to\n      // allow the generator a chance to clean up.\n      previousPromise = enqueueResult[\"catch\"](invokeReturn);\n\n      return enqueueResult;\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          if (method === \"return\" ||\n              (method === \"throw\" && delegate.iterator[method] === undefined)) {\n            // A return or throw (when the delegate iterator has no throw\n            // method) always terminates the yield* loop.\n            context.delegate = null;\n\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            var returnMethod = delegate.iterator[\"return\"];\n            if (returnMethod) {\n              var record = tryCatch(returnMethod, delegate.iterator, arg);\n              if (record.type === \"throw\") {\n                // If the return method threw an exception, let that\n                // exception prevail over the original return or throw.\n                method = \"throw\";\n                arg = record.arg;\n                continue;\n              }\n            }\n\n            if (method === \"return\") {\n              // Continue with the outer return, now that the delegate\n              // iterator has been terminated.\n              continue;\n            }\n          }\n\n          var record = tryCatch(\n            delegate.iterator[method],\n            delegate.iterator,\n            arg\n          );\n\n          if (record.type === \"throw\") {\n            context.delegate = null;\n\n            // Like returning generator.throw(uncaught), but without the\n            // overhead of an extra function call.\n            method = \"throw\";\n            arg = record.arg;\n            continue;\n          }\n\n          // Delegate generator ran and handled its own exceptions so\n          // regardless of what the method was, we continue as if it is\n          // \"next\" with an undefined arg.\n          method = \"next\";\n          arg = undefined;\n\n          var info = record.arg;\n          if (info.done) {\n            context[delegate.resultName] = info.value;\n            context.next = delegate.nextLoc;\n          } else {\n            state = GenStateSuspendedYield;\n            return info;\n          }\n\n          context.delegate = null;\n        }\n\n        if (method === \"next\") {\n          if (state === GenStateSuspendedYield) {\n            context.sent = arg;\n          } else {\n            delete context.sent;\n          }\n\n        } else if (method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw arg;\n          }\n\n          if (context.dispatchException(arg)) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            method = \"next\";\n            arg = undefined;\n          }\n\n        } else if (method === \"return\") {\n          context.abrupt(\"return\", arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          var info = {\n            value: record.arg,\n            done: context.done\n          };\n\n          if (record.arg === ContinueSentinel) {\n            if (context.delegate && method === \"next\") {\n              // Deliberately forget the last sent value so that we don't\n              // accidentally pass it on to the delegate.\n              arg = undefined;\n            }\n          } else {\n            return info;\n          }\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(arg) call above.\n          method = \"throw\";\n          arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset();\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function() {\n      this.prev = 0;\n      this.next = 0;\n      this.sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      // Pre-initialize at least 20 temporary variables to enable hidden\n      // class optimizations for simple generators.\n      for (var tempIndex = 0, tempName;\n           hasOwn.call(this, tempName = \"t\" + tempIndex) || tempIndex < 20;\n           ++tempIndex) {\n        this[tempName] = null;\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.next = finallyEntry.finallyLoc;\n      } else {\n        this.complete(record);\n      }\n\n      return ContinueSentinel;\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = record.arg;\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n","\nclass AbstractConnector { //eslint-disable-line no-unused-vars\n  /*\n    opts\n     .role : String Role of this client (\"master\" or \"slave\")\n     .userId : String that uniquely defines the user.\n  */\n  constructor (y, opts) {\n    this.y = y;\n    if (opts == null){\n      opts = {};\n    }\n    if (opts.role == null || opts.role === \"master\") {\n      this.role = \"master\";\n    } else if (opts.role === \"slave\") {\n      this.role = \"slave\";\n    } else {\n      throw new Error(\"Role must be either 'master' or 'slave'!\");\n    }\n    this.role = opts.role;\n    this.connections = {};\n    this.userEventListeners = [];\n    this.whenSyncedListeners = [];\n    this.currentSyncTarget = null;\n    this.syncingClients = [];\n    this.forwardToSyncingClients = (opts.forwardToSyncingClients === false) ? false : true;\n    this.debug = opts.debug ? true : false;\n  }\n  setUserId (userId) {\n    this.userId = userId;\n    this.y.db.setUserId(userId);\n  }\n  onUserEvent (f) {\n    this.userEventListeners.push(f);\n  }\n  userLeft (user : string) {\n    delete this.connections[user];\n    if (user === this.currentSyncTarget){\n      this.currentSyncTarget = null;\n      this.findNextSyncTarget();\n    }\n    for (var f of this.userEventListeners){\n      f({\n        action: \"userLeft\",\n        user: user\n      });\n    }\n  }\n  userJoined (user, role) {\n    if(role == null){\n      throw new Error(\"You must specify the role of the joined user!\");\n    }\n    if (this.connections[user] != null) {\n      throw new Error(\"This user already joined!\");\n    }\n    this.connections[user] = {\n      isSynced: false,\n      role: role\n    };\n    for (var f of this.userEventListeners) {\n      f({\n        action: \"userJoined\",\n        user: user,\n        role: role\n      });\n    }\n    if (this.currentSyncTarget == null) {\n      this.findNextSyncTarget();\n    }\n  }\n  // Execute a function _when_ we are connected.\n  // If not connected, wait until connected\n  whenSynced (f) {\n    if (this.isSynced === true) {\n      f();\n    } else {\n      this.whenSyncedListeners.push(f);\n    }\n  }\n  // returns false, if there is no sync target\n  // true otherwise\n  findNextSyncTarget () {\n    if (this.currentSyncTarget != null && this.connections[this.currentSyncTarget].isSynced === false) {\n      throw new Error(\"The current sync has not finished!\");\n    }\n\n    var syncUser = null;\n    for (var uid in this.connections) {\n      syncUser = this.connections[uid];\n      if (!syncUser.isSynced) {\n        break;\n      }\n    }\n    if (syncUser != null){\n      var conn = this;\n      this.y.db.requestTransaction(function*(){\n        conn.currentSyncTarget = uid;\n        conn.send(uid, {\n          type: \"sync step 1\",\n          stateVector: yield* this.getStateVector()\n        });\n      });\n    }\n    // set the state to synced!\n    if (!this.isSynced) {\n      this.isSynced = true;\n      for (var f of this.whenSyncedListeners) {\n        f();\n      }\n      this.whenSyncedListeners = null;\n    }\n    return false;\n  }\n  // You received a raw message, and you know that it is intended for to Yjs. Then call this function.\n  receiveMessage (sender, m){\n    if (this.debug) {\n      console.log(`${sender} -> ${this.userId}: ${JSON.stringify(m)}`); //eslint-disable-line\n    }\n    if (m.type === \"sync step 1\") {\n      // TODO: make transaction, stream the ops\n      let conn = this;\n      this.y.db.requestTransaction(function*(){\n        var ops = yield* this.getOperations(m.stateVector);\n        var sv = yield* this.getStateVector();\n        conn.send(sender, {\n          type: \"sync step 2\",\n          os: ops,\n          stateVector: sv\n        });\n        if (this.forwardToSyncingClients) {\n          conn.syncingClients.push(sender);\n          setTimeout(function(){\n            conn.syncingClients = conn.syncingClients.filter(function(cli){\n              return cli !== sender;\n            });\n            conn.send(sender, {\n              type: \"sync done\"\n            });\n          }, conn.syncingClientDuration);\n        }\n      });\n    } else if (m.type === \"sync step 2\") {\n      this.y.db.apply(m.os);\n      let conn = this;\n      this.y.db.requestTransaction(function*(){\n        var ops = yield* this.getOperations(m.stateVector);\n        if (ops.length > 0) {\n          conn.broadcast({\n            type: \"update\",\n            ops: ops\n          });\n        }\n      });\n    } else if (m.type === \"sync done\") {\n      this.connections[sender].isSynced = true;\n      this.findNextSyncTarget();\n    } else if (m.type === \"update\") {\n      if (this.forwardToSyncingClients) {\n        for (var client of this.syncingClients) {\n          this.send(client, m);\n        }\n      }\n      this.y.db.apply(m.ops);\n    }\n  }\n  // Currently, the HB encodes operations as JSON. For the moment I want to keep it\n  // that way. Maybe we support encoding in the HB as XML in the future, but for now I don't want\n  // too much overhead. Y is very likely to get changed a lot in the future\n  //\n  // Because we don't want to encode JSON as string (with character escaping, wich makes it pretty much unreadable)\n  // we encode the JSON as XML.\n  //\n  // When the HB support encoding as XML, the format should look pretty much like this.\n  //\n  // does not support primitive values as array elements\n  // expects an ltx (less than xml) object\n  parseMessageFromXml (m) {\n    function parseArray (node) {\n      for (var n of node.children){\n        if (n.getAttribute(\"isArray\") === \"true\") {\n          return parseArray(n);\n        } else {\n          return parseObject(n);\n        }\n      }\n    }\n    function parseObject (node) {\n      var json = {};\n      for (var attrName in node.attrs) {\n        var value = node.attrs[attrName];\n        var int = parseInt(value);\n        if (isNaN(int) || (\"\" + int) !== value){\n          json[attrName] = value;\n        } else {\n          json[attrName] = int;\n        }\n      }\n      for (var n in node.children){\n        var name = n.name;\n        if (n.getAttribute(\"isArray\") === \"true\") {\n          json[name] = parseArray(n);\n        } else {\n          json[name] = parseObject(n);\n        }\n      }\n      return json;\n    }\n    parseObject(m);\n  }\n  // encode message in xml\n  // we use string because Strophe only accepts an \"xml-string\"..\n  // So {a:4,b:{c:5}} will look like\n  // <y a=\"4\">\n  //   <b c=\"5\"></b>\n  // </y>\n  // m - ltx element\n  // json - Object\n  encodeMessageToXml (msg, obj) {\n    // attributes is optional\n    function encodeObject (m, json) {\n      for (var name in json) {\n        var value = json[name];\n        if (name == null) {\n          // nop\n        } else if (value.constructor === Object) {\n          encodeObject(m.c(name), value);\n        } else if (value.constructor === Array) {\n          encodeArray(m.c(name), value);\n        } else {\n          m.setAttribute(name, value);\n        }\n      }\n    }\n    function encodeArray (m, array) {\n      m.setAttribute(\"isArray\", \"true\");\n      for (var e of array) {\n        if (e.constructor === Object) {\n          encodeObject(m.c(\"array-element\"), e);\n        } else {\n          encodeArray(m.c(\"array-element\"), e);\n        }\n      }\n    }\n    if (obj.constructor === Object) {\n      encodeObject(msg.c(\"y\", { xmlns: \"http://y.ninja/connector-stanza\" }), obj);\n    } else if (obj.constructor === Array) {\n      encodeArray(msg.c(\"y\", { xmlns: \"http://y.ninja/connector-stanza\" }), obj);\n    } else {\n      throw new Error(\"I can't encode this json!\");\n    }\n  }\n}\n","/* @flow */\nclass AbstractTransaction { //eslint-disable-line no-unused-vars\n  constructor (store : OperationStore) {\n    this.store = store;\n  }\n  // returns false if operation is not expected.\n  *addOperation (op) {\n    var state = yield* this.getState(op.id[0]);\n    if (op.id[1] === state.clock){\n      state.clock++;\n      yield* this.setState(state);\n      yield* this.setOperation(op);\n      this.store.operationAdded(op);\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\nY.AbstractTransaction = AbstractTransaction;\n\ntype Listener = {\n  f : GeneratorFunction, // is called when all operations are available\n  missing : number // number of operations that are missing\n}\n\ntype Id = [string, number];\n\nclass AbstractOperationStore { //eslint-disable-line no-unused-vars\n  constructor (y) {\n    this.y = y;\n    this.parentListeners = {};\n    this.parentListenersRequestPending = false;\n    this.parentListenersActivated = {};\n    // E.g. this.listenersById[id] : Array<Listener>\n    this.listenersById = {};\n    // Execute the next time a transaction is requested\n    this.listenersByIdExecuteNow = [];\n    // A transaction is requested\n    this.listenersByIdRequestPending = false;\n    /* To make things more clear, the following naming conventions:\n       * ls : we put this.listenersById on ls\n       * l : Array<Listener>\n       * id : Id (can't use as property name)\n       * sid : String (converted from id via JSON.stringify\n                       so we can use it as a property name)\n\n      Always remember to first overwrite over\n      a property before you iterate over it!\n    */\n  }\n  setUserId (userId) {\n    this.userId = userId;\n  }\n  apply (ops) {\n    for (var key in ops) {\n      var o = ops[key];\n      var required = Y.Struct[o.struct].requiredOps(o);\n      this.whenOperationsExist(required, Y.Struct[o.struct].execute, o);\n    }\n  }\n  // f is called as soon as every operation requested is available.\n  // Note that Transaction can (and should) buffer requests.\n  whenOperationsExist (ids : Array<Id>, f : GeneratorFunction, args : Array<any>) {\n    if (ids.length > 0) {\n      let listener : Listener = {\n        f: f,\n        args: args || [],\n        missing: ids.length\n      };\n\n      for (let key in ids) {\n        let id = ids[key];\n        let sid = JSON.stringify(id);\n        let l = this.listenersById[sid];\n        if (l == null){\n          l = [];\n          this.listenersById[sid] = l;\n        }\n        l.push(listener);\n      }\n    } else {\n      this.listenersByIdExecuteNow.push({\n        f: f,\n        args: args || []\n      });\n    }\n\n    if (this.listenersByIdRequestPending){\n      return;\n    }\n\n    this.listenersByIdRequestPending = true;\n    var store = this;\n\n    this.requestTransaction(function*(){\n      var exeNow = store.listenersByIdExecuteNow;\n      store.listenersByIdExecuteNow = [];\n\n      var ls = store.listenersById;\n      store.listenersById = {};\n\n      store.listenersByIdRequestPending = false;\n\n      for (let key in exeNow) {\n        let listener = exeNow[key];\n        yield* listener.f.call(this, listener.args);\n      }\n\n      for (var sid in ls){\n        var l = ls[sid];\n        var id = JSON.parse(sid);\n        if ((yield* this.getOperation(id)) == null){\n          store.listenersById[sid] = l;\n        } else {\n          for (let key in l) {\n            let listener = l[key];\n            if (--listener.missing === 0){\n              yield* listener.f.call(this, listener.args);\n            }\n          }\n        }\n      }\n    });\n  }\n  // called by a transaction when an operation is added\n  operationAdded (op) {\n    // notify whenOperation listeners (by id)\n    var l = this.listenersById[JSON.stringify(op.id)];\n    if (l != null) {\n      for (var key in l){\n        var listener = l[key];\n        if (--listener.missing === 0){\n          this.whenOperationsExist([], listener.f, listener.args);\n        }\n      }\n    }\n    // notify parent listeners, if possible\n    var listeners = this.parentListeners[op.parent];\n    if ( this.parentListenersRequestPending\n        || ( listeners == null )\n        || ( listeners.length === 0 )) {\n      return;\n    }\n    var al = this.parentListenersActivated[JSON.stringify(op.parent)];\n    if ( al == null ){\n      al = [];\n      this.parentListenersActivated[JSON.stringify(op.parent)] = al;\n    }\n    al.push(op);\n\n    this.parentListenersRequestPending = true;\n    var store = this;\n    this.requestTransaction(function*(){\n      store.parentListenersRequestPending = false;\n      var activatedOperations = store.parentListenersActivated;\n      store.parentListenersActivated = {};\n      for (var parentId in activatedOperations){\n        var parent = yield* this.getOperation(parentId);\n        Struct[parent.struct].notifyObservers(activatedOperations[parentId]);\n      }\n    });\n\n  }\n  removeParentListener (id, f) {\n    var ls = this.parentListeners[id];\n    if (ls != null) {\n      this.parentListeners[id] = ls.filter(function(g){\n        return (f !== g);\n      });\n    }\n  }\n  addParentListener (id, f) {\n    var ls = this.parentListeners[JSON.stringify(id)];\n    if (ls == null) {\n      ls = [];\n      this.parentListeners[JSON.stringify(id)] = ls;\n    }\n    ls.push(f);\n  }\n}\nY.AbstractOperationStore = AbstractOperationStore;\n","\nclass WebRTC extends AbstractConnector {\n  constructor (options) {\n    if(options === undefined){\n      throw new Error(\"Options must not be undefined!\");\n    }\n    super({\n      role: \"slave\"\n    });\n\n    var room = options.room;\n\n    // connect per default to our server\n    if(options.url == null){\n      options.url = \"https://yatta.ninja:8888\";\n    }\n\n    var swr = new SimpleWebRTC(options); //eslint-disable-line no-undef\n    this.swr = swr;\n    var self = this;\n\n    swr.once(\"connectionReady\", function(userId){\n      // SimpleWebRTC (swr) is initialized\n      swr.joinRoom(room);\n\n      swr.once(\"joinedRoom\", function(){\n        self.setUserId(userId);\n        var i;\n        // notify the connector class about all the users that already\n        // joined the session\n        for(i in self.swr.webrtc.peers){\n          self.userJoined(self.swr.webrtc.peers[i].id, \"master\");\n        }\n        swr.on(\"channelMessage\", function(peer, room_, message){\n          // The client received a message\n          // Check if the connector is already initialized,\n          // only then forward the message to the connector class\n          if(message.type != null ){\n            self.receiveMessage(peer.id, message.payload);\n          }\n        });\n      });\n\n      swr.on(\"createdPeer\", function(peer){\n        // a new peer/client joined the session.\n        // Notify the connector class, if the connector\n        // is already initialized\n        self.userJoined(peer.id, \"master\");\n      });\n\n      swr.on(\"peerStreamRemoved\", function(peer){\n        // a client left the session.\n        // Notify the connector class, if the connector\n        // is already initialized\n        self.userLeft(peer.id);\n      });\n    });\n  }\n  send (uid, message) {\n    var self = this;\n    // we have to make sure that the message is sent under all circumstances\n    var send = function(){\n      // check if the clients still exists\n      var peer = self.swr.webrtc.getPeers(uid)[0];\n      var success;\n      if(peer){\n        // success is true, if the message is successfully sent\n        success = peer.sendDirectly(\"simplewebrtc\", \"yjs\", message);\n      }\n      if(!success){\n        // resend the message if it didn't work\n        setTimeout(send, 500);\n      }\n    };\n    // try to send the message\n    send();\n  }\n  broadcast (message) {\n    this.swr.sendDirectlyToAll(\"simplewebrtc\", \"yjs\", message);\n  }\n}\n\nY.WebRTC = WebRTC;\n","\ntype State = {\n  user: string,\n  clock: number\n};\n\ntype StateVector = Array<State>;\n\ntype StateSet = Object;\n\ntype IDBTransaction = Function;\ntype IDBObjectStore = Function;\ntype IDBRequest = Function;\ntype IDBCursor = Function;\ntype IDBKeyRange = Function;\n\ntype IDBOpenDBRequest = Function;\n\ndeclare var indexedDB : Object;\n\nY.IndexedDB = (function(){ //eslint-disable-line no-unused-vars\n  class Transaction extends AbstractTransaction { //eslint-disable-line\n    transaction: IDBTransaction;\n    sv: IDBObjectStore;\n    os: IDBObjectStore;\n    store: OperationStore;\n\n    constructor (store : OperationStore) {\n      super(store);\n      this.transaction = store.db.transaction([\"OperationStore\", \"StateVector\"], \"readwrite\");\n      this.sv = this.transaction.objectStore(\"StateVector\");\n      this.os = this.transaction.objectStore(\"OperationStore\");\n      this.buffer = {};\n    }\n    *setOperation (op) {\n      yield this.os.put(op);\n      this.buffer[JSON.stringify(op.id)] = op;\n      return op;\n    }\n    *getOperation (id) {\n      var op = this.buffer[JSON.stringify(id)];\n      if (op == null) {\n        op = yield this.os.get(id);\n        this.buffer[JSON.stringify(id)] = op;\n      }\n      return op;\n    }\n    *removeOperation (id) {\n      this.buffer[JSON.stringify(id)] = null;\n      return yield this.os.delete(id);\n    }\n    *setState (state : State) : State {\n      return yield this.sv.put(state);\n    }\n    *getState (user : string) : State {\n      var state;\n      if ((state = yield this.sv.get(user)) != null){\n        return state;\n      } else {\n        return {\n          user: user,\n          clock: 0\n        };\n      }\n    }\n    *getStateVector () : StateVector {\n      var stateVector = [];\n      var cursorResult = this.sv.openCursor();\n      var cursor;\n      while ((cursor = yield cursorResult) != null) {\n        stateVector.push(cursor.value);\n        cursor.continue();\n      }\n      return stateVector;\n    }\n    *getStateSet () : StateSet {\n      var sv : StateVector = yield* this.getStateVector();\n      var ss : StateSet = {};\n      for (var state of sv){\n        ss[state.user] = state.clock;\n      }\n      return ss;\n    }\n\n    *getOperations (startSS : StateSet) {\n      if (startSS == null){\n        startSS = {};\n      }\n      var ops = [];\n\n      var endSV : StateVector = yield* this.getStateVector();\n      for (var endState of endSV) {\n        var user = endState.user;\n        var startPos = startSS[user] || 0;\n        var endPos = endState.clock;\n        var range = IDBKeyRange.bound([user, startPos], [user, endPos]);\n        var cursorResult = this.os.openCursor(range);\n        var cursor;\n        while ((cursor = yield cursorResult) != null) {\n          ops.push(cursor.value);\n          cursor.continue();\n        }\n      }\n      return ops;\n    }\n  }\n  class OperationStore extends AbstractOperationStore { //eslint-disable-line no-undef\n    namespace: string;\n    ready: Promise;\n    whenReadyListeners: Array<Function>;\n    constructor (y, opts) {\n      super(y);\n      if (opts == null) {\n        opts = {};\n      }\n      if (opts.namespace == null || typeof opts.namespace !== \"string\") {\n        throw new Error(\"IndexedDB: expect a string (opts.namespace)!\");\n      } else {\n        this.namespace = opts.namespace;\n      }\n      if (opts.idbVersion != null) {\n        this.idbVersion = opts.idbVersion;\n      } else {\n        this.idbVersion = 5;\n      }\n\n      this.transactionQueue = {\n        queue: [],\n        onRequest: null\n      };\n\n      var store = this;\n\n      var tGen = (function *transactionGen(){\n        store.db = yield indexedDB.open(opts.namespace, store.idbVersion);\n        var transactionQueue = store.transactionQueue;\n\n        var transaction = null;\n        var cont = true;\n        while (cont) {\n          var request = yield transactionQueue;\n          transaction = new Transaction(store);\n\n          yield* request.call(transaction, request);/*\n          while (transactionQueue.queue.length > 0) {\n            yield* transactionQueue.queue.shift().call(transaction);\n          }*/\n        }\n      })();\n\n      function handleTransactions(t){ //eslint-disable-line no-unused-vars\n        var request = t.value;\n        if (t.done){\n          return;\n        } else if (request.constructor === IDBRequest\n                   || request.constructor === IDBCursor ) {\n          request.onsuccess = function(){\n            handleTransactions(tGen.next(request.result));\n          };\n          request.onerror = function(err){\n            tGen.throw(err);\n          };\n        } else if (request === store.transactionQueue) {\n          if (request.queue.length > 0){\n            handleTransactions(tGen.next(request.queue.shift()));\n          } else {\n            request.onRequest = function(){\n              request.onRequest = null;\n              handleTransactions(tGen.next(request.queue.shift()));\n            };\n          }\n        } else if ( request.constructor === IDBOpenDBRequest ) {\n          request.onsuccess = function(event){\n            var db = event.target.result;\n            handleTransactions(tGen.next(db));\n          };\n          request.onerror = function(){\n            tGen.throw(\"Couldn't open IndexedDB database!\");\n          };\n          request.onupgradeneeded = function(event){\n            var db = event.target.result;\n            try {\n              db.createObjectStore(\"OperationStore\", {keyPath: \"id\"});\n              db.createObjectStore(\"StateVector\", {keyPath: \"user\"});\n            } catch (e) {\n                // console.log(\"Store already exists!\");\n            }\n          };\n        } else {\n          tGen.throw(\"You can not yield this type!\");\n        }\n      }\n      handleTransactions(tGen.next());\n\n    }\n    requestTransaction (makeGen : Function) {\n      this.transactionQueue.queue.push(makeGen);\n      if (this.transactionQueue.onRequest != null) {\n        this.transactionQueue.onRequest();\n      }\n    }\n    *removeDatabase () {\n      this.db.close();\n      yield indexedDB.deleteDatabase(this.namespace);\n    }\n  }\n  return OperationStore;\n})();\n","\ntype State = {\n  user: string,\n  clock: number\n};\n\ntype StateVector = Array<State>;\ntype OperationSet = Object; // os[Id] = op\ntype StateSet = Object;\n\nY.Memory = (function(){ //eslint-disable-line no-unused-vars\n  class Transaction extends AbstractTransaction { //eslint-disable-line\n    ss: StateSet;\n    os: OperationSet;\n    store: OperationStore;\n\n    constructor (store : OperationStore) {\n      super(store);\n      this.ss = store.ss;\n      this.os = store.os;\n    }\n    *setOperation (op) {\n      this.os[JSON.stringify(op.id)] = op;\n      return op;\n    }\n    *getOperation (id) {\n      return this.os[JSON.stringify(id)];\n    }\n    *removeOperation (id) {\n      delete this.os[JSON.stringify(id)];\n    }\n    *setState (state : State) : State {\n      this.ss[state.user] = state.clock;\n    }\n    *getState (user : string) : State {\n      var clock = this.ss[user];\n      if (clock == null){\n        clock = 0;\n      }\n      return {\n        user: user,\n        clock: clock\n      };\n    }\n    *getStateVector () : StateVector {\n      var stateVector = [];\n\n      for (var user in this.ss) {\n        var clock = this.ss[user];\n        stateVector.push({\n          user: user,\n          clock: clock\n        });\n      }\n      return stateVector;\n    }\n    *getStateSet () : StateSet {\n      return this.ss;\n    }\n    *getOperations (startSS : StateSet) {\n      if (startSS == null){\n        startSS = {};\n      }\n      var ops = [];\n\n      var endSV : StateVector = yield* this.getStateVector();\n      for (var endState of endSV) {\n        var user = endState.user;\n        if (user === \"_\") {\n          continue;\n        }\n        var startPos = startSS[user] || 0;\n        var endPos = endState.clock;\n\n        for (var clock = startPos; clock <= endPos; clock++) {\n          var op = yield* this.getOperation([user, clock]);\n          if (op != null) {\n            ops.push(op);\n          }\n        }\n      }\n      return ops;\n    }\n  }\n  class OperationStore extends AbstractOperationStore { //eslint-disable-line no-undef\n    constructor (y) {\n      super(y);\n      this.os = {};\n      this.ss = {};\n    }\n    requestTransaction (makeGen : Function) {\n      var t = new Transaction(this);\n      var gen = makeGen.call(t);\n      var res = gen.next();\n      while(!res.done){\n        if (res.value === \"transaction\") {\n          res = gen.next(t);\n        } else {\n          throw new Error(\"You may not yield this type. (Maybe you meant to use 'yield*'?)\");\n        }\n      }\n    }\n    *removeDatabase () {\n      delete this.os;\n    }\n  }\n  return OperationStore;\n})();\n","\n\n(function(){\n\n  class List {\n    constructor (_model) {\n      this._model = _model;\n    }\n    *val (pos) {\n      if (pos != null) {\n        var o = yield* this.Struct.List.ref(this._model, pos);\n        return o ? o.content : null;\n      } else {\n        return yield* this.Struct.List.map(this._model, function(c){return c; });\n      }\n    }\n    *insert (pos, contents) {\n      yield* this.Struct.List.insert(pos, contents);\n    }\n  }\n\n  Y.List = function* YList(){\n    var model = yield* this.Struct.List.create();\n    return new List(model);\n  };\n  Y.List.Create = List;\n})();\n","\n(function(){\n  class Map {\n    constructor (_model) {\n      this._model = _model;\n    }\n    *val () {\n      var transaction = yield \"transaction\";\n      var model = yield* transaction.getOperation(this._model);\n      if (arguments.length === 0) {\n        throw new Error(\"Implement this case!\");\n      } else if (arguments.length === 1) {\n        return yield* Y.Struct.Map.get.call(transaction, model, arguments[0]);\n      } else {\n        return yield* Y.Struct.Map.set.call(transaction, model, arguments[0], arguments[1]);\n      }\n    }\n  }\n\n  Y.Map = function* YMap(){\n    if (this instanceof Y.AbstractOperationStore) {\n      var model = yield* Y.Struct.map.create.call(this);\n      return new Map(model);\n    } else {\n      throw new Error(\"Don't use `new` to create this type!\");\n    }\n  };\n  Y.Map.Create = Map;\n})();\n"],"sourceRoot":"/source/"}
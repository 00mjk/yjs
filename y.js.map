{"version":3,"sources":["y.js","Connectors/Test.js","OperationStores/Memory.js","Struct.js","runtime.js","Connectors/WebRTC.js","OperationStores/IndexedDB.js","OperationStores/RedBlackTree.js","Types/List.js","Types/Map.js","Connector.js","OperationStore.js"],"names":["_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","__proto__","_classCallCheck","instance","Constructor","_flushOne","bufs","i","globalRoom","buffers","length","push","userId","getRandom","m","shift","user","users","receiveMessage","copyObject","o","c","key","compareIds","id1","id2","_createClass","defineProperties","target","props","descriptor","defineProperty","protoProps","staticProps","global","wrap","innerFn","outerFn","self","tryLocsList","generator","Generator","_invoke","makeInvokeMethod","Context","tryCatch","fn","obj","arg","type","call","err","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","forEach","method","this","AwaitArgument","AsyncIterator","invoke","result","Promise","resolve","then","invokeNext","invokeThrow","unwrapped","enqueue","enqueueResult","previousPromise","invokeReturn","process","domain","bind","context","state","GenStateSuspendedStart","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","iterator","undefined","returnMethod","record","info","done","GenStateSuspendedYield","resultName","next","nextLoc","sent","dispatchException","abrupt","ContinueSentinel","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","values","iterable","iteratorMethod","iteratorSymbol","isNaN","hasOwn","hasOwnProperty","Symbol","inModule","module","runtime","regeneratorRuntime","exports","Gp","displayName","isGeneratorFunction","genFun","ctor","name","mark","awrap","async","iter","toString","keys","object","reverse","pop","prev","tempName","tempIndex","stop","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","window","callee$0$0","context$1$0","Y","opts","db","connector","requestTransaction","callee$2$0","model","context$3$0","id","struct","map","addOperation","createType","transact","destroy","disconnect","removeDatabase","AbstractTransaction","AbstractOperationStore","Struct","removeUser","userLeft","addUser","uname","u","userJoined","userIdCounter","Test","_AbstractConnector","y","options","role","forwardToSyncingClients","setUserId","send","message","JSON","parse","stringify","broadcast","flushAll","flushOne","AbstractConnector","WebRTC","_AbstractConnector2","room","url","swr","SimpleWebRTC","once","joinRoom","webrtc","peers","on","peer","room_","payload","uid","success","getPeers","sendDirectly","setTimeout","sendDirectlyToAll","IndexedDB","Transaction","_AbstractTransaction","store","transaction","sv","objectStore","os","buffer","setOperation","op","put","getOperation","get","removeOperation","setState","getState","t0","clock","getStateVector","stateVector","cursorResult","cursor","openCursor","getStateSet","ss","_iterator","_isArray","_i","_ref","Array","isArray","getOperations","startSS","ops","endSV","_iterator2","_isArray2","_i2","_ref2","endState","startPos","endPos","range","IDBKeyRange","bound","t1","OperationStore","_AbstractOperationStore","handleTransactions","t","request","IDBRequest","IDBCursor","onsuccess","tGen","onerror","transactionQueue","queue","onRequest","IDBOpenDBRequest","event","onupgradeneeded","createObjectStore","keyPath","e","namespace","idbVersion","transactionGen","cont","context$4$0","indexedDB","open","makeGen","close","deleteDatabase","Memory","_AbstractTransaction2","n","findNode","val","find","_iterator3","_isArray3","_i3","_ref3","res","_iterator4","_isArray4","_i4","_ref4","iterate","encode","makeOperationReady","t3","t2","right","_AbstractOperationStore2","RBTree","gen","getType","N","color","_left","_right","_parent","isRed","isBlack","redden","blacken","rotateLeft","tree","parent","newParent","newRight","left","root","p","rotateRight","newLeft","getUncle","set","findNodeWithLowerBound","from","to","f","d","isFakeChild","child","_fixDelete","node","sibling","add","v","_fixInsert","uncle","grandparent","List","_model","pos","ref","content","insert","contents","_delete","_changed","YList","context$2$0","Create","Map","args$3$0","arguments","t4","t5","YMap","connections","userEventListeners","whenSyncedListeners","currentSyncTarget","syncingClients","debug","onUserEvent","findNextSyncTarget","_iterator5","_isArray5","_i5","_ref5","action","isSynced","_iterator6","_isArray6","_i6","_ref6","whenSynced","syncUser","conn","_iterator7","_isArray7","_i7","_ref7","sender","_this","console","log","callee$3$0","filter","cli","syncingClientDuration","apply","_iterator8","_isArray8","_i8","_ref8","client","parseMessageFromXml","parseArray","_x","_again","_function","_iterator9","_isArray9","_i9","_ref9","children","getAttribute","parseObject","json","attrName","attrs","int","parseInt","encodeMessageToXml","msg","encodeObject","encodeArray","setAttribute","array","_iterator10","_isArray10","_i10","_ref10","xmlns","sid","initializedTypes","operationAdded","listenersById","listenersByIdExecuteNow","listenersByIdRequestPending","required","requiredOps","whenOperationsExist","ids","listener","missing","_id","l","exeNow","ls","execute","t6","t7","t8","removeParentListener","parentListeners","g","addParentListener","Operation","Delete","deleted","Insert","start","end","origin","parentSub","opContent","getDistanceToOrigin","distanceToOrigin","startId","oOriginDistance","t9","t10","t11","t12","t14","t13","t17","t16","t18","delete","operation","oid"],"mappings":"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","file":"y.js","sourcesContent":["/* @flow */\n\nconst GeneratorFunction = (function*(){}).constructor;\n\nclass Y { //eslint-disable-line no-unused-vars\n  constructor (opts) {\n    this.db = new Y[opts.db.name](this, opts.db);\n    this.connector = new Y[opts.connector.name](this, opts.connector);\n    this.db.requestTransaction(function*(){\n      // create initial Map type\n      var model = {\n        id: [\"_\", 0],\n        struct: \"Map\",\n        type: \"Map\",\n        map: {}\n      };\n      yield* this.addOperation(model);\n      this.createType(model);\n    });\n  }\n  transact (generator) {\n    if (generator.constructor !== GeneratorFunction) {\n      throw new Error(\"y.transact requires a Generator function! E.g. function*(){/*..*/}\");\n    }\n    this.db.requestTransaction(generator);\n  }\n  destroy () {\n    this.connector.disconnect();\n    this.db.removeDatabase();\n    this.connector = null;\n    this.db = null;\n    this.transact = function(){\n      throw new Error(\"Remember?, you destroyed this type ;)\");\n    };\n  }\n}\n\nY.AbstractTransaction = AbstractTransaction;\nY.AbstractOperationStore = AbstractOperationStore;\nY.Struct = Struct;\n","var globalRoom = {\n  users: {},\n  buffers: {},\n  removeUser: function(user : AbstractConnector){\n\n    for (var i in this.users) {\n      this.users[i].userLeft(user);\n    }\n    delete this.users[user];\n    delete this.buffers[user];\n  },\n  addUser: function(connector){\n    this.users[connector.userId] = connector;\n    this.buffers[connector.userId] = [];\n    for (var uname in this.users) {\n      if (uname !== connector.userId) {\n        var u = this.users[uname];\n        u.userJoined(connector.userId, \"master\");\n        connector.userJoined(u.userId, \"master\");\n      }\n    }\n  }\n};\nfunction flushOne(){\n  var bufs = [];\n  for (var i in globalRoom.buffers) {\n    if (globalRoom.buffers[i].length > 0) {\n      bufs.push(i);\n    }\n  }\n  if (bufs.length > 0) {\n    var userId = getRandom(bufs);\n    var m = globalRoom.buffers[userId].shift();\n    var user = globalRoom.users[userId];\n    user.receiveMessage(m[0], m[1]);\n    return true;\n  } else {\n    return false;\n  }\n}\n// setInterval(flushOne, 10);\n\nvar userIdCounter = 0;\n\nclass Test extends AbstractConnector {\n  constructor (y, options) {\n    if(options === undefined){\n      throw new Error(\"Options must not be undefined!\");\n    }\n    options.role = \"master\";\n    options.forwardToSyncingClients = false;\n    super(y, options);\n    this.setUserId((userIdCounter++) + \"\");\n    globalRoom.addUser(this);\n    this.globalRoom = globalRoom;\n  }\n  send (userId, message) {\n    globalRoom.buffers[userId].push(JSON.parse(JSON.stringify([this.userId, message])));\n  }\n  broadcast (message) {\n    for (var key in globalRoom.buffers) {\n      globalRoom.buffers[key].push(JSON.parse(JSON.stringify([this.userId, message])));\n    }\n  }\n  disconnect () {\n    globalRoom.removeUser(this.userId);\n  }\n  flushAll () {\n    var c = true;\n    while (c) {\n      c = flushOne();\n    }\n  }\n  flushOne() {\n    flushOne();\n  }\n}\n\nY.Test = Test;\n","\ntype State = {\n  user: string,\n  clock: number\n};\n\n\nfunction copyObject (o) {\n  var c = {};\n  for (var key in o) {\n    c[key] = o[key];\n  }\n  return c;\n}\n\ntype StateVector = Array<State>;\ntype OperationSet = Object; // os[Id] = op\ntype StateSet = Object;\n\nY.Memory = (function(){ //eslint-disable-line no-unused-vars\n  class Transaction extends AbstractTransaction { //eslint-disable-line\n    ss: StateSet;\n    os: OperationSet;\n    store: OperationStore;\n\n    constructor (store : OperationStore) {\n      super(store);\n      this.ss = store.ss;\n      this.os = store.os;\n    }\n    *setOperation (op) {\n      // TODO: you can remove this step! probs..\n      var n = this.os.findNode(op.id);\n      n.val = op;\n      return op;\n    }\n    *getOperation (id) {\n      if (id == null) {\n        throw new Error(\"You must define id!\");\n      }\n      return this.os.find(id);\n    }\n    *removeOperation (id) {\n      this.os.delete(id);\n    }\n    *setState (state : State) : State {\n      this.ss[state.user] = state.clock;\n    }\n    *getState (user : string) : State {\n      var clock = this.ss[user];\n      if (clock == null){\n        clock = 0;\n      }\n      return {\n        user: user,\n        clock: clock\n      };\n    }\n    *getStateVector () : StateVector {\n      var stateVector = [];\n      for (var user in this.ss) {\n        var clock = this.ss[user];\n        stateVector.push({\n          user: user,\n          clock: clock\n        });\n      }\n      return stateVector;\n    }\n    *getStateSet () : StateSet {\n      return this.ss;\n    }\n    *getOperations (startSS : StateSet) {\n      // TODO: use bounds here!\n      if (startSS == null){\n        startSS = {};\n      }\n      var ops = [];\n\n      var endSV : StateVector = yield* this.getStateVector();\n      for (var endState of endSV) {\n        var user = endState.user;\n        if (user === \"_\") {\n          continue;\n        }\n        var startPos = startSS[user] || 0;\n        var endPos = endState.clock;\n\n        this.os.iterate([user, startPos], [user, endPos], function(op){//eslint-disable-line\n          ops.push(Struct[op.struct].encode(op));\n        });\n      }\n      var res = [];\n      for (var op of ops) {\n        res.push(yield* this.makeOperationReady.call(this, startSS, op));\n      }\n      return res;\n    }\n    *makeOperationReady (ss, op) {\n      // instead of ss, you could use currSS (a ss that increments when you add an operation)\n      var clock;\n      var o = op;\n      while (o.right != null){\n        // while unknown, go to the right\n        o = yield* this.getOperation(o.right);\n        clock = ss[o.id[0]];\n        if (clock != null && o.id[1] < clock) {\n          break;\n        }\n      }\n      op = copyObject(op);\n      op.right = (o == null) ? null : o.id;\n      return op;\n    }\n  }\n  class OperationStore extends AbstractOperationStore { //eslint-disable-line no-undef\n    constructor (y) {\n      super(y);\n      this.os = new RBTree();\n      this.ss = {};\n    }\n    requestTransaction (makeGen : Function) {\n      var t = new Transaction(this);\n      var gen = makeGen.call(t, t.getType([\"_\", 0]).next().value);\n      var res = gen.next();\n      while(!res.done){\n        if (res.value === \"transaction\") {\n          res = gen.next(t);\n        } else {\n          throw new Error(\"You must not yield this type. (Maybe you meant to use 'yield*'?)\");\n        }\n      }\n    }\n    *removeDatabase () {\n      delete this.os;\n    }\n  }\n  return OperationStore;\n})();\n","/* @flow */\n\n// Op is anything that we could get from the OperationStore.\ntype Op = Object;\ntype Id = [string, number];\n\ntype List = {\n  id: Id,\n  start: Insert,\n  end: Insert\n};\n\ntype Insert = {\n  id: Id,\n  left: Insert,\n  right: Insert,\n  origin: Insert,\n  parent: List,\n  content: any\n};\n\nfunction compareIds(id1, id2) {\n\n  if (id1 == null || id2 == null) {\n    if (id1 == null && id2 == null) {\n      return true;\n    }\n    return false;\n  }\n  if (id1[0] === id2[0] && id1[1] === id2[1]) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvar Struct = {\n  Operation: {  //eslint-disable-line no-unused-vars\n    create: function*(op : Op) : Struct.Operation {\n      var user = this.store.y.connector.userId;\n      var state = yield* this.getState(user);\n      op.id = [user, state.clock];\n      if ((yield* this.addOperation(op)) === false) {\n        throw new Error(\"This is highly unexpected :(\");\n      }\n      this.store.y.connector.broadcast({\n        type: \"update\",\n        ops: [Struct[op.struct].encode(op)]\n      });\n      return op;\n    }\n  },\n  Delete: {\n    create: function* (op) {\n      if (op.target == null) {\n        throw new Error(\"You must define a delete target!\");\n      }\n      op.struct = \"Delete\";\n      yield* Struct.Operation.create.call(this, op);\n\n      var target = yield* this.getOperation(op.target);\n      target.deleted = true;\n      yield* this.setOperation(target);\n    },\n    encode: function (op) {\n      return op;\n    },\n    requiredOps: function (op) {\n      return [op.target];\n    },\n    execute: function* (op) {\n      if ((yield* this.addOperation(op)) === false) {\n        return;\n      }\n      var target = yield* this.getOperation(op.target);\n      target.deleted = true;\n      yield* this.setOperation(target);\n    }\n  },\n  Insert: {\n    /*{\n        content: any,\n        left: Id,\n        right: Id,\n        parent: Id,\n        parentSub: string (optional)\n      }\n    */\n    create: function*( op: Op ) : Insert {\n      if ( op.left === undefined\n        || op.right === undefined\n        || op.parent === undefined ) {\n          throw new Error(\"You must define left, right, and parent!\");\n        }\n      op.origin = op.left;\n      op.struct = \"Insert\";\n      yield* Struct.Operation.create.call(this, op);\n\n      if (op.left != null) {\n        var left = yield* this.getOperation(op.left);\n        left.right = op.id;\n        yield* this.setOperation(left);\n      }\n      if (op.right != null) {\n        var right = yield* this.getOperation(op.right);\n        right.left = op.id;\n        yield* this.setOperation(right);\n      }\n      var parent = yield* this.getOperation(op.parent);\n      if (op.parentSub != null){\n        if (compareIds(parent.map[op.parentSub], op.right)) {\n          parent.map[op.parentSub] = op.id;\n          yield* this.setOperation(parent);\n        }\n      } else {\n        var start = compareIds(parent.start, op.right);\n        var end = compareIds(parent.end, op.left);\n        if (start || end) {\n          if (start) {\n            parent.start = op.id;\n          }\n          if (end) {\n            parent.end = op.id;\n          }\n          yield* this.setOperation(parent);\n        }\n      }\n      return op;\n    },\n    encode: function(op){\n      /*var e = {\n        id: op.id,\n        left: op.left,\n        right: op.right,\n        origin: op.origin,\n        parent: op.parent,\n        content: op.content,\n        struct: \"Insert\"\n      };\n      if (op.parentSub != null){\n        e.parentSub = op.parentSub;\n      }\n      return e;*/\n      return op;\n    },\n    requiredOps: function(op){\n      var ids = [];\n      if(op.left != null){\n        ids.push(op.left);\n      }\n      if(op.right != null){\n        ids.push(op.right);\n      }\n      if(op.right == null && op.left == null) {\n        ids.push(op.parent);\n      }\n      if (op.opContent != null) {\n        ids.push(op.opContent);\n      }\n      return ids;\n    },\n    getDistanceToOrigin: function *(op){\n      if (op.left == null) {\n        return 0;\n      } else {\n        var d = 0;\n        var o = yield* this.getOperation(op.left);\n        while (!compareIds(op.origin, (o ? o.id : null))) {\n          d++;\n          if (o.left == null) {\n            break;\n          } else {\n            o = yield* this.getOperation(o.left);\n          }\n        }\n        return d;\n      }\n    },\n    /*\n    # $this has to find a unique position between origin and the next known character\n    # case 1: $origin equals $o.origin: the $creator parameter decides if left or right\n    #         let $OL= [o1,o2,o3,o4], whereby $this is to be inserted between o1 and o4\n    #         o2,o3 and o4 origin is 1 (the position of o2)\n    #         there is the case that $this.creator < o2.creator, but o3.creator < $this.creator\n    #         then o2 knows o3. Since on another client $OL could be [o1,o3,o4] the problem is complex\n    #         therefore $this would be always to the right of o3\n    # case 2: $origin < $o.origin\n    #         if current $this insert_position > $o origin: $this ins\n    #         else $insert_position will not change\n    #         (maybe we encounter case 1 later, then this will be to the right of $o)\n    # case 3: $origin > $o.origin\n    #         $this insert_position is to the left of $o (forever!)\n    */\n    execute: function*(op){\n      var i; // loop counter\n      var distanceToOrigin = i = yield* Struct.Insert.getDistanceToOrigin.call(this, op); // most cases: 0 (starts from 0)\n      var o;\n      var parent;\n      var start;\n\n      // find o. o is the first conflicting operation\n      if (op.left != null) {\n        o = yield* this.getOperation(op.left);\n        o = (o.right == null) ? null : yield* this.getOperation(o.right);\n      } else { // left == null\n        parent = yield* this.getOperation(op.parent);\n        let startId = op.parentSub ? parent.map[op.parentSub] : parent.start;\n        start = startId == null ? null : yield* this.getOperation(startId);\n        o = start;\n      }\n\n      // handle conflicts\n      while (true) {\n        if (o != null && !compareIds(o.id, op.right)){\n          var oOriginDistance = yield* Struct.Insert.getDistanceToOrigin.call(this, o);\n          if (oOriginDistance === i) {\n            // case 1\n            if (o.id[0] < op.id[0]) {\n              op.left = o.id;\n              distanceToOrigin = i + 1;\n            }\n          } else if (oOriginDistance < i) {\n            // case 2\n            if (i - distanceToOrigin <= oOriginDistance) {\n              op.left = o.id;\n              distanceToOrigin = i + 1;\n            }\n          } else {\n            break;\n          }\n          i++;\n          o = o.right ? yield* this.getOperation(o.right) : null;\n        } else {\n          break;\n        }\n      }\n\n      // reconnect..\n      var left = null;\n      var right = null;\n      parent = parent || (yield* this.getOperation(op.parent));\n\n      // NOTE: You you have to call addOperation before you set any other operation!\n\n      // reconnect left and set right of op\n      if (op.left != null) {\n        left = yield* this.getOperation(op.left);\n        op.right = left.right;\n        if ((yield* this.addOperation(op)) === false) { // add here\n          return;\n        }\n        left.right = op.id;\n        yield* this.setOperation(left);\n      } else {\n        op.right = op.parentSub ? (parent.map[op.parentSub] || null) : parent.start;\n        if ((yield* this.addOperation(op)) === false) { // or here\n          return;\n        }\n      }\n      // reconnect right\n      if (op.right != null) {\n        right = yield* this.getOperation(op.right);\n        right.left = op.id;\n        yield* this.setOperation(right);\n      }\n\n      // notify parent\n      if (op.parentSub != null) {\n        if (left == null) {\n          parent.map[op.parentSub] = op.id;\n          yield* this.setOperation(parent);\n        }\n      } else {\n        if (right == null || left == null) {\n          if (right == null) {\n            parent.end = op.id;\n          }\n          if (left == null) {\n            parent.start = op.id;\n          }\n          yield* this.setOperation(parent);\n        }\n      }\n    }\n  },\n  List: {\n    create: function*( op : Op){\n      op.start = null;\n      op.end = null;\n      op.struct = \"List\";\n      return yield* Struct.Operation.create.call(this, op);\n    },\n    encode: function(op){\n      return {\n        struct: \"List\",\n        id: op.id,\n        type: op.type\n      };\n    },\n    requiredOps: function(){\n      /*\n      var ids = [];\n      if (op.start != null) {\n        ids.push(op.start);\n      }\n      if (op.end != null){\n        ids.push(op.end);\n      }\n      return ids;\n      */\n      return [];\n    },\n    execute: function* (op) {\n      op.start = null;\n      op.end = null;\n      if ((yield* this.addOperation(op)) === false) {\n        return;\n      }\n    },\n    ref: function* (op : Op, pos : number) : Insert {\n      if (op.start == null) {\n        return null;\n      }\n      var res = null;\n      var o = yield* this.getOperation(op.start);\n\n      while ( true ) {\n        if (!o.deleted) {\n          res = o;\n          pos--;\n        }\n        if (pos >= 0 && o.right != null) {\n          o = (yield* this.getOperation(o.right));\n        } else {\n          break;\n        }\n      }\n      return res;\n    },\n    delete: function* (op, pos) {\n      var ref = yield* Struct.List.ref.call(this, op, pos);\n      if (ref != null) {\n        yield* Struct.Delete.create.call(this, {\n          target: ref.id\n        });\n      }\n    },\n    map: function* (o : Op, f : Function) : Array<any> {\n      o = o.start;\n      var res = [];\n      while ( o != null) {\n        var operation = yield* this.getOperation(o);\n        if (!operation.deleted) {\n          res.push(f(operation.content));\n        }\n        o = operation.right;\n      }\n      return res;\n    },\n    insert: function* (op, pos : number, contents : Array<any>) {\n      var left, right;\n      if (pos === 0) {\n        left = null;\n        right = op.start;\n      } else {\n        var ref = yield* Struct.List.ref.call(this, op, pos - 1);\n        if (ref === null) {\n          left = op.end;\n          right = null;\n        } else {\n          left = ref.id;\n          right = ref.right;\n        }\n      }\n      for (var key in contents) {\n        var insert = {\n          left: left,\n          right: right,\n          content: contents[key],\n          parent: op.id\n        };\n        left = (yield* Struct.Insert.create.call(this, insert)).id;\n      }\n    }\n  },\n  Map: {\n    /*\n      {\n        // empty\n      }\n    */\n    create: function*( op : Op ){\n      op.map = {};\n      op.struct = \"Map\";\n      return yield* Struct.Operation.create.call(this, op);\n    },\n    encode: function(op){\n      return {\n        struct: \"Map\",\n        type: op.type,\n        id: op.id\n      };\n    },\n    requiredOps: function(){\n      /*\n      var ids = [];\n      for (var end in op.map) {\n        ids.push(op.map[end]);\n      }\n      return ids;\n      */\n      return [];\n    },\n    execute: function* (op) {\n      if ((yield* this.addOperation(op)) === false) {\n        return;\n      }\n    },\n    get: function* (op, name) {\n      var oid = op.map[name];\n      if (oid != null) {\n        var res = yield* this.getOperation(oid);\n        return (res == null || res.deleted) ? void 0 : (res.opContent == null\n                  ? res.content : yield* this.getType(res.opContent));\n      }\n    },\n    set: function* (op, name, value) {\n      var right = op.map[name] || null;\n      var insert = {\n        left: null,\n        right: right,\n        parent: op.id,\n        parentSub: name\n      };\n      if ( value != null && value._model != null\n           && value._model.length === 2) {\n        insert.opContent = value._model;\n      } else {\n        insert.content = value;\n      }\n      yield* Struct.Insert.create.call(this, insert);\n    },\n    delete: function* (op, name) {\n      var v = op.map[name] || null;\n      if (v != null) {\n        yield* Struct.Delete.create.call(this, {\n          target: v\n        });\n      }\n    }\n  }\n};\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var iteratorSymbol =\n    typeof Symbol === \"function\" && Symbol.iterator || \"@@iterator\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided, then outerFn.prototype instanceof Generator.\n    var generator = Object.create((outerFn || Generator).prototype);\n\n    generator._invoke = makeInvokeMethod(\n      innerFn, self || null,\n      new Context(tryLocsList || [])\n    );\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    genFun.__proto__ = GeneratorFunctionPrototype;\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `value instanceof AwaitArgument` to determine if the yielded value is\n  // meant to be awaited. Some may consider the name of this method too\n  // cutesy, but they are curmudgeons.\n  runtime.awrap = function(arg) {\n    return new AwaitArgument(arg);\n  };\n\n  function AwaitArgument(arg) {\n    this.arg = arg;\n  }\n\n  function AsyncIterator(generator) {\n    // This invoke function is written in a style that assumes some\n    // calling function (or Promise) will handle exceptions.\n    function invoke(method, arg) {\n      var result = generator[method](arg);\n      var value = result.value;\n      return value instanceof AwaitArgument\n        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)\n        : Promise.resolve(value).then(function(unwrapped) {\n            result.value = unwrapped;\n            return result;\n          }, invokeThrow);\n    }\n\n    if (typeof process === \"object\" && process.domain) {\n      invoke = process.domain.bind(invoke);\n    }\n\n    var invokeNext = invoke.bind(generator, \"next\");\n    var invokeThrow = invoke.bind(generator, \"throw\");\n    var invokeReturn = invoke.bind(generator, \"return\");\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      var enqueueResult =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(function() {\n          return invoke(method, arg);\n        }) : new Promise(function(resolve) {\n          resolve(invoke(method, arg));\n        });\n\n      // Avoid propagating enqueueResult failures to Promises returned by\n      // later invocations of the iterator, and call generator.return() to\n      // allow the generator a chance to clean up.\n      previousPromise = enqueueResult[\"catch\"](invokeReturn);\n\n      return enqueueResult;\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          if (method === \"return\" ||\n              (method === \"throw\" && delegate.iterator[method] === undefined)) {\n            // A return or throw (when the delegate iterator has no throw\n            // method) always terminates the yield* loop.\n            context.delegate = null;\n\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            var returnMethod = delegate.iterator[\"return\"];\n            if (returnMethod) {\n              var record = tryCatch(returnMethod, delegate.iterator, arg);\n              if (record.type === \"throw\") {\n                // If the return method threw an exception, let that\n                // exception prevail over the original return or throw.\n                method = \"throw\";\n                arg = record.arg;\n                continue;\n              }\n            }\n\n            if (method === \"return\") {\n              // Continue with the outer return, now that the delegate\n              // iterator has been terminated.\n              continue;\n            }\n          }\n\n          var record = tryCatch(\n            delegate.iterator[method],\n            delegate.iterator,\n            arg\n          );\n\n          if (record.type === \"throw\") {\n            context.delegate = null;\n\n            // Like returning generator.throw(uncaught), but without the\n            // overhead of an extra function call.\n            method = \"throw\";\n            arg = record.arg;\n            continue;\n          }\n\n          // Delegate generator ran and handled its own exceptions so\n          // regardless of what the method was, we continue as if it is\n          // \"next\" with an undefined arg.\n          method = \"next\";\n          arg = undefined;\n\n          var info = record.arg;\n          if (info.done) {\n            context[delegate.resultName] = info.value;\n            context.next = delegate.nextLoc;\n          } else {\n            state = GenStateSuspendedYield;\n            return info;\n          }\n\n          context.delegate = null;\n        }\n\n        if (method === \"next\") {\n          if (state === GenStateSuspendedYield) {\n            context.sent = arg;\n          } else {\n            delete context.sent;\n          }\n\n        } else if (method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw arg;\n          }\n\n          if (context.dispatchException(arg)) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            method = \"next\";\n            arg = undefined;\n          }\n\n        } else if (method === \"return\") {\n          context.abrupt(\"return\", arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          var info = {\n            value: record.arg,\n            done: context.done\n          };\n\n          if (record.arg === ContinueSentinel) {\n            if (context.delegate && method === \"next\") {\n              // Deliberately forget the last sent value so that we don't\n              // accidentally pass it on to the delegate.\n              arg = undefined;\n            }\n          } else {\n            return info;\n          }\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(arg) call above.\n          method = \"throw\";\n          arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset();\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function() {\n      this.prev = 0;\n      this.next = 0;\n      this.sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      // Pre-initialize at least 20 temporary variables to enable hidden\n      // class optimizations for simple generators.\n      for (var tempIndex = 0, tempName;\n           hasOwn.call(this, tempName = \"t\" + tempIndex) || tempIndex < 20;\n           ++tempIndex) {\n        this[tempName] = null;\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.next = finallyEntry.finallyLoc;\n      } else {\n        this.complete(record);\n      }\n\n      return ContinueSentinel;\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = record.arg;\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n","\nclass WebRTC extends AbstractConnector {\n  constructor (options) {\n    if(options === undefined){\n      throw new Error(\"Options must not be undefined!\");\n    }\n    super({\n      role: \"slave\"\n    });\n\n    var room = options.room;\n\n    // connect per default to our server\n    if(options.url == null){\n      options.url = \"https://yatta.ninja:8888\";\n    }\n\n    var swr = new SimpleWebRTC(options); //eslint-disable-line no-undef\n    this.swr = swr;\n    var self = this;\n\n    swr.once(\"connectionReady\", function(userId){\n      // SimpleWebRTC (swr) is initialized\n      swr.joinRoom(room);\n\n      swr.once(\"joinedRoom\", function(){\n        self.setUserId(userId);\n        var i;\n        // notify the connector class about all the users that already\n        // joined the session\n        for(i in self.swr.webrtc.peers){\n          self.userJoined(self.swr.webrtc.peers[i].id, \"master\");\n        }\n        swr.on(\"channelMessage\", function(peer, room_, message){\n          // The client received a message\n          // Check if the connector is already initialized,\n          // only then forward the message to the connector class\n          if(message.type != null ){\n            self.receiveMessage(peer.id, message.payload);\n          }\n        });\n      });\n\n      swr.on(\"createdPeer\", function(peer){\n        // a new peer/client joined the session.\n        // Notify the connector class, if the connector\n        // is already initialized\n        self.userJoined(peer.id, \"master\");\n      });\n\n      swr.on(\"peerStreamRemoved\", function(peer){\n        // a client left the session.\n        // Notify the connector class, if the connector\n        // is already initialized\n        self.userLeft(peer.id);\n      });\n    });\n  }\n  send (uid, message) {\n    var self = this;\n    // we have to make sure that the message is sent under all circumstances\n    var send = function(){\n      // check if the clients still exists\n      var peer = self.swr.webrtc.getPeers(uid)[0];\n      var success;\n      if(peer){\n        // success is true, if the message is successfully sent\n        success = peer.sendDirectly(\"simplewebrtc\", \"yjs\", message);\n      }\n      if(!success){\n        // resend the message if it didn't work\n        setTimeout(send, 500);\n      }\n    };\n    // try to send the message\n    send();\n  }\n  broadcast (message) {\n    this.swr.sendDirectlyToAll(\"simplewebrtc\", \"yjs\", message);\n  }\n}\n\nY.WebRTC = WebRTC;\n","\ntype State = {\n  user: string,\n  clock: number\n};\n\ntype StateVector = Array<State>;\n\ntype StateSet = Object;\n\ntype IDBTransaction = Function;\ntype IDBObjectStore = Function;\ntype IDBRequest = Function;\ntype IDBCursor = Function;\ntype IDBKeyRange = Function;\n\ntype IDBOpenDBRequest = Function;\n\ndeclare var indexedDB : Object;\n\nY.IndexedDB = (function(){ //eslint-disable-line no-unused-vars\n  class Transaction extends AbstractTransaction { //eslint-disable-line\n    transaction: IDBTransaction;\n    sv: IDBObjectStore;\n    os: IDBObjectStore;\n    store: OperationStore;\n\n    constructor (store : OperationStore) {\n      super(store);\n      this.transaction = store.db.transaction([\"OperationStore\", \"StateVector\"], \"readwrite\");\n      this.sv = this.transaction.objectStore(\"StateVector\");\n      this.os = this.transaction.objectStore(\"OperationStore\");\n      this.buffer = {};\n    }\n    *setOperation (op) {\n      yield this.os.put(op);\n      this.buffer[JSON.stringify(op.id)] = op;\n      return op;\n    }\n    *getOperation (id) {\n      var op = this.buffer[JSON.stringify(id)];\n      if (op == null) {\n        op = yield this.os.get(id);\n        this.buffer[JSON.stringify(id)] = op;\n      }\n      return op;\n    }\n    *removeOperation (id) {\n      this.buffer[JSON.stringify(id)] = null;\n      return yield this.os.delete(id);\n    }\n    *setState (state : State) : State {\n      return yield this.sv.put(state);\n    }\n    *getState (user : string) : State {\n      var state;\n      if ((state = yield this.sv.get(user)) != null){\n        return state;\n      } else {\n        return {\n          user: user,\n          clock: 0\n        };\n      }\n    }\n    *getStateVector () : StateVector {\n      var stateVector = [];\n      var cursorResult = this.sv.openCursor();\n      var cursor;\n      while ((cursor = yield cursorResult) != null) {\n        stateVector.push(cursor.value);\n        cursor.continue();\n      }\n      return stateVector;\n    }\n    *getStateSet () : StateSet {\n      var sv : StateVector = yield* this.getStateVector();\n      var ss : StateSet = {};\n      for (var state of sv){\n        ss[state.user] = state.clock;\n      }\n      return ss;\n    }\n\n    *getOperations (startSS : StateSet) {\n      if (startSS == null){\n        startSS = {};\n      }\n      var ops = [];\n\n      var endSV : StateVector = yield* this.getStateVector();\n      for (var endState of endSV) {\n        var user = endState.user;\n        var startPos = startSS[user] || 0;\n        var endPos = endState.clock;\n        var range = IDBKeyRange.bound([user, startPos], [user, endPos]);\n        var cursorResult = this.os.openCursor(range);\n        var cursor;\n        while ((cursor = yield cursorResult) != null) {\n          ops.push(cursor.value);\n          cursor.continue();\n        }\n      }\n      return ops;\n    }\n  }\n  class OperationStore extends AbstractOperationStore { //eslint-disable-line no-undef\n    namespace: string;\n    ready: Promise;\n    whenReadyListeners: Array<Function>;\n    constructor (y, opts) {\n      super(y);\n      if (opts == null) {\n        opts = {};\n      }\n      if (opts.namespace == null || typeof opts.namespace !== \"string\") {\n        throw new Error(\"IndexedDB: expect a string (opts.namespace)!\");\n      } else {\n        this.namespace = opts.namespace;\n      }\n      if (opts.idbVersion != null) {\n        this.idbVersion = opts.idbVersion;\n      } else {\n        this.idbVersion = 5;\n      }\n\n      this.transactionQueue = {\n        queue: [],\n        onRequest: null\n      };\n\n      var store = this;\n\n      var tGen = (function *transactionGen(){\n        store.db = yield indexedDB.open(opts.namespace, store.idbVersion);\n        var transactionQueue = store.transactionQueue;\n\n        var transaction = null;\n        var cont = true;\n        while (cont) {\n          var request = yield transactionQueue;\n          transaction = new Transaction(store);\n\n          yield* request.call(transaction, request);/*\n          while (transactionQueue.queue.length > 0) {\n            yield* transactionQueue.queue.shift().call(transaction);\n          }*/\n        }\n      })();\n\n      function handleTransactions(t){ //eslint-disable-line no-unused-vars\n        var request = t.value;\n        if (t.done){\n          return;\n        } else if (request.constructor === IDBRequest\n                   || request.constructor === IDBCursor ) {\n          request.onsuccess = function(){\n            handleTransactions(tGen.next(request.result));\n          };\n          request.onerror = function(err){\n            tGen.throw(err);\n          };\n        } else if (request === store.transactionQueue) {\n          if (request.queue.length > 0){\n            handleTransactions(tGen.next(request.queue.shift()));\n          } else {\n            request.onRequest = function(){\n              request.onRequest = null;\n              handleTransactions(tGen.next(request.queue.shift()));\n            };\n          }\n        } else if ( request.constructor === IDBOpenDBRequest ) {\n          request.onsuccess = function(event){\n            var db = event.target.result;\n            handleTransactions(tGen.next(db));\n          };\n          request.onerror = function(){\n            tGen.throw(\"Couldn't open IndexedDB database!\");\n          };\n          request.onupgradeneeded = function(event){\n            var db = event.target.result;\n            try {\n              db.createObjectStore(\"OperationStore\", {keyPath: \"id\"});\n              db.createObjectStore(\"StateVector\", {keyPath: \"user\"});\n            } catch (e) {\n                // console.log(\"Store already exists!\");\n            }\n          };\n        } else {\n          tGen.throw(\"You can not yield this type!\");\n        }\n      }\n      handleTransactions(tGen.next());\n\n    }\n    requestTransaction (makeGen : Function) {\n      this.transactionQueue.queue.push(makeGen);\n      if (this.transactionQueue.onRequest != null) {\n        this.transactionQueue.onRequest();\n      }\n    }\n    *removeDatabase () {\n      this.db.close();\n      yield indexedDB.deleteDatabase(this.namespace);\n    }\n  }\n  return OperationStore;\n})();\n","\nclass N {\n  // A created node is always red!\n  constructor (val) {\n    this.val = val;\n    this.color = true;\n    this._left = null;\n    this._right = null;\n    this._parent = null;\n    if (val.id === null) {\n      throw new Error(\"You must define id!\");\n    }\n  }\n  isRed () { return this.color; }\n  isBlack () { return !this.color; }\n  redden () { this.color = true; return this; }\n  blacken () { this.color = false; return this; }\n  get grandparent () {\n    return this.parent.parent;\n  }\n  get parent () {\n    return this._parent;\n  }\n  get sibling () {\n    return (this === this.parent.left) ?\n            this.parent.right : this.parent.left;\n  }\n  get left () {\n    return this._left;\n  }\n  get right () {\n    return this._right;\n  }\n  set left (n) {\n    if (n !== null) {\n      n._parent = this;\n    }\n    this._left = n;\n  }\n  set right (n) {\n    if (n !== null) {\n      n._parent = this;\n    }\n    this._right = n;\n  }\n  rotateLeft (tree) {\n    var parent = this.parent;\n    var newParent = this.right;\n    var newRight = this.right.left;\n    newParent.left = this;\n    this.right = newRight;\n    if (parent === null) {\n      tree.root = newParent;\n      newParent._parent = null;\n    } else if (parent.left === this) {\n      parent.left = newParent;\n    } else if (parent.right === this) {\n      parent.right = newParent;\n    } else {\n      throw new Error(\"The elements are wrongly connected!\");\n    }\n  }\n  next () {\n    if ( this.right !== null ) {\n      // search the most left node in the right tree\n      var o = this.right;\n      while (o.left !== null) {\n        o = o.left;\n      }\n      return o;\n    } else {\n      var p = this;\n      while (p.parent !== null && p !== p.parent.left) {\n        p = p.parent;\n      }\n      return p.parent;\n    }\n  }\n  rotateRight (tree) {\n    var parent = this.parent;\n    var newParent = this.left;\n    var newLeft = this.left.right;\n    newParent.right = this;\n    this.left = newLeft;\n    if (parent === null) {\n      tree.root = newParent;\n      newParent._parent = null;\n    } else if (parent.left === this) {\n      parent.left = newParent;\n    } else if (parent.right === this) {\n      parent.right = newParent;\n    } else {\n      throw new Error(\"The elements are wrongly connected!\");\n    }\n  }\n  getUncle () {\n    // we can assume that grandparent exists when this is called!\n    if (this.parent === this.parent.parent.left) {\n      return this.parent.parent.right;\n    } else {\n      return this.parent.parent.left;\n    }\n  }\n}\n\nclass RBTree { //eslint-disable-line no-unused-vars\n  constructor () {\n    this.root = null;\n  }\n  findNodeWithLowerBound (from) {\n    var o = this.root;\n    if (o === null) {\n      return false;\n    } else {\n      while (true) {\n        if ((from === null || from < o.val.id) && o.left !== null) {\n          // o is included in the bound\n          // try to find an element that is closer to the bound\n          o = o.left;\n        } else if (o.val.id < from) {\n          // o is not within the bound, maybe one of the right elements is..\n          if (o.right !== null) {\n            o = o.right;\n          } else {\n            // there is no right element. Search for the next bigger element,\n            // this should be within the bounds\n            return o.next();\n          }\n        } else {\n          return o;\n        }\n      }\n    }\n  }\n  iterate (from, to, f) {\n    var o = this.findNodeWithLowerBound(from);\n    while ( o !== null && (to === null || o.val.id <= to) ) {\n      f(o.val);\n      o = o.next();\n    }\n    return true;\n  }\n  find (id) {\n    return this.findNode(id).val;\n  }\n  findNode (id) {\n    var o = this.root;\n    if (o === null) {\n      return false;\n    } else {\n      while (true) {\n        if (o === null) {\n          return false;\n        }\n        if (id < o.val.id) {\n          o = o.left;\n        } else if (o.val.id < id) {\n          o = o.right;\n        } else {\n          return o;\n        }\n      }\n    }\n  }\n  delete (id) {\n    var d = this.findNode(id);\n    if (d.left !== null && d.right !== null) {\n      // switch d with the greates element in the left subtree.\n      // o should have at most one child.\n      var o = d.left;\n      // find\n      while (o.right !== null) {\n        o = o.right;\n      }\n      // switch\n      d.val = o.val;\n      d = o;\n    }\n    // d has at most one child\n    // let n be the node that replaces d\n    var isFakeChild;\n    var child = d.left || d.right;\n    if ( child === null) {\n      isFakeChild = true;\n      child = new N({id: 0});\n      child.blacken();\n      d.right = child;\n    } else {\n      isFakeChild = false;\n    }\n\n    if (d.parent === null) {\n      if (!isFakeChild) {\n        this.root = child;\n        child.blacken();\n        child._parent = null;\n      } else {\n        this.root = null;\n      }\n      return;\n    } else if (d.parent.left === d) {\n      d.parent.left = child;\n    } else if (d.parent.right === d) {\n      d.parent.right = child;\n    } else {\n      throw new Error(\"Impossible!\");\n    }\n    if ( d.isBlack() ) {\n      if ( child.isRed() ) {\n        child.blacken();\n      } else {\n        this._fixDelete(child);\n      }\n    }\n    this.root.blacken();\n    if (isFakeChild) {\n      if (child.parent.left === child) {\n        child.parent.left = null;\n      } else if (child.parent.right === child) {\n        child.parent.right = null;\n      } else {\n        throw new Error(\"Impossible #3\");\n      }\n    }\n  }\n  _fixDelete (n) {\n    function isBlack (node) {\n      return node !== null ? node.isBlack() : true;\n    }\n    function isRed(node) {\n      return node !== null ? node.isRed() : false;\n    }\n    if (n.parent === null) {\n      // this can only be called after the first iteration of fixDelete.\n      return;\n    }\n    // d was already replaced by the child\n    // d is not the root\n    // d and child are black\n    var sibling = n.sibling;\n    if (isRed(sibling)) {\n      // make sibling the grandfather\n      n.parent.redden();\n      sibling.blacken();\n      if (n === n.parent.left) {\n        n.parent.rotateLeft(this);\n      } else if (n === n.parent.right) {\n        n.parent.rotateRight(this);\n      } else {\n        throw new Error(\"Impossible #2\");\n      }\n      sibling = n.sibling;\n    }\n    // parent, sibling, and children of n are black\n    if ( n.parent.isBlack() &&\n         sibling.isBlack() &&\n         isBlack(sibling.left) &&\n         isBlack(sibling.right)\n    ) {\n      sibling.redden();\n      this._fixDelete(n.parent);\n    } else if ( n.parent.isRed() &&\n                sibling.isBlack() &&\n                isBlack(sibling.left) &&\n                isBlack(sibling.right)\n    ) {\n      sibling.redden();\n      n.parent.blacken();\n    } else {\n      if ( n === n.parent.left &&\n           sibling.isBlack() &&\n           isRed(sibling.left) &&\n           isBlack(sibling.right)\n      ) {\n        sibling.redden();\n        sibling.left.blacken();\n        sibling.rotateRight(this);\n        sibling = n.sibling;\n      } else if ( n === n.parent.right &&\n                  sibling.isBlack() &&\n                  isRed(sibling.right) &&\n                  isBlack(sibling.left)\n      ) {\n        sibling.redden();\n        sibling.right.blacken();\n        sibling.rotateLeft(this);\n        sibling = n.sibling;\n      }\n      sibling.color = n.parent.color;\n      n.parent.blacken();\n      if (n === n.parent.left) {\n        sibling.right.blacken();\n        n.parent.rotateLeft(this);\n      } else {\n        sibling.left.blacken();\n        n.parent.rotateRight(this);\n      }\n    }\n  }\n  add (v) {\n    var node = new N(v);\n    if (this.root !== null) {\n      var p = this.root; // p abbrev. parent\n      while (true) {\n        if (node.val.id < p.val.id) {\n          if (p.left === null) {\n            p.left = node;\n            break;\n          } else {\n            p = p.left;\n          }\n        } else if (p.val.id < node.val.id) {\n          if (p.right === null) {\n            p.right = node;\n            break;\n          } else {\n            p = p.right;\n          }\n        } else {\n          return false;\n        }\n      }\n      this._fixInsert(node);\n    } else {\n      this.root = node;\n    }\n    this.root.blacken();\n  }\n  _fixInsert (n) {\n    if (n.parent === null) {\n      n.blacken();\n      return;\n    } else if (n.parent.isBlack()) {\n      return;\n    }\n    var uncle = n.getUncle();\n    if (uncle !== null && uncle.isRed()) {\n      // Note: parent: red, uncle: red\n      n.parent.blacken();\n      uncle.blacken();\n      n.grandparent.redden();\n      this._fixInsert(n.grandparent);\n    } else {\n      // Note: parent: red, uncle: black or null\n      // Now we transform the tree in such a way that\n      // either of these holds:\n      //   1) grandparent.left.isRed\n      //     and grandparent.left.left.isRed\n      //   2) grandparent.right.isRed\n      //     and grandparent.right.right.isRed\n      if (n === n.parent.right\n        && n.parent === n.grandparent.left) {\n          n.parent.rotateLeft(this);\n          // Since we rotated and want to use the previous\n          // cases, we need to set n in such a way that\n          // n.parent.isRed again\n          n = n.left;\n      } else if (n === n.parent.left\n        && n.parent === n.grandparent.right) {\n          n.parent.rotateRight(this);\n          // see above\n          n = n.right;\n      }\n      // Case 1) or 2) hold from here on.\n      // Now traverse grandparent, make parent a black node\n      // on the highest level which holds two red nodes.\n      n.parent.blacken();\n      n.grandparent.redden();\n      if (n === n.parent.left) {\n        // Case 1\n        n.grandparent.rotateRight(this);\n      } else {\n        // Case 2\n        n.grandparent.rotateLeft(this);\n      }\n    }\n  }\n}\n","\n\n(function(){\n\n  class List {\n    constructor (_model) {\n      this._model = _model;\n    }\n    *val (pos) {\n      var t = yield \"transaction\";\n      var model = yield* t.getOperation(this._model);\n      if (pos != null) {\n        var o = yield* Y.Struct.List.ref.call(t, model, pos);\n        return o ? o.content : null;\n      } else {\n        return yield* Y.Struct.List.map.call(t, model, function(c){return c; });\n      }\n    }\n    *insert (pos, contents) {\n      if (typeof pos !== \"number\") {\n        throw new Error(\"pos must be a number!\");\n      }\n      if (!(contents instanceof Array)) {\n        throw new Error(\"contents must be an Array of objects!\");\n      }\n      var t = yield \"transaction\";\n      var model = yield* t.getOperation(this._model);\n      yield* Y.Struct.List.insert.call(t, model, pos, contents);\n    }\n    *delete (pos) {\n      if (typeof pos !== \"number\") {\n        throw new Error(\"pos must be a number!\");\n      }\n      var t = yield \"transaction\";\n      var model = yield* t.getOperation(this._model);\n      yield* Y.Struct.List.delete.call(t, model, pos);\n    }\n    _changed () {\n    }\n  }\n\n  Y.List = function* YList(){\n    var t = yield \"transaction\";\n    var model = yield* Y.Struct.List.create.call(t, {type: \"List\"});\n    return t.createType(model);\n  };\n  Y.List.Create = List;\n})();\n","\n(function(){\n  class Map {\n    constructor (_model) {\n      this._model = _model;\n    }\n    *val () {\n      var t = yield \"transaction\";\n      var model = yield* t.getOperation(this._model);\n      if (arguments.length === 0) {\n        var res = {};\n        for (var key in model.map) {\n          var v = yield* Y.Struct.Map.get.call(t, model, key);\n          if (v != null) {\n            res[key] = v;\n          }\n        }\n        return res;\n      } else if (arguments.length === 1) {\n        return yield* Y.Struct.Map.get.call(t, model, arguments[0]);\n      } else if (arguments.length === 2) {\n        return yield* Y.Struct.Map.set.call(t, model, arguments[0], arguments[1]);\n      } else {\n        throw new Error(\"Implement this case!\");\n      }\n    }\n    *delete (key) {\n      var t = yield \"transaction\";\n      var model = yield* t.getOperation(this._model);\n      yield* Y.Struct.Map.delete.call(t, model, key);\n    }\n    _changed () {\n    }\n  }\n\n  Y.Map = function* YMap(){\n    var t = yield \"transaction\";\n    if (this instanceof Y.AbstractOperationStore) {\n      var model = yield* Y.Struct.map.create.call(t, {type: \"Map\"});\n      return t.createType(model);\n    } else {\n      throw new Error(\"Don't use `new` to create this type!\");\n    }\n  };\n  Y.Map.Create = Map;\n})();\n","\nclass AbstractConnector { //eslint-disable-line no-unused-vars\n  /*\n    opts\n     .role : String Role of this client (\"master\" or \"slave\")\n     .userId : String that uniquely defines the user.\n  */\n  constructor (y, opts) {\n    this.y = y;\n    if (opts == null){\n      opts = {};\n    }\n    if (opts.role == null || opts.role === \"master\") {\n      this.role = \"master\";\n    } else if (opts.role === \"slave\") {\n      this.role = \"slave\";\n    } else {\n      throw new Error(\"Role must be either 'master' or 'slave'!\");\n    }\n    this.role = opts.role;\n    this.connections = {};\n    this.userEventListeners = [];\n    this.whenSyncedListeners = [];\n    this.currentSyncTarget = null;\n    this.syncingClients = [];\n    this.forwardToSyncingClients = (opts.forwardToSyncingClients === false) ? false : true;\n    this.debug = opts.debug ? true : false;\n  }\n  setUserId (userId) {\n    this.userId = userId;\n    this.y.db.setUserId(userId);\n  }\n  onUserEvent (f) {\n    this.userEventListeners.push(f);\n  }\n  userLeft (user : string) {\n    delete this.connections[user];\n    if (user === this.currentSyncTarget){\n      this.currentSyncTarget = null;\n      this.findNextSyncTarget();\n    }\n    for (var f of this.userEventListeners){\n      f({\n        action: \"userLeft\",\n        user: user\n      });\n    }\n  }\n  userJoined (user, role) {\n    if(role == null){\n      throw new Error(\"You must specify the role of the joined user!\");\n    }\n    if (this.connections[user] != null) {\n      throw new Error(\"This user already joined!\");\n    }\n    this.connections[user] = {\n      isSynced: false,\n      role: role\n    };\n    for (var f of this.userEventListeners) {\n      f({\n        action: \"userJoined\",\n        user: user,\n        role: role\n      });\n    }\n    if (this.currentSyncTarget == null) {\n      this.findNextSyncTarget();\n    }\n  }\n  // Execute a function _when_ we are connected.\n  // If not connected, wait until connected\n  whenSynced (f) {\n    if (this.isSynced === true) {\n      f();\n    } else {\n      this.whenSyncedListeners.push(f);\n    }\n  }\n  // returns false, if there is no sync target\n  // true otherwise\n  findNextSyncTarget () {\n    if (this.currentSyncTarget != null && this.connections[this.currentSyncTarget].isSynced === false) {\n      throw new Error(\"The current sync has not finished!\");\n    }\n\n    var syncUser = null;\n    for (var uid in this.connections) {\n      syncUser = this.connections[uid];\n      if (!syncUser.isSynced) {\n        break;\n      }\n    }\n    if (syncUser != null){\n      var conn = this;\n      this.y.db.requestTransaction(function*(){\n        conn.currentSyncTarget = uid;\n        conn.send(uid, {\n          type: \"sync step 1\",\n          stateVector: yield* this.getStateVector()\n        });\n      });\n    }\n    // set the state to synced!\n    if (!this.isSynced) {\n      this.isSynced = true;\n      for (var f of this.whenSyncedListeners) {\n        f();\n      }\n      this.whenSyncedListeners = null;\n    }\n    return false;\n  }\n  // You received a raw message, and you know that it is intended for to Yjs. Then call this function.\n  receiveMessage (sender, m){\n    if (this.debug) {\n      console.log(`${sender} -> ${this.userId}: ${JSON.stringify(m)}`); //eslint-disable-line\n    }\n    if (m.type === \"sync step 1\") {\n      // TODO: make transaction, stream the ops\n      let conn = this;\n      this.y.db.requestTransaction(function*(){\n        var ops = yield* this.getOperations(m.stateVector);\n        var sv = yield* this.getStateVector();\n        conn.send(sender, {\n          type: \"sync step 2\",\n          os: ops,\n          stateVector: sv\n        });\n        if (this.forwardToSyncingClients) {\n          conn.syncingClients.push(sender);\n          setTimeout(function(){\n            conn.syncingClients = conn.syncingClients.filter(function(cli){\n              return cli !== sender;\n            });\n            conn.send(sender, {\n              type: \"sync done\"\n            });\n          }, conn.syncingClientDuration);\n        }\n      });\n    } else if (m.type === \"sync step 2\") {\n      this.y.db.apply(m.os);\n      let conn = this;\n      this.y.db.requestTransaction(function*(){\n        var ops = yield* this.getOperations(m.stateVector);\n        if (ops.length > 0) {\n          conn.broadcast({\n            type: \"update\",\n            ops: ops\n          });\n        }\n      });\n    } else if (m.type === \"sync done\") {\n      this.connections[sender].isSynced = true;\n      this.findNextSyncTarget();\n    } else if (m.type === \"update\") {\n      if (this.forwardToSyncingClients) {\n        for (var client of this.syncingClients) {\n          this.send(client, m);\n        }\n      }\n      this.y.db.apply(m.ops);\n    }\n  }\n  // Currently, the HB encodes operations as JSON. For the moment I want to keep it\n  // that way. Maybe we support encoding in the HB as XML in the future, but for now I don't want\n  // too much overhead. Y is very likely to get changed a lot in the future\n  //\n  // Because we don't want to encode JSON as string (with character escaping, wich makes it pretty much unreadable)\n  // we encode the JSON as XML.\n  //\n  // When the HB support encoding as XML, the format should look pretty much like this.\n  //\n  // does not support primitive values as array elements\n  // expects an ltx (less than xml) object\n  parseMessageFromXml (m) {\n    function parseArray (node) {\n      for (var n of node.children){\n        if (n.getAttribute(\"isArray\") === \"true\") {\n          return parseArray(n);\n        } else {\n          return parseObject(n);\n        }\n      }\n    }\n    function parseObject (node) {\n      var json = {};\n      for (var attrName in node.attrs) {\n        var value = node.attrs[attrName];\n        var int = parseInt(value);\n        if (isNaN(int) || (\"\" + int) !== value){\n          json[attrName] = value;\n        } else {\n          json[attrName] = int;\n        }\n      }\n      for (var n in node.children){\n        var name = n.name;\n        if (n.getAttribute(\"isArray\") === \"true\") {\n          json[name] = parseArray(n);\n        } else {\n          json[name] = parseObject(n);\n        }\n      }\n      return json;\n    }\n    parseObject(m);\n  }\n  // encode message in xml\n  // we use string because Strophe only accepts an \"xml-string\"..\n  // So {a:4,b:{c:5}} will look like\n  // <y a=\"4\">\n  //   <b c=\"5\"></b>\n  // </y>\n  // m - ltx element\n  // json - Object\n  encodeMessageToXml (msg, obj) {\n    // attributes is optional\n    function encodeObject (m, json) {\n      for (var name in json) {\n        var value = json[name];\n        if (name == null) {\n          // nop\n        } else if (value.constructor === Object) {\n          encodeObject(m.c(name), value);\n        } else if (value.constructor === Array) {\n          encodeArray(m.c(name), value);\n        } else {\n          m.setAttribute(name, value);\n        }\n      }\n    }\n    function encodeArray (m, array) {\n      m.setAttribute(\"isArray\", \"true\");\n      for (var e of array) {\n        if (e.constructor === Object) {\n          encodeObject(m.c(\"array-element\"), e);\n        } else {\n          encodeArray(m.c(\"array-element\"), e);\n        }\n      }\n    }\n    if (obj.constructor === Object) {\n      encodeObject(msg.c(\"y\", { xmlns: \"http://y.ninja/connector-stanza\" }), obj);\n    } else if (obj.constructor === Array) {\n      encodeArray(msg.c(\"y\", { xmlns: \"http://y.ninja/connector-stanza\" }), obj);\n    } else {\n      throw new Error(\"I can't encode this json!\");\n    }\n  }\n}\n","/* @flow */\nclass AbstractTransaction { //eslint-disable-line no-unused-vars\n  constructor (store : OperationStore) {\n    this.store = store;\n  }\n  *getType (id) {\n    var sid = JSON.stringify(id);\n    var t = this.store.initializedTypes[sid];\n    if (t == null) {\n      var op = yield* this.getOperation(id);\n      if (op != null) {\n        t = new Y[op.type].Create(op.id);\n        this.store.initializedTypes[sid] = t;\n      }\n    }\n    return t;\n  }\n  createType (model) {\n    var sid = JSON.stringify(model.id);\n    var t = new Y[model.type].Create(model.id);\n    this.store.initializedTypes[sid] = t;\n    return t;\n  }\n  // returns false if operation is not expected.\n  *addOperation (op) {\n    var state = yield* this.getState(op.id[0]);\n    if (op.id[1] === state.clock){\n      state.clock++;\n      yield* this.setState(state);\n      this.os.add(op);\n      this.store.operationAdded(op);\n      return true;\n    } else if (op.id[1] < state.clock) {\n      return false;\n    } else {\n      throw new Error(\"Operations must arrive in order!\");\n    }\n  }\n}\n\ntype Listener = {\n  f : GeneratorFunction, // is called when all operations are available\n  missing : number // number of operations that are missing\n}\n\ntype Id = [string, number];\n\nclass AbstractOperationStore { //eslint-disable-line no-unused-vars\n  constructor (y) {\n    this.y = y;\n    // E.g. this.listenersById[id] : Array<Listener>\n    this.listenersById = {};\n    // Execute the next time a transaction is requested\n    this.listenersByIdExecuteNow = [];\n    // A transaction is requested\n    this.listenersByIdRequestPending = false;\n    /* To make things more clear, the following naming conventions:\n       * ls : we put this.listenersById on ls\n       * l : Array<Listener>\n       * id : Id (can't use as property name)\n       * sid : String (converted from id via JSON.stringify\n                       so we can use it as a property name)\n\n      Always remember to first overwrite\n      a property before you iterate over it!\n    */\n    // TODO: Use ES7 Weak Maps. This way types that are no longer user,\n    // wont be kept in memory.\n    this.initializedTypes = {};\n  }\n  setUserId (userId) {\n    this.userId = userId;\n  }\n  apply (ops) {\n    for (var key in ops) {\n      var o = ops[key];\n      var required = Y.Struct[o.struct].requiredOps(o);\n      this.whenOperationsExist(required, o);\n    }\n  }\n  // op is executed as soon as every operation requested is available.\n  // Note that Transaction can (and should) buffer requests.\n  whenOperationsExist (ids : Array<Id>, op : Operation) {\n    if (ids.length > 0) {\n      let listener : Listener = {\n        op: op,\n        missing: ids.length\n      };\n\n      for (let key in ids) {\n        let id = ids[key];\n        let sid = JSON.stringify(id);\n        let l = this.listenersById[sid];\n        if (l == null){\n          l = [];\n          this.listenersById[sid] = l;\n        }\n        l.push(listener);\n      }\n    } else {\n      this.listenersByIdExecuteNow.push({\n        op: op\n      });\n    }\n\n    if (this.listenersByIdRequestPending){\n      return;\n    }\n\n    this.listenersByIdRequestPending = true;\n    var store = this;\n\n    this.requestTransaction(function*(){\n      var exeNow = store.listenersByIdExecuteNow;\n      store.listenersByIdExecuteNow = [];\n\n      var ls = store.listenersById;\n      store.listenersById = {};\n\n      store.listenersByIdRequestPending = false;\n\n      for (let key in exeNow) {\n        let o = exeNow[key].op;\n        yield* Struct[o.struct].execute.call(this, o);\n      }\n\n      for (var sid in ls){\n        var l = ls[sid];\n        var id = JSON.parse(sid);\n        if ((yield* this.getOperation(id)) == null){\n          store.listenersById[sid] = l;\n        } else {\n          for (let key in l) {\n            let listener = l[key];\n            let o = listener.op;\n            if (--listener.missing === 0){\n              yield* Struct[o.struct].execute.call(this, o);\n            }\n          }\n        }\n      }\n    });\n  }\n  // called by a transaction when an operation is added\n  operationAdded (op) {\n    var sid = JSON.stringify(op.id);\n    var l = this.listenersById[sid];\n    delete this.listenersById[sid];\n\n    // notify whenOperation listeners (by id)\n    if (l != null) {\n      for (var key in l){\n        var listener = l[key];\n        if (--listener.missing === 0){\n          this.whenOperationsExist([], listener.op);\n        }\n      }\n    }\n    // notify parent, if it has been initialized as a custom type\n    var t = this.initializedTypes[JSON.stringify(op.parent)];\n    if (t != null) {\n      t._changed(op);\n    }\n  }\n  removeParentListener (id, f) {\n    var ls = this.parentListeners[id];\n    if (ls != null) {\n      this.parentListeners[id] = ls.filter(function(g){\n        return (f !== g);\n      });\n    }\n  }\n  addParentListener (id, f) {\n    var ls = this.parentListeners[JSON.stringify(id)];\n    if (ls == null) {\n      ls = [];\n      this.parentListeners[JSON.stringify(id)] = ls;\n    }\n    ls.push(f);\n  }\n}\n"],"sourceRoot":"/source/"}
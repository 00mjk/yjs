{"version":3,"sources":["Engine.coffee"],"names":[],"mappings":"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","file":"Engine.js","sourceRoot":"/source/","sourcesContent":["\r\n#\r\n# @nodoc\r\n# The Engine handles how and in which order to execute operations and add operations to the HistoryBuffer.\r\n#\r\nclass Engine\r\n\r\n  #\r\n  # @param {HistoryBuffer} HB\r\n  # @param {Array} parser Defines how to parse encoded messages.\r\n  #\r\n  constructor: (@HB, @parser)->\r\n    @unprocessed_ops = []\r\n\r\n  #\r\n  # Parses an operatio from the json format. It uses the specified parser in your OperationType module.\r\n  #\r\n  parseOperation: (json)->\r\n    typeParser = @parser[json.type]\r\n    if typeParser?\r\n      typeParser json\r\n    else\r\n      throw new Error \"You forgot to specify a parser for type #{json.type}. The message is #{JSON.stringify json}.\"\r\n\r\n  #\r\n  # Apply a set of operations. E.g. the operations you received from another users HB._encode().\r\n  # @note You must not use this method when you already have ops in your HB!\r\n  #\r\n  applyOpsBundle: (ops_json)->\r\n    ops = []\r\n    for o in ops_json\r\n      ops.push @parseOperation o\r\n    for o in ops\r\n      @HB.addOperation o\r\n    for o in ops\r\n      if not o.execute()\r\n        @unprocessed_ops.push o\r\n    @tryUnprocessed()\r\n\r\n  #\r\n  # Same as applyOps but operations that are already in the HB are not applied.\r\n  # @see Engine.applyOps\r\n  #\r\n  applyOpsCheckDouble: (ops_json)->\r\n    for o in ops_json\r\n      if not @HB.getOperation(o.uid)?\r\n        @applyOp o\r\n\r\n  #\r\n  # Apply a set of operations. (Helper for using applyOp on Arrays)\r\n  # @see Engine.applyOp\r\n  applyOps: (ops_json)->\r\n    for o in ops_json\r\n      @applyOp o\r\n\r\n  #\r\n  # Apply an operation that you received from another peer.\r\n  #\r\n  applyOp: (op_json)->\r\n    # $parse_and_execute will return false if $o_json was parsed and executed, otherwise the parsed operadion\r\n    o = @parseOperation op_json\r\n    @HB.addToCounter o\r\n    # @HB.addOperation o\r\n    if not o.execute()\r\n      @unprocessed_ops.push o\r\n    else\r\n      @HB.addOperation o\r\n    @tryUnprocessed()\r\n\r\n  #\r\n  # Call this method when you applied a new operation.\r\n  # It checks if operations that were previously not executable are now executable.\r\n  #\r\n  tryUnprocessed: ()->\r\n    while true\r\n      old_length = @unprocessed_ops.length\r\n      unprocessed = []\r\n      for op in @unprocessed_ops\r\n        if not op.execute()\r\n          unprocessed.push op\r\n        else\r\n          @HB.addOperation op\r\n      @unprocessed_ops = unprocessed\r\n      if @unprocessed_ops.length is old_length\r\n        break\r\n\r\n\r\n\r\n\r\nmodule.exports = Engine\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}
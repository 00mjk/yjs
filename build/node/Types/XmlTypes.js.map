{"version":3,"sources":["Types/XmlTypes.coffee"],"names":[],"mappings":"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","file":"Types/XmlTypes.js","sourceRoot":"/source/","sourcesContent":["\njson_types_uninitialized = require \"./JsonTypes\"\n\n# some dom implementations may call another dom.method that simulates the behavior of another.\n# For example xml.insertChild(dom) , wich inserts an element at the end, and xml.insertAfter(dom,null) wich does the same\n# But yatta's proxy may be called only once!\nproxy_token = false\nElement?.prototype._proxy = (f_name, f)->\n  old_f = @[f_name]\n  if old_f?\n    @[f_name] = ()->\n      if not proxy_token\n        proxy_token = true\n        old_f.apply this, arguments\n        f.apply this, arguments\n        proxy_token = false\n      else\n        old_f.apply this, arguments\n  #else\n  #  @[f_name] = f\n\n\nmodule.exports = (HB)->\n  json_types = json_types_uninitialized HB\n  types = json_types.types\n  parser = json_types.parser\n\n  #\n  # Manages XML types\n  # Not supported:\n  # * Attribute nodes\n  # * Real replace of child elements (to much overhead). Currently, the new element is inserted after the 'replaced' element, and then it is deleted.\n  # *\n  class XmlType extends types.Insert\n\n    constructor: (uid, @tagname, attributes, elements, @xml)->\n      ### In case you make this instanceof Insert again\n      if prev? and (not next?) and prev.type?\n        # adjust what you actually mean. you want to insert after prev, then\n        # next is not defined. but we only insert after non-deleted elements.\n        # This is also handled in TextInsert.\n        while prev.isDeleted()\n          prev = prev.prev_cl\n        next = prev.next_cl\n      ###\n\n      super()\n\n      if attributes? and elements?\n        @saveOperation 'attributes', attributes\n        @saveOperation 'elements', elements\n      else if (not attributes?) and (not elements?)\n        @attributes = new types.JsonType()\n        HB.addOperation(@attributes).execute()\n        @elements = new types.WordType()\n        @elements.parent = @\n        HB.addOperation(@elements).execute()\n      else\n        throw new Error \"Either define attribute and elements both, or none of them\"\n\n      if @xml?\n        @tagname = @xml.tagName\n        for i in [0...@xml.attributes.length]\n          attr = xml.attributes[i]\n          @attributes.val(attr.name, attr.value)\n        for n in @xml.childNodes\n          if n.nodeType is n.TEXT_NODE\n            word = new types.WordType()\n            HB.addOperation(word).execute()\n            word.push n.textContent\n            @elements.push word\n          else if n.nodeType is n.ELEMENT_NODE\n            element = new XmlType undefined, undefined, undefined, undefined, n\n            HB.addOperation(element).execute()\n            @elements.push element\n          else\n            throw new Error \"I don't know Node-type #{n.nodeType}!!\"\n        @setXmlProxy()\n      undefined\n\n    #\n    # Identifies this class.\n    # Use it in order to check whether this is an xml-type or something else.\n    #\n    type: \"XmlType\"\n\n    applyDelete: ()->\n      @attributes.applyDelete()\n      @elements.applyDelete()\n      super()\n\n    cleanup: ()->\n      super()\n\n    setXmlProxy: ()->\n      @xml._yatta = @\n      that = @\n      insertBefore = (insertedNode, adjacentNode)->\n        next = adjacentNode?._yatta\n        prev = null\n        if next?\n          prev = next.prev_cl\n        else\n          prev = @_yatta.elements.end.prev_cl\n        element = new XmlType undefined, undefined, undefined, undefined, insertedNode\n        HB.addOperation(element).execute()\n        that.elements.insertAfter prev, element\n      @xml._proxy 'insertBefore', insertBefore\n      @xml._proxy 'appendChild', insertBefore\n      @xml._proxy 'removeAttribute', (name)->\n        that.attributes.val(name, undefined)\n      removeChild = (node)->\n        elem = that.elements.beginning.next_cl\n        while elem.type isnt 'Delimiter' and elem.content isnt node._yatta\n          elem = elem.next_cl\n        if elem.type is 'Delimiter'\n          throw new Error \"You are only allowed to delete existing (direct) child elements!\"\n        d = new types.Delete undefined, elem\n        HB.addOperation(d).execute()\n      @xml._proxy 'removeChild', removeChild\n      @xml._proxy 'replaceChild', (insertedNode, replacedNode)->\n        insertBefore.call this, replacedNode, insertedNode\n        removeChild.call this, replacedNode\n\n\n    val: (enforce = false)->\n      if document?\n        if (not @xml?) or enforce\n          @xml = document.createElement @tagname\n\n          attr = @attributes.val()\n          for attr_name, value of attr\n            if value?\n              a = document.createAttribute attr_name\n              a.value = value\n              @xml.setAttributeNode a\n\n          e = @elements.beginning.next_cl\n          while e.type isnt \"Delimiter\"\n            n = e.content\n            if not e.isDeleted()\n              if n.type is \"XmlType\"\n                @xml.appendChild n.val(enforce)\n              else if n.type is \"WordType\"\n                text_node = document.createTextNode n.val()\n                @xml.appendChild text_node\n              else\n                throw new Error \"Internal structure cannot be transformed to dom\"\n            e = e.next_cl\n        @setXmlProxy()\n        @xml\n\n\n\n    #\n    # If possible set the replace manager in the content.\n    # @see WordType.setReplaceManager\n    #\n    execute: ()->\n      super\n    ###\n      if not @validateSavedOperations()\n        return false\n      else\n\n        return true\n    ###\n\n    #\n    # Get the parent of this JsonType.\n    # @return {XmlType}\n    #\n    getParent: ()->\n      @parent\n\n    #\n    # @private\n    #\n    # Convert all relevant information of this operation to the json-format.\n    # This result can be send to other clients.\n    #\n    _encode: ()->\n      json =\n        {\n          'type' : @type\n          'attributes' : @attributes.getUid()\n          'elements' : @elements.getUid()\n          'tagname' : @tagname\n          'uid' : @getUid()\n\n        }\n      json\n\n  parser['XmlType'] = (json)->\n    {\n      'uid' : uid\n      'attributes' : attributes\n      'elements' : elements\n      'tagname' : tagname\n    } = json\n\n    new XmlType uid, tagname, attributes, elements, undefined\n\n\n  types['XmlType'] = XmlType\n\n  json_types\n"]}
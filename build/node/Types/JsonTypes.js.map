{"version":3,"sources":["Types/JsonTypes.coffee"],"names":[],"mappings":"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","file":"Types/JsonTypes.js","sourceRoot":"/source/","sourcesContent":["text_types_uninitialized = require \"./TextTypes\"\n\nmodule.exports = (HB)->\n  text_types = text_types_uninitialized HB\n  types = text_types.types\n  parser = text_types.parser\n\n  createJsonTypeWrapper = (_jsonType)->\n\n    #\n    # @note EXPERIMENTAL\n    #\n    # A JsonTypeWrapper was intended to be a convenient wrapper for the JsonType.\n    # But it can make things more difficult than they are.\n    # @see JsonType\n    #\n    # @example create a JsonTypeWrapper\n    #   # You get a JsonTypeWrapper from a JsonType by calling\n    #   w = yatta.value\n    #\n    # It creates Javascripts -getter and -setter methods for each property that JsonType maintains.\n    # @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n    #\n    # @example Getter Example\n    #   # you can access the x property of yatta by calling\n    #   w.x\n    #   # instead of\n    #   yatta.val('x')\n    #\n    # @note You can only overwrite existing values! Setting a new property won't have any effect!\n    #\n    # @example Setter Example\n    #   # you can set an existing x property of yatta by calling\n    #   w.x = \"text\"\n    #   # instead of\n    #   yatta.val('x', \"text\")\n    #\n    # In order to set a new property you have to overwrite an existing property.\n    # Therefore the JsonTypeWrapper supports a special feature that should make things more convenient\n    # (we can argue about that, use the JsonType if you don't like it ;).\n    # If you overwrite an object property of the JsonTypeWrapper with a new object, it will result in a merged version of the objects.\n    # Let `yatta.value.p` the property that is to be overwritten and o the new value. E.g. `yatta.value.p = o`\n    # * The result has all properties of o\n    # * The result has all properties of w.p if they don't occur under the same property-name in o.\n    #\n    # @example Conflict Example\n    #   yatta.value = {a : \"string\"}\n    #   w = yatta.value\n    #   console.log(w) # {a : \"string\"}\n    #   w.a = {a : {b : \"string\"}}\n    #   console.log(w) # {a : {b : \"String\"}}\n    #   w.a = {a : {c : 4}}\n    #   console.log(w) # {a : {b : \"String\", c : 4}}\n    #\n    # @example Common Pitfalls\n    #   w = yatta.value\n    #   # Setting a new property\n    #   w.newProperty = \"Awesome\"\n    #   console.log(w.newProperty == \"Awesome\") # false, w.newProperty is undefined\n    #   # overwrite the w object\n    #   w = {newProperty : \"Awesome\"}\n    #   console.log(w.newProperty == \"Awesome\") # true!, but ..\n    #   console.log(yatta.value.newProperty == \"Awesome\") # false, you are only allowed to set properties!\n    #   # The solution\n    #   yatta.value = {newProperty : \"Awesome\"}\n    #   console.log(w.newProperty == \"Awesome\") # true!\n    #\n    class JsonTypeWrapper\n\n      #\n      # @param {JsonType} jsonType Instance of the JsonType that this class wrappes.\n      #\n      constructor: (jsonType)->\n        for name, obj of jsonType.map\n          do (name, obj)->\n            Object.defineProperty JsonTypeWrapper.prototype, name,\n              get : ->\n                x = obj.val()\n                if x instanceof JsonType\n                  createJsonTypeWrapper x\n                else if x instanceof types.ImmutableObject\n                  x.val()\n                else\n                  x\n              set : (o)->\n                overwrite = jsonType.val(name)\n                if o.constructor is {}.constructor and overwrite instanceof types.Operation\n                  for o_name,o_obj of o\n                    overwrite.val(o_name, o_obj, 'immutable')\n                else\n                  jsonType.val(name, o, 'immutable')\n              enumerable: true\n              configurable: false\n    new JsonTypeWrapper _jsonType\n\n  #\n  # Manages Object-like values.\n  #\n  class JsonType extends types.MapManager\n\n    #\n    # @param {Object} uid A unique identifier. If uid is undefined, a new uid will be created.\n    # @param {Object} initial_value Create this operation with an initial value.\n    # @param {String|Boolean} Whether the initial_value should be created as mutable. (Optional - see setMutableDefault)\n    #\n    constructor: (uid, initial_value, mutable)->\n      super uid\n      if initial_value?\n        if typeof initial_value isnt \"object\"\n          throw new Error \"The initial value of JsonTypes must be of type Object! (current type: #{typeof initial_value})\"\n        for name,o of initial_value\n          @val name, o, mutable\n\n    #\n    # Identifies this class.\n    # Use it to check whether this is a json-type or something else.\n    #\n    # @example\n    #   var x = yatta.val('unknown')\n    #   if (x.type === \"JsonType\") {\n    #     console.log JSON.stringify(x.toJson())\n    #   }\n    #\n    type: \"JsonType\"\n\n    applyDelete: ()->\n      super()\n\n    cleanup: ()->\n      super()\n    #\n    # Transform this to a Json and loose all the sharing-abilities (the new object will be a deep clone)!\n    # @return {Json}\n    #\n    toJson: ()->\n      val = @val()\n      json = {}\n      for name, o of val\n        if o is null\n          json[name] = o\n        else if o.constructor is {}.constructor\n          json[name] = @val(name).toJson()\n        else if o instanceof types.Operation\n          while o instanceof types.Operation\n            o = o.val()\n          json[name] = o\n        else\n          json[name] = o\n      json\n\n    #\n    # @see WordType.setReplaceManager\n    # Sets the parent of this JsonType object.\n    #\n    setReplaceManager: (replace_manager)->\n      @replace_manager = replace_manager\n      @on ['change','addProperty'], ()->\n        if replace_manager.parent?\n          replace_manager.parent.forwardEvent this, arguments...\n\n    #\n    # Get the parent of this JsonType.\n    # @return {JsonType}\n    #\n    getParent: ()->\n      @replace_manager.parent\n\n    #\n    # Whether the default is 'mutable' (true) or 'immutable' (false)\n    #\n    mutable_default:\n      true\n\n    #\n    # Set if the default is 'mutable' or 'immutable'\n    # @param {String|Boolean} mutable Set either 'mutable' / true or 'immutable' / false\n    setMutableDefault: (mutable)->\n      if mutable is true or mutable is 'mutable'\n        JsonType.prototype.mutable_default = true\n      else if mutable is false or mutable is 'immutable'\n        JsonType.prototype.mutable_default = false\n      else\n        throw new Error 'Set mutable either \"mutable\" or \"immutable\"!'\n      'OK'\n\n    #\n    # @overload val()\n    #   Get this as a Json object.\n    #   @return [Json]\n    #\n    # @overload val(name)\n    #   Get value of a property.\n    #   @param {String} name Name of the object property.\n    #   @return [JsonType|WordType|String|Object] Depending on the value of the property. If mutable it will return a Operation-type object, if immutable it will return String/Object.\n    #\n    # @overload val(name, content)\n    #   Set a new property.\n    #   @param {String} name Name of the object property.\n    #   @param {Object|String} content Content of the object property.\n    #   @return [JsonType] This object. (supports chaining)\n    #\n    val: (name, content, mutable)->\n      if typeof name is 'object'\n        # Special case. First argument is an object. Then the second arg is mutable.\n        # Keep that in mind when reading the following..\n        json = new JsonType undefined, name, content\n        HB.addOperation(json).execute()\n        @replace_manager.replace json\n        @\n      else if name? and (content? or content is null)\n        if mutable?\n          if mutable is true or mutable is 'mutable'\n            mutable = true\n          else\n            mutable = false\n        else\n          mutable = @mutable_default\n        if typeof content is 'function'\n          @ # Just do nothing\n        else if content is null or (((not mutable) or typeof content is 'number') and content.constructor isnt Object)\n          obj = HB.addOperation(new types.ImmutableObject undefined, content).execute()\n          super name, obj\n        else\n          if typeof content is 'string'\n            word = HB.addOperation(new types.WordType undefined).execute()\n            word.insertText 0, content\n            super name, word\n          else if content.constructor is Object\n            json = HB.addOperation(new JsonType undefined, content, mutable).execute()\n            super name, json\n          else\n            throw new Error \"You must not set #{typeof content}-types in collaborative Json-objects!\"\n      else\n        super name, content\n\n    Object.defineProperty JsonType.prototype, 'value',\n      get : -> createJsonTypeWrapper @\n      set : (o)->\n        if o.constructor is {}.constructor\n          for o_name,o_obj of o\n            @val(o_name, o_obj, 'immutable')\n        else\n          throw new Error \"You must only set Object values!\"\n\n    #\n    # @private\n    #\n    _encode: ()->\n      {\n        'type' : \"JsonType\"\n        'uid' : @getUid()\n      }\n\n  parser['JsonType'] = (json)->\n    {\n      'uid' : uid\n    } = json\n    new JsonType uid\n\n\n\n\n  types['JsonType'] = JsonType\n\n  text_types\n\n\n"]}
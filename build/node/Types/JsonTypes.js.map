{"version":3,"file":"Types/JsonTypes.js","sources":["Types/JsonTypes.coffee"],"names":[],"mappings":"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","sourcesContent":["text_types_uninitialized = require \"./TextTypes\"\n\nmodule.exports = (HB)->\n  text_types = text_types_uninitialized HB\n  types = text_types.types\n  parser = text_types.parser\n\n  createJsonWrapper = (_jsonType)->\n\n    #\n    # A JsonWrapper was intended to be a convenient wrapper for the JsonType.\n    # But it can make things more difficult than they are.\n    # @see JsonType\n    #\n    # @example create a JsonWrapper\n    #   # You get a JsonWrapper from a JsonType by calling\n    #   w = yatta.value\n    #\n    # It creates Javascripts -getter and -setter methods for each property that JsonType maintains.\n    # @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n    #\n    # @example Getter Example\n    #   # you can access the x property of yatta by calling\n    #   w.x\n    #   # instead of\n    #   yatta.val('x')\n    #\n    # @note You can only overwrite existing values! Setting a new property won't have any effect!\n    #\n    # @example Setter Example\n    #   # you can set an existing x property of yatta by calling\n    #   w.x = \"text\"\n    #   # instead of\n    #   yatta.val('x', \"text\")\n    #\n    # In order to set a new property you have to overwrite an existing property.\n    # Therefore the JsonWrapper supports a special feature that should make things more convenient\n    # (we can argue about that, use the JsonType if you don't like it ;).\n    # If you overwrite an object property of the JsonWrapper with a new object, it will result in a merged version of the objects.\n    # Let w.p the property that is to be overwritten and o the new value. E.g. w.p = o\n    # * The result has all properties of o\n    # * The result has all properties of w.p if they don't occur under the same property-name in o.\n    #\n    # @example Conflict Example\n    #   yatta.value = {a : \"string\"}\n    #   w = yatta.value\n    #   console.log(w) # {a : \"string\"}\n    #   w.a = {a : {b : \"string\"}}\n    #   console.log(w) # {a : {b : \"String\"}}\n    #   w.a = {a : {c : 4}}\n    #   console.log(w) # {a : {b : \"String\", c : 4}}\n    #\n    # @example Common Pitfalls\n    #   w = yatta.value\n    #   # Setting a new property\n    #   w.newProperty = \"Awesome\"\n    #   console.log(w.newProperty == \"Awesome\") # false, w.newProperty is undefined\n    #   # overwrite the w object\n    #   w = {newProperty : \"Awesome\"}\n    #   console.log(w.newProperty == \"Awesome\") # true!, but ..\n    #   console.log(yatta.value.newProperty == \"Awesome\") # false, you are only allowed to set properties!\n    #   # The solution\n    #   yatta.value = {newProperty : \"Awesome\"}\n    #   console.log(w.newProperty == \"Awesome\") # true!\n    #\n    class JsonWrapper\n\n      #\n      # @param {JsonType} jsonType Instance of the JsonType that this class wrappes.\n      #\n      constructor: (jsonType)->\n        for name, obj of jsonType.map\n          do (name, obj)->\n            Object.defineProperty JsonWrapper.prototype, name,\n              get : ->\n                x = obj.val()\n                if x instanceof JsonType\n                  createJsonWrapper x\n                else if x instanceof types.ImmutableObject\n                  x.val()\n                else\n                  x\n              set : (o)->\n                overwrite = jsonType.val(name)\n                if o.constructor is {}.constructor and overwrite instanceof types.Operation\n                  for o_name,o_obj of o\n                    overwrite.val(o_name, o_obj, 'immutable')\n                else\n                  jsonType.val(name, o, 'immutable')\n              enumerable: true\n              configurable: false\n    new JsonWrapper _jsonType\n\n  #\n  # Manages Object-like values.\n  #\n  class JsonType extends types.MapManager\n\n    #\n    # @param {Object} uid A unique identifier. If uid is undefined, a new uid will be created.\n    # @param {Object} initial_value Create this operation with an initial value.\n    # @param {String|Boolean} Whether the initial_value should be created as mutable. (Optional - see setMutableDefault)\n    #\n    constructor: (uid, initial_value, mutable)->\n      super uid\n      if initial_value?\n        if typeof initial_value isnt \"object\"\n          throw new Error \"The initial value of JsonTypes must be of type Object! (current type: #{typeof initial_value})\"\n        for name,o of initial_value\n          @val name, o, mutable\n\n    #\n    # Transform this to a Json and loose all the sharing-abilities (the new object will be a deep clone)!\n    # @return {Json}\n    #\n    toJson: ()->\n      val = @val()\n      json = {}\n      for name, o of val\n        if o.constructor is {}.constructor\n          json[name] = @val(name).toJson()\n        else if o instanceof types.Operation\n          while o instanceof types.Operation\n            o = o.val()\n          json[name] = o\n        else\n          json[name] = o\n      json\n\n    #\n    # Whether the default is 'mutable' (true) or 'immutable' (false)\n    #\n    mutable_default:\n      true\n\n    #\n    # Set if the default is 'mutable' or 'immutable'\n    # @param {String|Boolean} mutable Set either 'mutable' / true or 'immutable' / false\n    setMutableDefault: (mutable)->\n      if mutable is true or mutable is 'mutable'\n        JsonType.prototype.mutable_default = true\n      else if mutable is false or mutable is 'immutable'\n        JsonType.prototype.mutable_default = false\n      else\n        throw new Error 'Set mutable either \"mutable\" or \"immutable\"!'\n      'OK'\n\n    #\n    # @overload val()\n    #   Get this as a Json object.\n    #   @return [Json]\n    #\n    # @overload val(name)\n    #   Get value of a property.\n    #   @param {String} name Name of the object property.\n    #   @return [JsonType|Word|String|Object] Depending on the value of the property. If mutable it will return a Operation-type object, if immutable it will return String/Object.\n    #\n    # @overload val(name, content)\n    #   Set a new property.\n    #   @param {String} name Name of the object property.\n    #   @param {Object|String} content Content of the object property.\n    #   @return [JsonType] This object. (supports chaining)\n    #\n    val: (name, content, mutable)->\n      if typeof name is 'object'\n        # Special case. First argument is an object. Then the second arg is mutable.\n        # Keep that in mind when reading the following..\n        for o_name,o of name\n          @val(o_name,o,content)\n        @\n      else if name? and content?\n        if mutable?\n          if mutable is true or mutable is 'mutable'\n            mutable = true\n          else\n            mutable = false\n        else\n          mutable = @mutable_default\n        if typeof content is 'function'\n          @ # Just do nothing\n        else if ((not mutable) or typeof content is 'number') and content.constructor isnt Object\n          obj = HB.addOperation(new types.ImmutableObject undefined, content).execute()\n          super name, obj\n        else\n          if typeof content is 'string'\n            word = HB.addOperation(new types.Word undefined).execute()\n            word.insertText 0, content\n            super name, word\n          else if content.constructor is Object\n            json = HB.addOperation(new JsonType undefined, content, mutable).execute()\n            super name, json\n          else\n            throw new Error \"You must not set #{typeof content}-types in collaborative Json-objects!\"\n      else\n        super name, content\n\n    Object.defineProperty JsonType.prototype, 'value',\n      get : -> createJsonWrapper @\n      set : (o)->\n        if o.constructor is {}.constructor\n          for o_name,o_obj of o\n            @val(o_name, o_obj, 'immutable')\n        else\n          throw new Error \"You must only set Object values!\"\n\n    #\n    # @private\n    #\n    _encode: ()->\n      {\n        'type' : \"JsonType\"\n        'uid' : @getUid()\n      }\n\n  parser['JsonType'] = (json)->\n    {\n      'uid' : uid\n    } = json\n    new JsonType uid\n\n\n\n\n  types['JsonType'] = JsonType\n\n  text_types\n\n\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["Types/StructuredTypes.coffee"],"names":[],"mappings":"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","file":"Types/StructuredTypes.js","sourceRoot":"/source/","sourcesContent":["basic_types_uninitialized = require \"./BasicTypes\"\n\nmodule.exports = (HB)->\n  basic_types = basic_types_uninitialized HB\n  types = basic_types.types\n  parser = basic_types.parser\n\n  #\n  # @nodoc\n  # Manages map like objects. E.g. Json-Type and XML attributes.\n  #\n  class MapManager extends types.Operation\n\n    #\n    # @param {Object} uid A unique identifier. If uid is undefined, a new uid will be created.\n    #\n    constructor: (uid)->\n      @map = {}\n      super uid\n\n    type: \"MapManager\"\n\n    applyDelete: ()->\n      for name,p of @map\n        p.applyDelete()\n      super()\n\n    cleanup: ()->\n      super()\n\n    #\n    # @see JsonTypes.val\n    #\n    val: (name, content)->\n      if content?\n        if not @map[name]?\n          HB.addOperation(new AddName undefined, @, name).execute()\n        @map[name].replace content\n        @\n      else if name?\n        obj = @map[name]?.val()\n        if obj instanceof types.ImmutableObject\n          obj.val()\n        else\n          obj\n      else\n        result = {}\n        for name,o of @map\n          obj = o.val()\n          if obj instanceof types.ImmutableObject or obj instanceof MapManager\n            obj = obj.val()\n          result[name] = obj\n        result\n\n  #\n  # @nodoc\n  # When a new property in a map manager is created, then the uids of the inserted Operations\n  # must be unique (think about concurrent operations). Therefore only an AddName operation is allowed to\n  # add a property in a MapManager. If two AddName operations on the same MapManager name happen concurrently\n  # only one will AddName operation will be executed.\n  #\n  class AddName extends types.Operation\n\n    #\n    # @param {Object} uid A unique identifier. If uid is undefined, a new uid will be created.\n    # @param {Object} map_manager Uid or reference to the MapManager.\n    # @param {String} name Name of the property that will be added.\n    #\n    constructor: (uid, map_manager, @name)->\n      @saveOperation 'map_manager', map_manager\n      super uid\n\n    type: \"AddName\"\n\n    applyDelete: ()->\n      super()\n\n    cleanup: ()->\n      super()\n\n    #\n    # If map_manager doesn't have the property name, then add it.\n    # The ReplaceManager that is being written on the property is unique\n    # in such a way that if AddName is executed (from another peer) it will\n    # always have the same result (ReplaceManager, and its beginning and end are the same)\n    #\n    execute: ()->\n      if not @validateSavedOperations()\n        return false\n      else\n        uid_r = @map_manager.getUid()\n        uid_r.op_number = \"_#{uid_r.op_number}_RM_#{@name}\"\n        if not HB.getOperation(uid_r)?\n          uid_beg = @map_manager.getUid()\n          uid_beg.op_number = \"_#{uid_beg.op_number}_RM_#{@name}_beginning\"\n          uid_end = @map_manager.getUid()\n          uid_end.op_number = \"_#{uid_end.op_number}_RM_#{@name}_end\"\n          beg = HB.addOperation(new types.Delimiter uid_beg, undefined, uid_end).execute()\n          end = HB.addOperation(new types.Delimiter uid_end, beg, undefined).execute()\n          @map_manager.map[@name] = HB.addOperation(new ReplaceManager undefined, uid_r, beg, end)\n          @map_manager.map[@name].setParent @map_manager, @name\n          (@map_manager.map[@name].add_name_ops ?= []).push @\n          @map_manager.map[@name].execute()\n        super\n\n    #\n    # Encode this operation in such a way that it can be parsed by remote peers.\n    #\n    _encode: ()->\n      {\n        'type' : \"AddName\"\n        'uid' : @getUid()\n        'map_manager' : @map_manager.getUid()\n        'name' : @name\n      }\n\n  parser['AddName'] = (json)->\n    {\n      'map_manager' : map_manager\n      'uid' : uid\n      'name' : name\n    } = json\n    new AddName uid, map_manager, name\n\n  #\n  # @nodoc\n  # Manages a list of Insert-type operations.\n  #\n  class ListManager extends types.Operation\n\n    #\n    # A ListManager maintains a non-empty list that has a beginning and an end (both Delimiters!)\n    # @param {Object} uid A unique identifier. If uid is undefined, a new uid will be created.\n    # @param {Delimiter} beginning Reference or Object.\n    # @param {Delimiter} end Reference or Object.\n    constructor: (uid, beginning, end, prev, next, origin)->\n      if beginning? and end?\n        @saveOperation 'beginning', beginning\n        @saveOperation 'end', end\n      else\n        @beginning = HB.addOperation new types.Delimiter undefined, undefined, undefined\n        @end =       HB.addOperation new types.Delimiter undefined, @beginning, undefined\n        @beginning.next_cl = @end\n        @beginning.execute()\n        @end.execute()\n      super uid, prev, next, origin\n\n    type: \"ListManager\"\n\n    #\n    # @private\n    # @see Operation.execute\n    #\n    execute: ()->\n      if @validateSavedOperations()\n        @beginning.setParent @\n        @end.setParent @\n        super\n      else\n        false\n\n    # Get the element previous to the delemiter at the end\n    getLastOperation: ()->\n      @end.prev_cl\n\n    # similar to the above\n    getFirstOperation: ()->\n      @beginning.next_cl\n\n    # Transforms the the list to an array\n    # Doesn't return left-right delimiter.\n    toArray: ()->\n      o = @beginning.next_cl\n      result = []\n      while o isnt @end\n        result.push o\n        o = o.next_cl\n      result\n\n    #\n    # Retrieves the x-th not deleted element.\n    #\n    getOperationByPosition: (position)->\n      o = @beginning.next_cl\n      if (position > 0 or o.isDeleted()) and not (o instanceof types.Delimiter)\n        while o.isDeleted() and not (o instanceof types.Delimiter)\n          # find first non deleted op\n          o = o.next_cl\n        while true\n          # find the i-th op\n          if o instanceof types.Delimiter\n            break\n          if position <= 0 and not o.isDeleted()\n            break\n          o = o.next_cl\n          if not o.isDeleted()\n            position -= 1\n      o\n\n  #\n  # @nodoc\n  # Adds support for replace. The ReplaceManager manages Replaceable operations.\n  # Each Replaceable holds a value that is now replaceable.\n  #\n  # The WordType-type has implemented support for replace\n  # @see WordType\n  #\n  class ReplaceManager extends ListManager\n    #\n    # @param {Operation} initial_content Initialize this with a Replaceable that holds the initial_content.\n    # @param {Object} uid A unique identifier. If uid is undefined, a new uid will be created.\n    # @param {Delimiter} beginning Reference or Object.\n    # @param {Delimiter} end Reference or Object.\n    constructor: (initial_content, uid, beginning, end, prev, next, origin)->\n      super uid, beginning, end, prev, next, origin\n      if initial_content?\n        @replace initial_content\n\n    type: \"ReplaceManager\"\n\n    applyDelete: ()->\n      o = @beginning\n      while o?\n        o.applyDelete()\n        o = o.next_cl\n      # if this was created by an AddName operation, delete it too\n      if @add_name_ops?\n        for o in @add_name_ops\n          o.applyDelete()\n      super()\n\n    cleanup: ()->\n      super()\n\n    #\n    # Replace the existing word with a new word.\n    #\n    # @param content {Operation} The new value of this ReplaceManager.\n    # @param replaceable_uid {UID} Optional: Unique id of the Replaceable that is created\n    #\n    replace: (content, replaceable_uid)->\n      o = @getLastOperation()\n      op = new Replaceable content, @, replaceable_uid, o, o.next_cl\n      HB.addOperation(op).execute()\n      undefined\n\n    #\n    # Add change listeners for parent.\n    #\n    setParent: (parent, property_name)->\n      repl_manager = this\n      @on 'insert', (event, op)->\n        if op.next_cl instanceof types.Delimiter\n          repl_manager.parent.callEvent 'change', property_name, op\n      @on 'change', (event, op)->\n        if repl_manager isnt this\n          repl_manager.parent.callEvent 'change', property_name, op\n      # Call this, when the first element is inserted. Then delete the listener.\n      addPropertyListener = (event, op)->\n        if op.next_cl instanceof types.Delimiter and op.prev_cl instanceof types.Delimiter\n          repl_manager.parent.callEvent 'addProperty', property_name, op\n        repl_manager.deleteListener 'addProperty', addPropertyListener\n      @on 'insert', addPropertyListener\n      super parent\n\n    #\n    # Get the value of this WordType\n    # @return {String}\n    #\n    val: ()->\n      o = @getLastOperation()\n      #if o instanceof types.Delimiter\n        # throw new Error \"Replace Manager doesn't contain anything.\"\n      o.val?() # ? - for the case that (currently) the RM does not contain anything (then o is a Delimiter)\n\n    #\n    # Encode this operation in such a way that it can be parsed by remote peers.\n    #\n    _encode: ()->\n      json =\n        {\n          'type': \"ReplaceManager\"\n          'uid' : @getUid()\n          'beginning' : @beginning.getUid()\n          'end' : @end.getUid()\n        }\n      if @prev_cl? and @next_cl?\n        json['prev'] = @prev_cl.getUid()\n        json['next'] = @next_cl.getUid()\n      if @origin? # and @origin isnt @prev_cl\n        json[\"origin\"] = @origin().getUid()\n      json\n\n  parser[\"ReplaceManager\"] = (json)->\n    {\n      'content' : content\n      'uid' : uid\n      'prev': prev\n      'next': next\n      'origin' : origin\n      'beginning' : beginning\n      'end' : end\n    } = json\n    new ReplaceManager content, uid, beginning, end, prev, next, origin\n\n\n  #\n  # @nodoc\n  # The ReplaceManager manages Replaceables.\n  # @see ReplaceManager\n  #\n  class Replaceable extends types.Insert\n\n    #\n    # @param {Operation} content The value that this Replaceable holds.\n    # @param {ReplaceManager} parent Used to replace this Replaceable with another one.\n    # @param {Object} uid A unique identifier. If uid is undefined, a new uid will be created.\n    #\n    constructor: (content, parent, uid, prev, next, origin)->\n      @saveOperation 'content', content\n      @saveOperation 'parent', parent\n      if not (prev? and next?)\n        throw new Error \"You must define prev, and next for Replaceable-types!\"\n      super uid, prev, next, origin\n\n    type: \"Replaceable\"\n\n    #\n    # Return the content that this operation holds.\n    #\n    val: ()->\n      @content\n\n    #\n    # Replace the content of this replaceable with new content.\n    #\n    replace: (content)->\n      @parent.replace content\n\n    applyDelete: ()->\n      if @content?\n        @content.applyDelete()\n        @content.dontSync()\n      @beforeDelete = @content # TODO!!!!!!!!!!\n      @content = null\n      super\n\n    cleanup: ()->\n      super\n\n    #\n    # If possible set the replace manager in the content.\n    # @see WordType.setReplaceManager\n    #\n    execute: ()->\n      if not @validateSavedOperations()\n        return false\n      else\n        @content?.setReplaceManager?(@parent)\n        ins_result = super()\n        if ins_result\n          if @next_cl.type is \"Delimiter\" and @prev_cl.type isnt \"Delimiter\"\n            @prev_cl.applyDelete()\n          else if @next_cl.type isnt \"Delimiter\"\n            @applyDelete()\n\n        return ins_result\n\n    #\n    # Encode this operation in such a way that it can be parsed by remote peers.\n    #\n    _encode: ()->\n      json =\n        {\n          'type': \"Replaceable\"\n          'content': @content?.getUid()\n          'ReplaceManager' : @parent.getUid()\n          'prev': @prev_cl.getUid()\n          'next': @next_cl.getUid()\n          'uid' : @getUid()\n        }\n      if @origin? and @origin isnt @prev_cl\n        json[\"origin\"] = @origin.getUid()\n      json\n\n  parser[\"Replaceable\"] = (json)->\n    {\n      'content' : content\n      'ReplaceManager' : parent\n      'uid' : uid\n      'prev': prev\n      'next': next\n      'origin' : origin\n    } = json\n    new Replaceable content, parent, uid, prev, next, origin\n\n\n\n  types['ListManager'] = ListManager\n  types['MapManager'] = MapManager\n  types['ReplaceManager'] = ReplaceManager\n  types['Replaceable'] = Replaceable\n\n  basic_types\n\n\n\n\n\n\n"]}
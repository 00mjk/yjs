{"version":3,"sources":["Types/BasicTypes.coffee"],"names":[],"mappings":"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","file":"Types/BasicTypes.js","sourceRoot":"/source/","sourcesContent":["module.exports = (HB)->\n  # @see Engine.parse\n  parser = {}\n  execution_listener = []\n\n  #\n  # @private\n  # @abstract\n  # @nodoc\n  # A generic interface to operations.\n  #\n  # An operation has the following methods:\n  # * _encode: encodes an operation (needed only if instance of this operation is sent).\n  # * execute: execute the effects of this operations. Good examples are Insert-type and AddName-type\n  # * val: in the case that the operation holds a value\n  #\n  # Furthermore an encodable operation has a parser. We extend the parser object in order to parse encoded operations.\n  #\n  class Operation\n\n    #\n    # @param {Object} uid A unique identifier. If uid is undefined, a new uid will be created.\n    # @see HistoryBuffer.getNextOperationIdentifier\n    #\n    constructor: (uid)->\n      @is_deleted = false\n      @doSync = true\n      @garbage_collected = false\n      if not uid?\n        uid = HB.getNextOperationIdentifier()\n      if not uid.doSync?\n        uid.doSync = not isNaN(parseInt(uid.op_number))\n      {\n        'creator': @creator\n        'op_number' : @op_number\n        'doSync' : @doSync\n      } = uid\n\n    type: \"Insert\"\n\n    #\n    # Add an event listener. It depends on the operation which events are supported.\n    # @param {String} event Name of the event.\n    # @param {Function} f f is executed in case the event fires.\n    #\n    on: (events, f)->\n      @event_listeners ?= {}\n      if events.constructor isnt [].constructor\n        events = [events]\n      for e in events\n        @event_listeners[e] ?= []\n        @event_listeners[e].push f\n\n    #\n    # Deletes a function from an event / list of events.\n    # @see Operation.on\n    #\n    # @overload deleteListener(event, f)\n    #   @param event {String} An event name\n    #   @param f     {Function} The function that you want to delete from these events\n    # @overload deleteListener(events, f)\n    #   @param events {Array<String>} A list of event names\n    #   @param f      {Function} The function that you want to delete from these events.\n    deleteListener: (events, f)->\n      if events.constructor isnt [].constructor\n        events = [events]\n      for e in events\n        if @event_listeners?[e]?\n          @event_listeners[e] = @event_listeners[e].filter (g)->\n            f isnt g\n    \n    # \n    # Deletes all subscribed event listeners. \n    # This should be called, e.g. after this has been replaced. \n    # (Then only one replace event should fire. )\n    # This is also called in the cleanup method. \n    deleteAllListeners: ()->\n      @event_listeners = []\n\n    #\n    # Fire an event.\n    # TODO: Do something with timeouts. You don't want this to fire for every operation (e.g. insert).\n    #\n    callEvent: ()->\n      @forwardEvent @, arguments...\n\n    #\n    # Fire an event and specify in which context the listener is called (set 'this').\n    #\n    forwardEvent: (op, event, args...)->\n      if @event_listeners?[event]?\n        for f in @event_listeners[event]\n          f.call op, event, args...\n\n    isDeleted: ()->\n      @is_deleted\n\n    applyDelete: (garbagecollect = true)->\n      if not @garbage_collected\n        #console.log \"applyDelete: #{@type}\"\n        @is_deleted = true\n        if garbagecollect\n          @garbage_collected = true\n          HB.addToGarbageCollector @\n\n    cleanup: ()->\n      #console.log \"cleanup: #{@type}\"\n      HB.removeOperation @\n      @deleteAllListeners()\n\n    #\n    # Set the parent of this operation.\n    #\n    setParent: (@parent)->\n\n    #\n    # Get the parent of this operation.\n    #\n    getParent: ()->\n      @parent\n\n    #\n    # Computes a unique identifier (uid) that identifies this operation.\n    #\n    getUid: ()->\n      { 'creator': @creator, 'op_number': @op_number , 'sync': @doSync}\n\n    dontSync: ()->\n      @doSync = false\n\n    #\n    # @private\n    # Notify the all the listeners.\n    #\n    execute: ()->\n      @is_executed = true\n      for l in execution_listener\n        l @_encode()\n      @\n\n    #\n    # @private\n    # Operations may depend on other operations (linked lists, etc.).\n    # The saveOperation and validateSavedOperations methods provide\n    # an easy way to refer to these operations via an uid or object reference.\n    #\n    # For example: We can create a new Delete operation that deletes the operation $o like this\n    #     - var d = new Delete(uid, $o);   or\n    #     - var d = new Delete(uid, $o.getUid());\n    # Either way we want to access $o via d.deletes. In the second case validateSavedOperations must be called first.\n    #\n    # @overload saveOperation(name, op_uid)\n    #   @param {String} name The name of the operation. After validating (with validateSavedOperations) the instantiated operation will be accessible via this[name].\n    #   @param {Object} op_uid A uid that refers to an operation\n    # @overload saveOperation(name, op)\n    #   @param {String} name The name of the operation. After calling this function op is accessible via this[name].\n    #   @param {Operation} op An Operation object\n    #\n    saveOperation: (name, op)->\n\n      #\n      # Every instance of $Operation must have an $execute function.\n      # We use duck-typing to check if op is instantiated since there\n      # could exist multiple classes of $Operation\n      #\n      if op?.execute?\n        # is instantiated\n        @[name] = op\n      else if op?\n        # not initialized. Do it when calling $validateSavedOperations()\n        @unchecked ?= {}\n        @unchecked[name] = op\n\n    #\n    # @private\n    # After calling this function all not instantiated operations will be accessible.\n    # @see Operation.saveOperation\n    #\n    # @return [Boolean] Whether it was possible to instantiate all operations.\n    #\n    validateSavedOperations: ()->\n      uninstantiated = {}\n      success = @\n      for name, op_uid of @unchecked\n        op = HB.getOperation op_uid\n        if op\n          @[name] = op\n        else\n          uninstantiated[name] = op_uid\n          success = false\n      delete @unchecked\n      if not success\n        @unchecked = uninstantiated\n      success\n\n\n\n  #\n  # @nodoc\n  # A simple Delete-type operation that deletes an operation.\n  #\n  class Delete extends Operation\n\n    #\n    # @param {Object} uid A unique identifier. If uid is undefined, a new uid will be created.\n    # @param {Object} deletes UID or reference of the operation that this to be deleted.\n    #\n    constructor: (uid, deletes)->\n      @saveOperation 'deletes', deletes\n      super uid\n\n    type: \"Delete\"\n\n    #\n    # @private\n    # Convert all relevant information of this operation to the json-format.\n    # This result can be sent to other clients.\n    #\n    _encode: ()->\n      {\n        'type': \"Delete\"\n        'uid': @getUid()\n        'deletes': @deletes.getUid()\n      }\n\n    #\n    # @private\n    # Apply the deletion.\n    #\n    execute: ()->\n      if @validateSavedOperations()\n        @deletes.applyDelete @\n        super\n      else\n        false\n\n  #\n  # Define how to parse Delete operations.\n  #\n  parser['Delete'] = (o)->\n    {\n      'uid' : uid\n      'deletes': deletes_uid\n    } = o\n    new Delete uid, deletes_uid\n\n  #\n  # @nodoc\n  # A simple insert-type operation.\n  #\n  # An insert operation is always positioned between two other insert operations.\n  # Internally this is realized as associative lists, whereby each insert operation has a predecessor and a successor.\n  # For the sake of efficiency we maintain two lists:\n  #   - The short-list (abbrev. sl) maintains only the operations that are not deleted\n  #   - The complete-list (abbrev. cl) maintains all operations\n  #\n  class Insert extends Operation\n\n    #\n    # @param {Object} uid A unique identifier. If uid is undefined, a new uid will be created.\n    # @param {Operation} prev_cl The predecessor of this operation in the complete-list (cl)\n    # @param {Operation} next_cl The successor of this operation in the complete-list (cl)\n    #\n    # @see HistoryBuffer.getNextOperationIdentifier\n    #\n    constructor: (uid, prev_cl, next_cl, origin)->\n      @saveOperation 'prev_cl', prev_cl\n      @saveOperation 'next_cl', next_cl\n      if origin?\n        @saveOperation 'origin', origin\n      else\n        @saveOperation 'origin', prev_cl\n      super uid\n\n    type: \"Insert\"\n\n    #\n    # set content to null and other stuff\n    # @private\n    #\n    applyDelete: (o)->\n      @deleted_by ?= []\n      callLater = false\n      if @parent? and not @isDeleted()\n        # call iff wasn't deleted earlyer\n        callLater = true\n      if o?\n        @deleted_by.push o\n      garbagecollect = false\n      if not (@prev_cl? and @next_cl?) or @prev_cl.isDeleted()\n        garbagecollect = true\n      super garbagecollect\n      if callLater\n        @parent.callEvent \"delete\", @, o\n      if @next_cl?.isDeleted()\n        # garbage collect next_cl\n        @next_cl.applyDelete()\n\n    cleanup: ()->\n      # TODO: Debugging\n      if @prev_cl?.isDeleted()\n        # delete all ops that delete this insertion\n        for d in @deleted_by\n          d.cleanup()\n\n        # throw new Error \"left is not deleted. inconsistency!, wrararar\"\n        # delete origin references to the right\n        o = @next_cl\n        while o.type isnt \"Delimiter\"\n          if o.origin is @\n            o.origin = @prev_cl\n          o = o.next_cl\n        # reconnect left/right\n        @prev_cl.next_cl = @next_cl\n        @next_cl.prev_cl = @prev_cl\n        super\n\n\n    #\n    # @private\n    # The amount of positions that $this operation was moved to the right.\n    #\n    getDistanceToOrigin: ()->\n      d = 0\n      o = @prev_cl\n      while true\n        if @origin is o\n          break\n        d++\n        o = o.prev_cl\n      d\n\n    #\n    # @private\n    # Include this operation in the associative lists.\n    # @param fire_event {boolean} Whether to fire the insert-event.\n    execute: (fire_event = true)->\n      if not @validateSavedOperations()\n        return false\n      else\n        if @prev_cl?\n          distance_to_origin = @getDistanceToOrigin() # most cases: 0\n          o = @prev_cl.next_cl\n          i = distance_to_origin # loop counter\n\n          # $this has to find a unique position between origin and the next known character\n          # case 1: $origin equals $o.origin: the $creator parameter decides if left or right\n          #         let $OL= [o1,o2,o3,o4], whereby $this is to be inserted between o1 and o4\n          #         o2,o3 and o4 origin is 1 (the position of o2)\n          #         there is the case that $this.creator < o2.creator, but o3.creator < $this.creator\n          #         then o2 knows o3. Since on another client $OL could be [o1,o3,o4] the problem is complex\n          #         therefore $this would be always to the right of o3\n          # case 2: $origin < $o.origin\n          #         if current $this insert_position > $o origin: $this ins\n          #         else $insert_position will not change (maybe we encounter case 1 later, then this will be to the right of $o)\n          # case 3: $origin > $o.origin\n          #         $this insert_position is to the left of $o (forever!)\n          while true\n            if o isnt @next_cl\n              # $o happened concurrently\n              if o.getDistanceToOrigin() is i\n                # case 1\n                if o.creator < @creator\n                  @prev_cl = o\n                  distance_to_origin = i + 1\n                else\n                  # nop\n              else if o.getDistanceToOrigin() < i\n                # case 2\n                if i - distance_to_origin <= o.getDistanceToOrigin()\n                  @prev_cl = o\n                  distance_to_origin = i + 1\n                else\n                  #nop\n              else\n                # case 3\n                break\n              i++\n              o = o.next_cl\n            else\n              # $this knows that $o exists,\n              break\n          # now reconnect everything\n          @next_cl = @prev_cl.next_cl\n          @prev_cl.next_cl = @\n          @next_cl.prev_cl = @\n\n        parent = @prev_cl?.getParent()\n        if parent? and fire_event\n          @setParent parent\n          @parent.callEvent \"insert\", @\n        super # notify the execution_listeners\n\n    #\n    # Compute the position of this operation.\n    #\n    getPosition: ()->\n      position = 0\n      prev = @prev_cl\n      while true\n        if prev instanceof Delimiter\n          break\n        if not prev.isDeleted()\n          position++\n        prev = prev.prev_cl\n      position\n\n  #\n  # @nodoc\n  # Defines an object that is cannot be changed. You can use this to set an immutable string, or a number.\n  #\n  class ImmutableObject extends Operation\n\n    #\n    # @param {Object} uid A unique identifier. If uid is undefined, a new uid will be created.\n    # @param {Object} content\n    #\n    constructor: (uid, @content, prev, next, origin)->\n      super uid, prev, next, origin\n\n    type: \"ImmutableObject\"\n\n    #\n    # @return [String] The content of this operation.\n    #\n    val : ()->\n      @content\n\n    #\n    # Encode this operation in such a way that it can be parsed by remote peers.\n    #\n    _encode: ()->\n      json = {\n        'type': \"ImmutableObject\"\n        'uid' : @getUid()\n        'content' : @content\n      }\n      if @prev_cl?\n        json['prev'] = @prev_cl.getUid()\n      if @next_cl?\n        json['next'] = @next_cl.getUid()\n      if @origin? # and @origin isnt @prev_cl\n        json[\"origin\"] = @origin().getUid()\n      json\n\n  parser['ImmutableObject'] = (json)->\n    {\n      'uid' : uid\n      'content' : content\n      'prev': prev\n      'next': next\n      'origin' : origin\n    } = json\n    new ImmutableObject uid, content, prev, next, origin\n\n  #\n  # @nodoc\n  # A delimiter is placed at the end and at the beginning of the associative lists.\n  # This is necessary in order to have a beginning and an end even if the content\n  # of the Engine is empty.\n  #\n  class Delimiter extends Operation\n    #\n    # @param {Object} uid A unique identifier. If uid is undefined, a new uid will be created.\n    # @param {Operation} prev_cl The predecessor of this operation in the complete-list (cl)\n    # @param {Operation} next_cl The successor of this operation in the complete-list (cl)\n    #\n    # @see HistoryBuffer.getNextOperationIdentifier\n    #\n    constructor: (uid, prev_cl, next_cl, origin)->\n      @saveOperation 'prev_cl', prev_cl\n      @saveOperation 'next_cl', next_cl\n      @saveOperation 'origin', prev_cl\n      super uid\n\n    type: \"Delimiter\"\n\n    applyDelete: ()->\n      super()\n      o = @next_cl\n      while o?\n        o.applyDelete()\n        o = o.next_cl\n      undefined\n\n    cleanup: ()->\n      super()\n\n    #\n    # @private\n    #\n    execute: ()->\n      if @unchecked?['next_cl']?\n        super\n      else if @unchecked?['prev_cl']\n        if @validateSavedOperations()\n          if @prev_cl.next_cl?\n            throw new Error \"Probably duplicated operations\"\n          @prev_cl.next_cl = @\n          delete @prev_cl.unchecked.next_cl\n          super\n        else\n          false\n      else if @prev_cl? and not @prev_cl.next_cl?\n        delete @prev_cl.unchecked.next_cl\n        @prev_cl.next_cl = @\n      else if @prev_cl? or @next_cl?\n        super\n      else\n        throw new Error \"Delimiter is unsufficient defined!\"\n\n    #\n    # @private\n    #\n    _encode: ()->\n      {\n        'type' : \"Delimiter\"\n        'uid' : @getUid()\n        'prev' : @prev_cl?.getUid()\n        'next' : @next_cl?.getUid()\n      }\n\n  parser['Delimiter'] = (json)->\n    {\n    'uid' : uid\n    'prev' : prev\n    'next' : next\n    } = json\n    new Delimiter uid, prev, next\n\n  # This is what this module exports after initializing it with the HistoryBuffer\n  {\n    'types' :\n      'Delete' : Delete\n      'Insert' : Insert\n      'Delimiter': Delimiter\n      'Operation': Operation\n      'ImmutableObject' : ImmutableObject\n    'parser' : parser\n    'execution_listener' : execution_listener\n  }\n\n\n\n\n"]}
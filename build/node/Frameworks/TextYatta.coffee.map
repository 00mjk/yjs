{"version":3,"file":"Frameworks/TextYatta.coffee","names":[],"mappings":"","sources":["Frameworks/TextYatta.coffee"],"sourcesContent":["\ntext_types_uninitialized = require \"../Types/TextTypes\"\nHistoryBuffer = require \"../HistoryBuffer\"\nEngine = require \"../Engine\"\n\n#\n# Framework for Text Datastructures.\n#\nclass TextYatta\n\n  #\n  # @param {String} user_id Uniqe user id that defines this peer.\n  # @param {Connector} Connector The connector defines how you connect to the other peers.\n  #\n  constructor: (user_id, Connector)->\n    @HB = new HistoryBuffer user_id\n    text_types = text_types_uninitialized @HB\n    @engine = new Engine @HB, text_types.parser\n    @connector = new Connector @engine, @HB, text_types.execution_listener\n\n    first_word = new text_types.types.Word undefined\n    @HB.addOperation(first_word).execute()\n    @root_element = first_word\n\n  #\n  # @result Word\n  #\n  getRootElement: ()->\n    @root_element\n\n  #\n  # @see Engine\n  #\n  getEngine: ()->\n    @engine\n\n  #\n  # Get the initialized connector.\n  #\n  getConnector: ()->\n    @connector\n\n  #\n  # @see HistoryBuffer\n  #\n  getHistoryBuffer: ()->\n    @HB\n\n  #\n  # Get the UserId from the HistoryBuffer object.\n  # In most cases this will be the same as the user_id value with which\n  # JsonYatta was initialized (Depending on the HistoryBuffer implementation).\n  #\n  getUserId: ()->\n    @HB.getUserId()\n\n  #\n  # @see JsonType.val\n  #\n  val: ()->\n    @root_element.val()\n\n  #\n  # @see Word.insertText\n  #\n  insertText: (pos, content)->\n    @root_element.insertText pos, content\n\n  #\n  # @see Word.deleteText\n  #\n  deleteText: (pos, length)->\n    @root_element.deleteText pos, length\n\n  #\n  # @see Word.replaceText\n  #\n  replaceText: (text)->\n    @root_element.replaceText text\n\n\nmodule.exports = TextYatta\n"],"sourceRoot":"/source/"}
{"version":3,"file":"Frameworks/TextYatta.js","sources":["Frameworks/TextYatta.coffee"],"names":[],"mappings":"CACA,WAAA,GAAA,GAAA,EAAA,EAAA,CAAA,GAA2B,QAAQ,sBACnC,EAAgB,QAAQ,oBACxB,EAAS,QAAQ,aAKX,EAAA,WAMS,QAAA,GAAC,EAAS,GACrB,GAAA,GAAA,EAAA,EAAA,EAAA,CAAA,MAAC,GAAS,GAAA,GAAc,GACxB,EAAa,EAAyB,KAAC,IACvC,EAAQ,EAAW,MACnB,KAAC,OAAa,GAAA,GAAO,KAAC,GAAI,EAAW,QACrC,KAAC,UAAgB,GAAA,GAAU,KAAC,OAAQ,KAAC,GAAI,EAAW,mBAAoB,MAExE,EAAY,KAAC,GAAG,aAAiB,GAAA,GAAM,WAAW,QAAS,IAAK,UAAW,cAAgB,OAAW,SACtG,EAAY,KAAC,GAAG,aAAiB,GAAA,GAAM,WAAW,QAAS,IAAK,UAAW,QAAgB,EAAW,SACtG,EAAU,QAAU,EACpB,EAAU,UACV,EAAI,UACJ,EAAiB,GAAA,GAAW,MAAM,MAAM,QAAS,IAAK,UAAW,KAAM,EAAW,GAClF,KAAC,GAAG,aAAa,GAAY,UAC7B,KAAC,aAAe,QAdlB,GAAA,UAmBA,eAAgB,iBACd,MAAC,cApBH,EAAA,UAyBA,UAAW,iBACT,MAAC,QA1BH,EAAA,UA+BA,aAAc,iBACZ,MAAC,WAhCH,EAAA,UAqCA,iBAAkB,iBAChB,MAAC,IAtCH,EAAA,UA6CA,UAAW,iBACT,MAAC,GAAG,aA9CN,EAAA,UAmDA,IAAK,iBACH,MAAC,aAAa,OApDhB,EAAA,UAyDA,WAAY,SAAC,EAAK,SAChB,MAAC,aAAa,WAAW,EAAK,IA1DhC,EAAA,UA+DA,WAAY,SAAC,EAAK,SAChB,MAAC,aAAa,WAAW,EAAK,IAhEhC,EAAA,UAqEA,KAAM,SAAC,SACL,MAAC,aAAa,KAAK,IAtErB,EAAA,UA2EA,YAAa,SAAC,SACZ,MAAC,aAAa,YAAY,SAG9B,OAAO,QAAU,EACd,mBAAA,SAAA,OAAA,SACM,MAAA,OAAA,IACL,OAAO,MACT,OAAO,EAAE,UAAY","sourcesContent":["\ntext_types_uninitialized = require \"../Types/TextTypes\"\nHistoryBuffer = require \"../HistoryBuffer\"\nEngine = require \"../Engine\"\n\n#\n# Framework for Text Datastructures.\n#\nclass TextYatta\n\n  #\n  # @param {String} user_id Uniqe user id that defines this peer.\n  # @param {Connector} Connector The connector defines how you connect to the other peers.\n  #\n  constructor: (user_id, Connector)->\n    @HB = new HistoryBuffer user_id\n    text_types = text_types_uninitialized @HB\n    types = text_types.types\n    @engine = new Engine @HB, text_types.parser\n    @connector = new Connector @engine, @HB, text_types.execution_listener, @\n\n    beginning = @HB.addOperation new types.Delimiter {creator: '_', op_number: '_beginning'} , undefined, undefined\n    end =       @HB.addOperation new types.Delimiter {creator: '_', op_number: '_end'}       , beginning, undefined\n    beginning.next_cl = end\n    beginning.execute()\n    end.execute()\n    first_word = new text_types.types.Word {creator: '_', op_number: '_'}, beginning, end\n    @HB.addOperation(first_word).execute()\n    @root_element = first_word\n\n  #\n  # @result Word\n  #\n  getRootElement: ()->\n    @root_element\n\n  #\n  # @see Engine\n  #\n  getEngine: ()->\n    @engine\n\n  #\n  # Get the initialized connector.\n  #\n  getConnector: ()->\n    @connector\n\n  #\n  # @see HistoryBuffer\n  #\n  getHistoryBuffer: ()->\n    @HB\n\n  #\n  # Get the UserId from the HistoryBuffer object.\n  # In most cases this will be the same as the user_id value with which\n  # JsonYatta was initialized (Depending on the HistoryBuffer implementation).\n  #\n  getUserId: ()->\n    @HB.getUserId()\n\n  #\n  # @see JsonType.val\n  #\n  val: ()->\n    @root_element.val()\n\n  #\n  # @see Word.insertText\n  #\n  insertText: (pos, content)->\n    @root_element.insertText pos, content\n\n  #\n  # @see Word.deleteText\n  #\n  deleteText: (pos, length)->\n    @root_element.deleteText pos, length\n\n  #\n  # @see Word.bind\n  #\n  bind: (textarea)->\n    @root_element.bind textarea\n\n  #\n  # @see Word.replaceText\n  #\n  replaceText: (text)->\n    @root_element.replaceText text\n\n\nmodule.exports = TextYatta\nif window?\n  if not window.Y?\n    window.Y = {}\n  window.Y.TextYatta = TextYatta\n"],"sourceRoot":"/source/"}
{"version":3,"file":"Frameworks/JsonYatta.js","sources":["Frameworks/JsonYatta.coffee"],"names":[],"mappings":"CACA,WAAA,GAAA,GAAA,EAAA,EAAA,CAAA,GAA2B,QAAQ,sBACnC,EAAgB,QAAQ,oBACxB,EAAS,QAAQ,aASX,EAAA,WAMS,QAAA,GAAC,EAAS,GACrB,GAAA,GAAA,CAAA,MAAC,GAAS,GAAA,GAAc,GACxB,EAAa,EAAyB,KAAC,IACvC,KAAC,OAAa,GAAA,GAAO,KAAC,GAAI,EAAW,QACrC,KAAC,UAAgB,GAAA,GAAU,KAAC,OAAQ,KAAC,GAAI,EAAW,mBAAoB,MAExE,EAAiB,GAAA,GAAW,MAAM,SAAS,KAAC,GAAG,+BAC/C,KAAC,GAAG,aAAa,GAAY,UAC7B,KAAC,aAAe,QARlB,GAAA,UAaA,eAAgB,iBACd,MAAC,cAdH,EAAA,UAmBA,UAAW,iBACT,MAAC,QApBH,EAAA,UAyBA,aAAc,iBACZ,MAAC,WA1BH,EAAA,UA+BA,iBAAkB,iBAChB,MAAC,IAhCH,EAAA,UAqCA,kBAAmB,SAAC,SAClB,MAAC,aAAa,kBAAkB,IAtClC,EAAA,UA6CA,UAAW,iBACT,MAAC,GAAG,aA9CN,EAAA,UAmDA,IAAM,SAAC,EAAM,EAAS,SACpB,MAAC,aAAa,IAAI,EAAM,EAAS,IAKnC,OAAO,eAAe,EAAU,UAAW,SACzC,IAAM,iBAAG,MAAC,aAAa,OACvB,IAAM,SAAC,GACL,GAAA,GAAA,EAAA,CAAA,IAAG,EAAE,iBAAkB,YAAvB,CACE,SAAA,IAAA,UACE,EAAA,KAAA,KAAC,IAAI,EAAQ,EAAO,uBAEtB,KAAU,IAAA,OAAM,4CAExB,OAAO,QAAU,EACd,mBAAA,SAAA,OAAA,SACM,MAAA,OAAA,IACL,OAAO,MACT,OAAO,EAAE,UAAY","sourcesContent":["\njson_types_uninitialized = require \"../Types/JsonTypes\"\nHistoryBuffer = require \"../HistoryBuffer\"\nEngine = require \"../Engine\"\n\n#\n# Framework for Json data-structures.\n# Known values that are supported:\n# * String\n# * Integer\n# * Array\n#\nclass JsonYatta\n\n  #\n  # @param {String} user_id Unique id of the peer.\n  # @param {Connector} Connector the connector class.\n  #\n  constructor: (user_id, Connector)->\n    @HB = new HistoryBuffer user_id\n    json_types = json_types_uninitialized @HB\n    @engine = new Engine @HB, json_types.parser\n    @connector = new Connector @engine, @HB, json_types.execution_listener, @\n\n    first_word = new json_types.types.JsonType @HB.getReservedUniqueIdentifier()\n    @HB.addOperation(first_word).execute()\n    @root_element = first_word\n\n  #\n  # @result JsonType\n  #\n  getRootElement: ()->\n    @root_element\n\n  #\n  # @see Engine\n  #\n  getEngine: ()->\n    @engine\n\n  #\n  # Get the initialized connector.\n  #\n  getConnector: ()->\n    @connector\n\n  #\n  # @see HistoryBuffer\n  #\n  getHistoryBuffer: ()->\n    @HB\n\n  #\n  # @see JsonType.setMutableDefault\n  #\n  setMutableDefault: (mutable)->\n    @root_element.setMutableDefault(mutable)\n\n  #\n  # Get the UserId from the HistoryBuffer object.\n  # In most cases this will be the same as the user_id value with which\n  # JsonYatta was initialized (Depending on the HistoryBuffer implementation).\n  #\n  getUserId: ()->\n    @HB.getUserId()\n\n  #\n  # @see JsonType.val\n  #\n  val : (name, content, mutable)->\n    @root_element.val(name, content, mutable)\n\n  #\n  # @see JsonType.value\n  #\n  Object.defineProperty JsonYatta.prototype, 'value',\n    get : -> @root_element.value\n    set : (o)->\n      if o.constructor is {}.constructor\n        for o_name,o_obj of o\n          @val(o_name, o_obj, 'immutable')\n      else\n        throw new Error \"You must only set Object values!\"\n\nmodule.exports = JsonYatta\nif window?\n  if not window.Y?\n    window.Y = {}\n  window.Y.JsonYatta = JsonYatta\n"],"sourceRoot":"/source/"}
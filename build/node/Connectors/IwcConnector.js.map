{"version":3,"file":"Connectors/IwcConnector.js","sources":["Connectors/IwcConnector.coffee"],"names":[],"mappings":"CAKA,WAAA,GAAA,EAAA,GAAqB,SAAC,EAAU,GAC9B,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAAA,MACA,EAAgB,GAAA,WAEhB,EAAU,QAAQ,SAAC,GACjB,GAAA,kCAA2B,IAAI,SAAC,SAC9B,YAAW,iBACT,GAAE,IACF,KAHJ,SAKF,EAAU,SAEV,EAAc,KAOR,EAAA,WAQS,QAAA,GAAE,EAAS,EAAK,EAAqB,GAChD,GAAA,GAAA,EAAA,EAAA,CADY,MAAC,OAAA,EAAQ,KAAC,GAAA,EAAI,KAAC,mBAAA,EAAoB,KAAC,MAAA,EAChD,KAAC,UAAY,EACb,KAAC,WAAa,EAEd,EAAQ,SAAA,SAAA,UAAC,SACP,GAAC,KAAK,KADA,MAER,KAAC,mBAAmB,KAAK,GAEzB,EAAY,SAAA,SAAA,UAAC,SACX,GAAA,MAAA,EAAK,EAAM,OAAO,GAAA,OAClB,EAAK,OAAO,oBAAoB,KAFtB,MAGZ,EAAW,uBAA4B,GAGvC,EAAW,SAAA,SAAA,UAAC,GACV,GAAA,SAAA,GAAI,EAAO,OACX,EAAC,QAAQ,KAFA,MAGX,KAAC,WAAW,qBAA0B,GAEnC,MAAA,GACD,KAAC,OAAO,oBAAoB,GAE9B,EAAoB,SAAA,SAAA,YAClB,GAAA,SAAA,IACE,GAAK,EAAC,MAAM,mBAAmB,WACjC,EAAC,cAAc,wBAAyB,KAHtB,MAIpB,KAAC,WAAW,sBAA2B,SA1BzC,GAAA,UAgCA,KAAM,SAAC,GACL,MAAG,GAAE,IAAI,UAAW,KAAC,GAAG,aAA6C,gBAA5B,GAAS,IAAI,UACpD,KAAC,cAAc,sBAAuB,GADxC,QAjCF,EAAA,UAwCA,QAAS,SAAC,GACR,MAAG,GAAE,IAAI,UAAa,KAAC,GAAG,YACxB,KAAC,OAAO,QAAQ,GADlB,QAzCF,EAAA,UAiDA,cAAe,SAAC,EAAa,GAC3B,GAAA,SAAA,IACE,OAAQ,EACR,UAAW,GACX,KAAM,GACN,SAAU,GACV,OAAQ,kBACR,OAAQ,GAEV,KAAC,UAAU,WAAW,SAE1B,GACE,OAAQ,uBACR,UAAW,GACX,KAAM,GACN,SAAU,GACV,OAAQ,kBACR,WAEF,EAAqB,iBACnB,GAAU,WAAW,IAEvB,EAAO,WACL,GAAA,SAAA,YAAW,EAAoB,KAC/B,EAAmB,KAEjB,EADC,MAAA,EACkB,EAGA,KAAK,MAAoB,IAAd,KAAK,UACrC,EAAS,EAAc,QAEzB,YAAW,EAAO,MAGpB,OAAO,QAAU,8CACjB,OAAQ,mBAAqB","sourcesContent":["\n#\n# @param {Function} callback The callback is called when the connector is initialized.\n# @param {String} initial_user_id Optional. You can set you own user_id (since the ids of duiclient are not always unique)\n#\ncreateIwcConnector = (callback, initial_user_id)->\n  iwcHandler = {}\n  duiClient = new DUIClient()\n  #@duiClient = new iwc.Client()\n  duiClient.connect (intent)->\n    iwcHandler[intent.action]?.map (f)->\n      setTimeout ()->\n        f intent\n      , 0\n\n  duiClient.initOK()\n\n  received_HB = null\n\n  #\n  # The Iwc Connector adds support for the Inter-Widget-Communication protocol that is used in the Role-SDK.\n  # @see http://dbis.rwth-aachen.de/cms/projects/the-xmpp-experience#interwidget-communication\n  # @see http://dbis.rwth-aachen.de/cms/projects/ROLE\n  #\n  class IwcConnector\n\n    #\n    # @param {Engine} engine The transformation engine\n    # @param {HistoryBuffer} HB\n    # @param {Array<Function>} execution_listener You must ensure that whenever an operation is executed, every function in this Array is called.\n    # @param {Yatta} yatta The Yatta framework.\n    #\n    constructor: (@engine, @HB, @execution_listener, @yatta)->\n      @duiClient = duiClient\n      @iwcHandler = iwcHandler\n\n      send_ = (o)=>\n        @send o\n      @execution_listener.push send_\n\n      receiveHB = (json)=>\n        HB = json?.extras.HB\n        this.engine.applyOpsCheckDouble HB\n      iwcHandler[\"Yatta_push_HB_element\"] = [receiveHB]\n\n\n      receive_ = (intent)=>\n        o = intent.extras\n        @receive o\n      @iwcHandler[\"Yatta_new_operation\"] = [receive_]\n\n      if received_HB?\n        @engine.applyOpsCheckDouble received_HB\n\n      sendHistoryBuffer = ()=>\n        json =\n          HB : @yatta.getHistoryBuffer()._encode()\n        @sendIwcIntent \"Yatta_push_HB_element\", json\n      @iwcHandler[\"Yatta_get_HB_element\"] = [sendHistoryBuffer]\n\n    #\n    # This function is called whenever an operation was executed.\n    # @param {Operation} o The operation that was executed.\n    #\n    send: (o)->\n      if o.uid.creator is @HB.getUserId() and (typeof o.uid.op_number isnt \"string\")\n        @sendIwcIntent \"Yatta_new_operation\", o\n\n    #\n    # This function is called whenever an operation was received from another peer.\n    # @param {Operation} o The operation that was received.\n    #\n    receive: (o)->\n      if o.uid.creator isnt @HB.getUserId()\n        @engine.applyOp o\n\n    #\n    # Helper for sending iwc intents.\n    # @param {String} action_name The name of the action that is going to be send.\n    # @param {String} content The content that is atteched to the intent.\n    #\n    sendIwcIntent: (action_name, content)->\n      intent =\n        action: action_name\n        component: \"\"\n        data: \"\"\n        dataType: \"\"\n        flags: [\"PUBLISH_GLOBAL\"]\n        extras: content\n\n      @duiClient.sendIntent(intent)\n\n  get_HB_intent =\n    action: \"Yatta_get_HB_element\"\n    component: \"\"\n    data: \"\"\n    dataType: \"\"\n    flags: [\"PUBLISH_GLOBAL\"]\n    extras: {}\n\n  send_get_HB_intent = ()->\n    duiClient.sendIntent(get_HB_intent)\n\n  init = ()->\n    setTimeout send_get_HB_intent, 1000\n    proposed_user_id = null\n    if initial_user_id?\n      proposed_user_id = initial_user_id\n    else\n      # proposed_user_id = duiClient.getIwcClient()._componentName #TODO: This is stupid! why can't i use this?\n      proposed_user_id = Math.floor(Math.random()*1000000)\n    callback IwcConnector, proposed_user_id\n\n  setTimeout init, (1000)\n\n  undefined\nmodule.exports = createIwcConnector\nwindow?.createIwcConnector = createIwcConnector\n\n"],"sourceRoot":"/source/"}
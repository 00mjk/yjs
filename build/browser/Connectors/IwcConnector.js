(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var createIwcConnector;

createIwcConnector = function(callback, options) {
  var IwcConnector, duiClient, init, iwcHandler, received_HB, userIwcHandler;
  userIwcHandler = null;
  if (options != null) {
    userIwcHandler = options.iwcHandler;
  }
  iwcHandler = {};
  duiClient = new DUIClient();
  duiClient.connect(function(intent) {
    var _ref;
    if ((_ref = iwcHandler[intent.action]) != null) {
      _ref.map(function(f) {
        return setTimeout(function() {
          return f(intent);
        }, 0);
      });
    }
    if (userIwcHandler != null) {
      return userIwcHandler(intent);
    }
  });
  duiClient.initOK();
  received_HB = null;
  IwcConnector = (function() {
    function IwcConnector(engine, HB, execution_listener, yatta) {
      var receiveHB, receive_, sendHistoryBuffer, send_;
      this.engine = engine;
      this.HB = HB;
      this.execution_listener = execution_listener;
      this.yatta = yatta;
      this.duiClient = duiClient;
      this.iwcHandler = iwcHandler;
      send_ = (function(_this) {
        return function(o) {
          if (Object.getOwnPropertyNames(_this.initialized).length !== 0) {
            return _this.send(o);
          }
        };
      })(this);
      this.execution_listener.push(send_);
      this.initialized = {};
      receiveHB = (function(_this) {
        return function(json) {
          var him;
          HB = json.extras.HB;
          him = json.extras.user;
          _this.engine.applyOpsCheckDouble(HB);
          return _this.initialized[him] = true;
        };
      })(this);
      iwcHandler["Yatta_push_HB_element"] = [receiveHB];
      this.sendIwcIntent("Yatta_get_HB_element", this.HB.getOperationCounter());
      receive_ = (function(_this) {
        return function(intent) {
          var o;
          o = intent.extras;
          if (_this.initialized[o.uid.creator] != null) {
            return _this.receive(o);
          }
        };
      })(this);
      this.iwcHandler["Yatta_new_operation"] = [receive_];
      if (received_HB != null) {
        this.engine.applyOpsCheckDouble(received_HB);
      }
      sendHistoryBuffer = (function(_this) {
        return function(intent) {
          var json, state_vector;
          state_vector = intent.extras;
          console.log(state_vector);
          json = {
            HB: _this.yatta.getHistoryBuffer()._encode(state_vector),
            user: _this.yatta.getUserId()
          };
          return _this.sendIwcIntent("Yatta_push_HB_element", json);
        };
      })(this);
      this.iwcHandler["Yatta_get_HB_element"] = [sendHistoryBuffer];
    }

    IwcConnector.prototype.setIwcHandler = function(f) {
      return userIwcHandler = f;
    };

    IwcConnector.prototype.sendIwcIntent = function(action_name, content) {
      var intent;
      intent = null;
      if (arguments.length >= 2) {
        action_name = arguments[0], content = arguments[1];
        intent = {
          action: action_name,
          component: "",
          data: "",
          dataType: "",
          flags: ["PUBLISH_GLOBAL"],
          extras: content
        };
      } else {
        intent = arguments[0];
      }
      return this.duiClient.sendIntent(intent);
    };

    IwcConnector.prototype.send = function(o) {
      if (o.uid.creator === this.HB.getUserId() && (typeof o.uid.op_number !== "string")) {
        return this.sendIwcIntent("Yatta_new_operation", o);
      }
    };

    IwcConnector.prototype.receive = function(o) {
      if (o.uid.creator !== this.HB.getUserId()) {
        return this.engine.applyOp(o);
      }
    };

    return IwcConnector;

  })();
  init = function() {
    var proposed_user_id;
    proposed_user_id = Math.floor(Math.random() * 1000000);
    return callback(IwcConnector, proposed_user_id);
  };
  setTimeout(init, 5000);
  return void 0;
};

module.exports = createIwcConnector;

if (typeof window !== "undefined" && window !== null) {
  if (window.Y == null) {
    window.Y = {};
  }
  window.Y.createIwcConnector = createIwcConnector;
}


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2Rtb25hZC9Ecm9wYm94L1lhdHRhIS9ub2RlX21vZHVsZXMvZ3VscC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9kbW9uYWQvRHJvcGJveC9ZYXR0YSEvbGliL0Nvbm5lY3RvcnMvSXdjQ29ubmVjdG9yLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0tBLElBQUEsa0JBQUE7O0FBQUEsa0JBQUEsR0FBcUIsU0FBQyxRQUFELEVBQVcsT0FBWCxHQUFBO0FBQ25CLE1BQUEsc0VBQUE7QUFBQSxFQUFBLGNBQUEsR0FBaUIsSUFBakIsQ0FBQTtBQUNBLEVBQUEsSUFBRyxlQUFIO0FBQ0UsSUFBYSxpQkFBa0IsUUFBOUIsVUFBRCxDQURGO0dBREE7QUFBQSxFQUlBLFVBQUEsR0FBYSxFQUpiLENBQUE7QUFBQSxFQUtBLFNBQUEsR0FBZ0IsSUFBQSxTQUFBLENBQUEsQ0FMaEIsQ0FBQTtBQUFBLEVBT0EsU0FBUyxDQUFDLE9BQVYsQ0FBa0IsU0FBQyxNQUFELEdBQUE7QUFDaEIsUUFBQSxJQUFBOztVQUF5QixDQUFFLEdBQTNCLENBQStCLFNBQUMsQ0FBRCxHQUFBO2VBQzdCLFVBQUEsQ0FBVyxTQUFBLEdBQUE7aUJBQ1QsQ0FBQSxDQUFFLE1BQUYsRUFEUztRQUFBLENBQVgsRUFFRSxDQUZGLEVBRDZCO01BQUEsQ0FBL0I7S0FBQTtBQUlBLElBQUEsSUFBRyxzQkFBSDthQUNFLGNBQUEsQ0FBZSxNQUFmLEVBREY7S0FMZ0I7RUFBQSxDQUFsQixDQVBBLENBQUE7QUFBQSxFQWVBLFNBQVMsQ0FBQyxNQUFWLENBQUEsQ0FmQSxDQUFBO0FBQUEsRUFpQkEsV0FBQSxHQUFjLElBakJkLENBQUE7QUFBQSxFQTJCTTtBQVFTLElBQUEsc0JBQUUsTUFBRixFQUFXLEVBQVgsRUFBZ0Isa0JBQWhCLEVBQXFDLEtBQXJDLEdBQUE7QUFDWCxV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ZSxxQkFBZixFQUFzQyxDQUF0QyxFQURGO09BREk7SUFBQSxDQTFFTixDQUFBOztBQUFBLDJCQW1GQSxPQUFBLEdBQVMsU0FBQyxDQUFELEdBQUE7QUFDUCxNQUFBLElBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFOLEtBQW1CLElBQUMsQ0FBQSxFQUFFLENBQUMsU0FBSixDQUFBLENBQXRCO2VBQ0UsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLENBQWdCLENBQWhCLEVBREY7T0FETztJQUFBLENBbkZULENBQUE7O3dCQUFBOztNQW5DRixDQUFBO0FBQUEsRUEySEEsSUFBQSxHQUFPLFNBQUEsR0FBQTtBQUVMLFFBQUEsZ0JBQUE7QUFBQSxJQUFBLGdCQUFBLEdBQW1CLElBQUksQ0FBQyxLQUFMLENBQVcsSUFBSSxDQUFDLE1BQUwsQ0FBQSxDQUFBLEdBQWMsT0FBekIsQ0FBbkIsQ0FBQTtXQUNBLFFBQUEsQ0FBUyxZQUFULEVBQXVCLGdCQUF2QixFQUhLO0VBQUEsQ0EzSFAsQ0FBQTtBQUFBLEVBZ0lBLFVBQUEsQ0FBVyxJQUFYLEVBQWlCLElBQWpCLENBaElBLENBQUE7U0FrSUEsT0FuSW1CO0FBQUEsQ0FBckIsQ0FBQTs7QUFBQSxNQXNJTSxDQUFDLE9BQVAsR0FBaUIsa0JBdElqQixDQUFBOztBQXVJQSxJQUFHLGdEQUFIO0FBQ0UsRUFBQSxJQUFPLGdCQUFQO0FBQ0UsSUFBQSxNQUFNLENBQUMsQ0FBUCxHQUFXLEVBQVgsQ0FERjtHQUFBO0FBQUEsRUFFQSxNQUFNLENBQUMsQ0FBQyxDQUFDLGtCQUFULEdBQThCLGtCQUY5QixDQURGO0NBdklBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIil9dmFyIGY9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGYuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sZixmLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIlxuI1xuIyBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgaXMgY2FsbGVkIHdoZW4gdGhlIGNvbm5lY3RvciBpcyBpbml0aWFsaXplZC5cbiMgQHBhcmFtIHtTdHJpbmd9IGluaXRpYWxfdXNlcl9pZCBPcHRpb25hbC4gWW91IGNhbiBzZXQgeW91IG93biB1c2VyX2lkIChzaW5jZSB0aGUgaWRzIG9mIGR1aWNsaWVudCBhcmUgbm90IGFsd2F5cyB1bmlxdWUpXG4jXG5jcmVhdGVJd2NDb25uZWN0b3IgPSAoY2FsbGJhY2ssIG9wdGlvbnMpLT5cbiAgdXNlckl3Y0hhbmRsZXIgPSBudWxsXG4gIGlmIG9wdGlvbnM/XG4gICAge2l3Y0hhbmRsZXI6IHVzZXJJd2NIYW5kbGVyfSA9IG9wdGlvbnNcblxuICBpd2NIYW5kbGVyID0ge31cbiAgZHVpQ2xpZW50ID0gbmV3IERVSUNsaWVudCgpXG4gICNAZHVpQ2xpZW50ID0gbmV3IGl3Yy5DbGllbnQoKVxuICBkdWlDbGllbnQuY29ubmVjdCAoaW50ZW50KS0+XG4gICAgaXdjSGFuZGxlcltpbnRlbnQuYWN0aW9uXT8ubWFwIChmKS0+XG4gICAgICBzZXRUaW1lb3V0ICgpLT5cbiAgICAgICAgZiBpbnRlbnRcbiAgICAgICwgMFxuICAgIGlmIHVzZXJJd2NIYW5kbGVyP1xuICAgICAgdXNlckl3Y0hhbmRsZXIgaW50ZW50XG5cbiAgZHVpQ2xpZW50LmluaXRPSygpXG5cbiAgcmVjZWl2ZWRfSEIgPSBudWxsXG5cbiAgI1xuICAjIFRoZSBJd2MgQ29ubmVjdG9yIGFkZHMgc3VwcG9ydCBmb3IgdGhlIEludGVyLVdpZGdldC1Db21tdW5pY2F0aW9uIHByb3RvY29sIHRoYXQgaXMgdXNlZCBpbiB0aGUgUm9sZS1TREsuXG4gICNcbiAgIyBZb3UgbXVzdCBub3QgdXNlIHlvdXIgb3duIElXQyBjbGllbnQgd2hlbiB1c2luZyB0aGlzIGNvbm5lY3RvciEhXG4gICNcbiAgIyBAc2VlIGh0dHA6Ly9kYmlzLnJ3dGgtYWFjaGVuLmRlL2Ntcy9wcm9qZWN0cy90aGUteG1wcC1leHBlcmllbmNlI2ludGVyd2lkZ2V0LWNvbW11bmljYXRpb25cbiAgIyBAc2VlIGh0dHA6Ly9kYmlzLnJ3dGgtYWFjaGVuLmRlL2Ntcy9wcm9qZWN0cy9ST0xFXG4gICNcbiAgY2xhc3MgSXdjQ29ubmVjdG9yXG5cbiAgICAjXG4gICAgIyBAcGFyYW0ge0VuZ2luZX0gZW5naW5lIFRoZSB0cmFuc2Zvcm1hdGlvbiBlbmdpbmVcbiAgICAjIEBwYXJhbSB7SGlzdG9yeUJ1ZmZlcn0gSEJcbiAgICAjIEBwYXJhbSB7QXJyYXk8RnVuY3Rpb24+fSBleGVjdXRpb25fbGlzdGVuZXIgWW91IG11c3QgZW5zdXJlIHRoYXQgd2hlbmV2ZXIgYW4gb3BlcmF0aW9uIGlzIGV4ZWN1dGVkLCBldmVyeSBmdW5jdGlvbiBpbiB0aGlzIEFycmF5IGlzIGNhbGxlZC5cbiAgICAjIEBwYXJhbSB7WWF0dGFGcmFtZXdvcmt9IHlhdHRhIFRoZSBZYXR0YSBmcmFtZXdvcmsuXG4gICAgI1xuICAgIGNvbnN0cnVjdG9yOiAoQGVuZ2luZSwgQEhCLCBAZXhlY3V0aW9uX2xpc3RlbmVyLCBAeWF0dGEpLT5cbiAgICAgIEBkdWlDbGllbnQgPSBkdWlDbGllbnRcbiAgICAgIEBpd2NIYW5kbGVyID0gaXdjSGFuZGxlclxuXG4gICAgICBzZW5kXyA9IChvKT0+XG4gICAgICAgIGlmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKEBpbml0aWFsaXplZCkubGVuZ3RoIGlzbnQgMFxuICAgICAgICAgIEBzZW5kIG9cbiAgICAgIEBleGVjdXRpb25fbGlzdGVuZXIucHVzaCBzZW5kX1xuXG4gICAgICBAaW5pdGlhbGl6ZWQgPSB7fVxuICAgICAgcmVjZWl2ZUhCID0gKGpzb24pPT5cbiAgICAgICAgSEIgPSBqc29uLmV4dHJhcy5IQlxuICAgICAgICBoaW0gPSBqc29uLmV4dHJhcy51c2VyXG4gICAgICAgIHRoaXMuZW5naW5lLmFwcGx5T3BzQ2hlY2tEb3VibGUgSEJcbiAgICAgICAgQGluaXRpYWxpemVkW2hpbV0gPSB0cnVlXG4gICAgICBpd2NIYW5kbGVyW1wiWWF0dGFfcHVzaF9IQl9lbGVtZW50XCJdID0gW3JlY2VpdmVIQl1cblxuICAgICAgQHNlbmRJd2NJbnRlbnQgXCJZYXR0YV9nZXRfSEJfZWxlbWVudFwiLCBASEIuZ2V0T3BlcmF0aW9uQ291bnRlcigpXG5cbiAgICAgIHJlY2VpdmVfID0gKGludGVudCk9PlxuICAgICAgICBvID0gaW50ZW50LmV4dHJhc1xuICAgICAgICBpZiBAaW5pdGlhbGl6ZWRbby51aWQuY3JlYXRvcl0/ICMgaW5pdGlhbGl6ZSBmaXJzdFxuICAgICAgICAgIEByZWNlaXZlIG9cblxuICAgICAgQGl3Y0hhbmRsZXJbXCJZYXR0YV9uZXdfb3BlcmF0aW9uXCJdID0gW3JlY2VpdmVfXVxuXG4gICAgICBpZiByZWNlaXZlZF9IQj9cbiAgICAgICAgQGVuZ2luZS5hcHBseU9wc0NoZWNrRG91YmxlIHJlY2VpdmVkX0hCXG5cbiAgICAgIHNlbmRIaXN0b3J5QnVmZmVyID0gKGludGVudCk9PlxuICAgICAgICBzdGF0ZV92ZWN0b3IgPSBpbnRlbnQuZXh0cmFzXG4gICAgICAgIGNvbnNvbGUubG9nIHN0YXRlX3ZlY3RvclxuICAgICAgICBqc29uID1cbiAgICAgICAgICBIQiA6IEB5YXR0YS5nZXRIaXN0b3J5QnVmZmVyKCkuX2VuY29kZShzdGF0ZV92ZWN0b3IpXG4gICAgICAgICAgdXNlciA6IEB5YXR0YS5nZXRVc2VySWQoKVxuICAgICAgICBAc2VuZEl3Y0ludGVudCBcIllhdHRhX3B1c2hfSEJfZWxlbWVudFwiLCBqc29uXG4gICAgICBAaXdjSGFuZGxlcltcIllhdHRhX2dldF9IQl9lbGVtZW50XCJdID0gW3NlbmRIaXN0b3J5QnVmZmVyXVxuXG4gICAgI1xuICAgICMgU2V0IHlvdXIgb3duIElXQyBoYW5kbGVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhZnRlciBZYXR0YSBjb25zdW1lZCB0aGVcbiAgICAjIGRhdGEgZnJvbSB0aGUgcmVjZWl2ZWQgaW50ZW50LlxuICAgICNcbiAgICBzZXRJd2NIYW5kbGVyOiAoZiktPlxuICAgICAgdXNlckl3Y0hhbmRsZXIgPSBmXG5cbiAgICAjXG4gICAgIyBIZWxwZXIgZm9yIHNlbmRpbmcgaXdjIGludGVudHMuXG4gICAgIyBAb3ZlcmxvYWQgc2VuZEl3Y0ludGVudCBpbnRlbnRcbiAgICAjICAgQHBhcmFtIHtPYmplY3R9IGludGVudCBUaGUgaW50ZW50IG9iamVjdC5cbiAgICAjIEBvdmVybG9hZCBzZW5kSXdjSW50ZW50IGFjdGlvbl9uYW1lLCBjb250ZW50XG4gICAgIyAgIEBwYXJhbSB7U3RyaW5nfSBhY3Rpb25fbmFtZSBUaGUgbmFtZSBvZiB0aGUgYWN0aW9uIHRoYXQgaXMgZ29pbmcgdG8gYmUgc2VuZC5cbiAgICAjICAgQHBhcmFtIHtTdHJpbmd9IGNvbnRlbnQgVGhlIGNvbnRlbnQgdGhhdCBpcyBhdHRlY2hlZCB0byB0aGUgaW50ZW50LlxuICAgICNcbiAgICBzZW5kSXdjSW50ZW50OiAoYWN0aW9uX25hbWUsIGNvbnRlbnQpLT5cbiAgICAgIGludGVudCA9IG51bGxcbiAgICAgIGlmIGFyZ3VtZW50cy5sZW5ndGggPj0gMlxuICAgICAgICBbYWN0aW9uX25hbWUsIGNvbnRlbnRdID0gYXJndW1lbnRzXG4gICAgICAgIGludGVudCA9XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb25fbmFtZVxuICAgICAgICAgIGNvbXBvbmVudDogXCJcIlxuICAgICAgICAgIGRhdGE6IFwiXCJcbiAgICAgICAgICBkYXRhVHlwZTogXCJcIlxuICAgICAgICAgIGZsYWdzOiBbXCJQVUJMSVNIX0dMT0JBTFwiXVxuICAgICAgICAgIGV4dHJhczogY29udGVudFxuICAgICAgZWxzZVxuICAgICAgICBpbnRlbnQgPSBhcmd1bWVudHNbMF1cblxuICAgICAgQGR1aUNsaWVudC5zZW5kSW50ZW50KGludGVudClcblxuICAgICNcbiAgICAjIEBwcml2YXRlXG4gICAgIyBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGVuZXZlciBhbiBvcGVyYXRpb24gd2FzIGV4ZWN1dGVkLlxuICAgICMgQHBhcmFtIHtPcGVyYXRpb259IG8gVGhlIG9wZXJhdGlvbiB0aGF0IHdhcyBleGVjdXRlZC5cbiAgICAjXG4gICAgc2VuZDogKG8pLT5cbiAgICAgIGlmIG8udWlkLmNyZWF0b3IgaXMgQEhCLmdldFVzZXJJZCgpIGFuZCAodHlwZW9mIG8udWlkLm9wX251bWJlciBpc250IFwic3RyaW5nXCIpXG4gICAgICAgIEBzZW5kSXdjSW50ZW50IFwiWWF0dGFfbmV3X29wZXJhdGlvblwiLCBvXG5cbiAgICAjXG4gICAgIyBAcHJpdmF0ZVxuICAgICMgVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbmV2ZXIgYW4gb3BlcmF0aW9uIHdhcyByZWNlaXZlZCBmcm9tIGFub3RoZXIgcGVlci5cbiAgICAjIEBwYXJhbSB7T3BlcmF0aW9ufSBvIFRoZSBvcGVyYXRpb24gdGhhdCB3YXMgcmVjZWl2ZWQuXG4gICAgI1xuICAgIHJlY2VpdmU6IChvKS0+XG4gICAgICBpZiBvLnVpZC5jcmVhdG9yIGlzbnQgQEhCLmdldFVzZXJJZCgpXG4gICAgICAgIEBlbmdpbmUuYXBwbHlPcCBvXG5cblxuICBpbml0ID0gKCktPlxuICAgICMgcHJvcG9zZWRfdXNlcl9pZCA9IGR1aUNsaWVudC5nZXRJd2NDbGllbnQoKS5fY29tcG9uZW50TmFtZSAjVE9ETzogVGhpcyBpcyBzdHVwaWQhIHdoeSBjYW4ndCBpIHVzZSB0aGlzP1xuICAgIHByb3Bvc2VkX3VzZXJfaWQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTAwMDAwMClcbiAgICBjYWxsYmFjayBJd2NDb25uZWN0b3IsIHByb3Bvc2VkX3VzZXJfaWRcblxuICBzZXRUaW1lb3V0IGluaXQsIDUwMDBcblxuICB1bmRlZmluZWRcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUl3Y0Nvbm5lY3RvclxuaWYgd2luZG93P1xuICBpZiBub3Qgd2luZG93Llk/XG4gICAgd2luZG93LlkgPSB7fVxuICB3aW5kb3cuWS5jcmVhdGVJd2NDb25uZWN0b3IgPSBjcmVhdGVJd2NDb25uZWN0b3JcblxuIl19

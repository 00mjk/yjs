(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var createIwcConnector;

createIwcConnector = function(callback, initial_user_id) {
  var IwcConnector, duiClient, get_HB_intent, init, iwcHandler, received_HB;
  iwcHandler = {};
  duiClient = new DUIClient();
  duiClient.connect(function(intent) {
    var _ref;
    return (_ref = iwcHandler[intent.action]) != null ? _ref.map(function(f) {
      return setTimeout(function() {
        return f(intent);
      }, 0);
    }) : void 0;
  });
  duiClient.initOK();
  received_HB = null;
  IwcConnector = (function() {
    function IwcConnector(engine, HB, execution_listener, yatta) {
      var receive_, sendHistoryBuffer, send_;
      this.engine = engine;
      this.HB = HB;
      this.execution_listener = execution_listener;
      this.yatta = yatta;
      this.duiClient = duiClient;
      this.iwcHandler = iwcHandler;
      send_ = (function(_this) {
        return function(o) {
          return _this.send(o);
        };
      })(this);
      this.execution_listener.push(send_);
      receive_ = (function(_this) {
        return function(intent) {
          var o;
          o = intent.extras;
          return _this.receive(o);
        };
      })(this);
      this.iwcHandler["Yatta_new_operation"] = [receive_];
      if (received_HB != null) {
        this.engine.applyOpsCheckDouble(received_HB);
      }
      sendHistoryBuffer = (function(_this) {
        return function() {
          var json;
          json = {
            HB: _this.yatta.getHistoryBuffer()._encode()
          };
          return _this.sendIwcIntent("Yatta_push_HB_element", json);
        };
      })(this);
      this.iwcHandler["Yatta_get_HB_element"] = [sendHistoryBuffer];
    }

    IwcConnector.prototype.send = function(o) {
      if (o.uid.creator === this.HB.getUserId() && (typeof o.uid.op_number !== "string")) {
        return this.sendIwcIntent("Yatta_new_operation", o);
      }
    };

    IwcConnector.prototype.receive = function(o) {
      if (o.uid.creator !== this.HB.getUserId()) {
        return this.engine.applyOp(o);
      }
    };

    IwcConnector.prototype.sendIwcIntent = function(action_name, content) {
      var intent;
      intent = {
        action: action_name,
        component: "",
        data: "",
        dataType: "",
        flags: ["PUBLISH_GLOBAL"],
        extras: content
      };
      return this.duiClient.sendIntent(intent);
    };

    return IwcConnector;

  })();
  get_HB_intent = {
    action: "Yatta_get_HB_element",
    component: "",
    data: "",
    dataType: "",
    flags: ["PUBLISH_GLOBAL"],
    extras: {}
  };
  init = function() {
    var is_initialized, receiveHB;
    duiClient.sendIntent(get_HB_intent);
    is_initialized = false;
    receiveHB = function(json) {
      var proposed_user_id;
      proposed_user_id = null;
      if (initial_user_id != null) {
        proposed_user_id = initial_user_id;
      } else {
        proposed_user_id = duiClient.getIwcClient()._componentName;
      }
      received_HB = json != null ? json.extras.HB : void 0;
      if (!is_initialized) {
        is_initialized = true;
        return callback(IwcConnector, proposed_user_id);
      }
    };
    iwcHandler["Yatta_push_HB_element"] = [receiveHB];
    return setTimeout(receiveHB, 4000);
  };
  setTimeout(init, 1000.);
  return void 0;
};

module.exports = createIwcConnector;

if (typeof window !== "undefined" && window !== null) {
  window.createConnector = createIwcConnector;
}


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2Rtb25hZC9Ecm9wYm94L1lhdHRhIS9ub2RlX21vZHVsZXMvZ3VscC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9kbW9uYWQvRHJvcGJveC9ZYXR0YSEvbGliL0Nvbm5lY3RvcnMvSXdjQ29ubmVjdG9yLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0lBLElBQUEsa0JBQUE7O0FBQUEsa0JBQUEsR0FBcUIsU0FBQyxRQUFELEVBQVcsZUFBWCxHQUFBO0FBQ25CLE1BQUEscUVBQUE7QUFBQSxFQUFBLFVBQUEsR0FBYSxFQUFiLENBQUE7QUFBQSxFQUNBLFNBQUEsR0FBZ0IsSUFBQSxTQUFBLENBQUEsQ0FEaEIsQ0FBQTtBQUFBLEVBR0EsU0FBUyxDQUFDLE9BQVYsQ0FBa0IsU0FBQyxNQUFELEdBQUE7QUFHaEIsUUFBQSxJQUFBOzREQUF5QixDQUFFLEdBQTNCLENBQStCLFNBQUMsQ0FBRCxHQUFBO2FBQzdCLFVBQUEsQ0FBVyxTQUFBLEdBQUE7ZUFDVCxDQUFBLENBQUUsTUFBRixFQURTO01BQUEsQ0FBWCxFQUVFLENBRkYsRUFENkI7SUFBQSxDQUEvQixXQUhnQjtFQUFBLENBQWxCLENBSEEsQ0FBQTtBQUFBLEVBV0EsU0FBUyxDQUFDLE1BQVYsQ0FBQSxDQVhBLENBQUE7QUFBQSxFQWFBLFdBQUEsR0FBYyxJQWJkLENBQUE7QUFBQSxFQW9CTTtBQVFTLElBQUEsc0JBQUUsTUFBRixFQUFXLEVBQVgsRUFBZ0Isa0JBQWhCLEVBQXFDLEtBQXJDLEdBQUE7QUFDWCxVQUFBLGtDQUFBO0FBQUEsTUFEWSxJQUFDLENBQUEsU0FBQSxNQUNiLENBQUE7QUFBQSxNQURxQixJQUFDLENBQUEsS0FBQSxFQUN0QixDQUFBO0FBQUEsTUFEMEIsSUFBQyxDQUFBLHFCQUFBLGtCQUMzQixDQUFBO0FBQUEsTUFEK0MsSUFBQyxDQUFBLFFB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QWlCLGtCQS9HakIsQ0FBQTs7O0VBZ0hBLE1BQU0sQ0FBRSxlQUFSLEdBQTBCO0NBaEgxQiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpfXZhciBmPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChmLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGYsZi5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJcbiNcbiMgQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGlzIGNhbGxlZCB3aGVuIHRoZSBjb25uZWN0b3IgaXMgaW5pdGlhbGl6ZWQuXG4jXG5jcmVhdGVJd2NDb25uZWN0b3IgPSAoY2FsbGJhY2ssIGluaXRpYWxfdXNlcl9pZCktPlxuICBpd2NIYW5kbGVyID0ge31cbiAgZHVpQ2xpZW50ID0gbmV3IERVSUNsaWVudCgpXG4gICNAZHVpQ2xpZW50ID0gbmV3IGl3Yy5DbGllbnQoKVxuICBkdWlDbGllbnQuY29ubmVjdCAoaW50ZW50KS0+XG4gICAgI2NvbnNvbGUubG9nIFwiaW50ZW50IHJlY2VpdmVkIGl3YzogI3tKU09OLnN0cmluZ2lmeShpbnRlbnQpfVwiXG4gICAgI2NvbnNvbGUubG9nIFwiI3tKU09OLnN0cmluZ2lmeShAaXdjSGFuZGxlcil9XCJcbiAgICBpd2NIYW5kbGVyW2ludGVudC5hY3Rpb25dPy5tYXAgKGYpLT5cbiAgICAgIHNldFRpbWVvdXQgKCktPlxuICAgICAgICBmIGludGVudFxuICAgICAgLCAwXG5cbiAgZHVpQ2xpZW50LmluaXRPSygpXG5cbiAgcmVjZWl2ZWRfSEIgPSBudWxsXG5cbiAgI1xuICAjIFRoZSBJd2MgQ29ubmVjdG9yIGFkZHMgc3VwcG9ydCBmb3IgdGhlIEludGVyLVdpZGdldC1Db21tdW5pY2F0aW9uIHByb3RvY29sIHRoYXQgaXMgdXNlZCBpbiB0aGUgUm9sZS1TREsuXG4gICMgQHNlZSBodHRwOi8vZGJpcy5yd3RoLWFhY2hlbi5kZS9jbXMvcHJvamVjdHMvdGhlLXhtcHAtZXhwZXJpZW5jZSNpbnRlcndpZGdldC1jb21tdW5pY2F0aW9uXG4gICMgQHNlZSBodHRwOi8vZGJpcy5yd3RoLWFhY2hlbi5kZS9jbXMvcHJvamVjdHMvUk9MRVxuICAjXG4gIGNsYXNzIEl3Y0Nvbm5lY3RvclxuXG4gICAgI1xuICAgICMgQHBhcmFtIHtFbmdpbmV9IGVuZ2luZSBUaGUgdHJhbnNmb3JtYXRpb24gZW5naW5lXG4gICAgIyBAcGFyYW0ge0hpc3RvcnlCdWZmZXJ9IEhCXG4gICAgIyBAcGFyYW0ge0FycmF5PEZ1bmN0aW9uPn0gZXhlY3V0aW9uX2xpc3RlbmVyIFlvdSBtdXN0IGVuc3VyZSB0aGF0IHdoZW5ldmVyIGFuIG9wZXJhdGlvbiBpcyBleGVjdXRlZCwgZXZlcnkgZnVuY3Rpb24gaW4gdGhpcyBBcnJheSBpcyBjYWxsZWQuXG4gICAgIyBAcGFyYW0ge1lhdHRhfSB5YXR0YSBUaGUgWWF0dGEgZnJhbWV3b3JrLlxuICAgICNcbiAgICBjb25zdHJ1Y3RvcjogKEBlbmdpbmUsIEBIQiwgQGV4ZWN1dGlvbl9saXN0ZW5lciwgQHlhdHRhKS0+XG4gICAgICBAZHVpQ2xpZW50ID0gZHVpQ2xpZW50XG4gICAgICBAaXdjSGFuZGxlciA9IGl3Y0hhbmRsZXJcblxuICAgICAgc2VuZF8gPSAobyk9PlxuICAgICAgICBAc2VuZCBvXG4gICAgICBAZXhlY3V0aW9uX2xpc3RlbmVyLnB1c2ggc2VuZF9cblxuICAgICAgcmVjZWl2ZV8gPSAoaW50ZW50KT0+XG4gICAgICAgIG8gPSBpbnRlbnQuZXh0cmFzXG4gICAgICAgIEByZWNlaXZlIG9cbiAgICAgIEBpd2NIYW5kbGVyW1wiWWF0dGFfbmV3X29wZXJhdGlvblwiXSA9IFtyZWNlaXZlX11cblxuICAgICAgaWYgcmVjZWl2ZWRfSEI/XG4gICAgICAgIEBlbmdpbmUuYXBwbHlPcHNDaGVja0RvdWJsZSByZWNlaXZlZF9IQlxuXG4gICAgICBzZW5kSGlzdG9yeUJ1ZmZlciA9ICgpPT5cbiAgICAgICAganNvbiA9XG4gICAgICAgICAgSEIgOiBAeWF0dGEuZ2V0SGlzdG9yeUJ1ZmZlcigpLl9lbmNvZGUoKVxuICAgICAgICBAc2VuZEl3Y0ludGVudCBcIllhdHRhX3B1c2hfSEJfZWxlbWVudFwiLCBqc29uXG4gICAgICBAaXdjSGFuZGxlcltcIllhdHRhX2dldF9IQl9lbGVtZW50XCJdID0gW3NlbmRIaXN0b3J5QnVmZmVyXVxuXG4gICAgI1xuICAgICMgVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbmV2ZXIgYW4gb3BlcmF0aW9uIHdhcyBleGVjdXRlZC5cbiAgICAjIEBwYXJhbSB7T3BlcmF0aW9ufSBvIFRoZSBvcGVyYXRpb24gdGhhdCB3YXMgZXhlY3V0ZWQuXG4gICAgI1xuICAgIHNlbmQ6IChvKS0+XG4gICAgICBpZiBvLnVpZC5jcmVhdG9yIGlzIEBIQi5nZXRVc2VySWQoKSBhbmQgKHR5cGVvZiBvLnVpZC5vcF9udW1iZXIgaXNudCBcInN0cmluZ1wiKVxuICAgICAgICBAc2VuZEl3Y0ludGVudCBcIllhdHRhX25ld19vcGVyYXRpb25cIiwgb1xuXG4gICAgI1xuICAgICMgVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbmV2ZXIgYW4gb3BlcmF0aW9uIHdhcyByZWNlaXZlZCBmcm9tIGFub3RoZXIgcGVlci5cbiAgICAjIEBwYXJhbSB7T3BlcmF0aW9ufSBvIFRoZSBvcGVyYXRpb24gdGhhdCB3YXMgcmVjZWl2ZWQuXG4gICAgI1xuICAgIHJlY2VpdmU6IChvKS0+XG4gICAgICBpZiBvLnVpZC5jcmVhdG9yIGlzbnQgQEhCLmdldFVzZXJJZCgpXG4gICAgICAgIEBlbmdpbmUuYXBwbHlPcCBvXG5cbiAgICAjXG4gICAgIyBIZWxwZXIgZm9yIHNlbmRpbmcgaXdjIGludGVudHMuXG4gICAgIyBAcGFyYW0ge1N0cmluZ30gYWN0aW9uX25hbWUgVGhlIG5hbWUgb2YgdGhlIGFjdGlvbiB0aGF0IGlzIGdvaW5nIHRvIGJlIHNlbmQuXG4gICAgIyBAcGFyYW0ge1N0cmluZ30gY29udGVudCBUaGUgY29udGVudCB0aGF0IGlzIGF0dGVjaGVkIHRvIHRoZSBpbnRlbnQuXG4gICAgI1xuICAgIHNlbmRJd2NJbnRlbnQ6IChhY3Rpb25fbmFtZSwgY29udGVudCktPlxuICAgICAgaW50ZW50ID1cbiAgICAgICAgYWN0aW9uOiBhY3Rpb25fbmFtZVxuICAgICAgICBjb21wb25lbnQ6IFwiXCJcbiAgICAgICAgZGF0YTogXCJcIlxuICAgICAgICBkYXRhVHlwZTogXCJcIlxuICAgICAgICBmbGFnczogW1wiUFVCTElTSF9HTE9CQUxcIl1cbiAgICAgICAgZXh0cmFzOiBjb250ZW50XG5cbiAgICAgIEBkdWlDbGllbnQuc2VuZEludGVudChpbnRlbnQpXG5cbiAgZ2V0X0hCX2ludGVudCA9XG4gICAgYWN0aW9uOiBcIllhdHRhX2dldF9IQl9lbGVtZW50XCJcbiAgICBjb21wb25lbnQ6IFwiXCJcbiAgICBkYXRhOiBcIlwiXG4gICAgZGF0YVR5cGU6IFwiXCJcbiAgICBmbGFnczogW1wiUFVCTElTSF9HTE9CQUxcIl1cbiAgICBleHRyYXM6IHt9XG5cbiAgaW5pdCA9ICgpLT5cbiAgICBkdWlDbGllbnQuc2VuZEludGVudChnZXRfSEJfaW50ZW50KVxuXG4gICAgaXNfaW5pdGlhbGl6ZWQgPSBmYWxzZVxuICAgIHJlY2VpdmVIQiA9IChqc29uKS0+XG4gICAgICBwcm9wb3NlZF91c2VyX2lkID0gbnVsbFxuICAgICAgaWYgaW5pdGlhbF91c2VyX2lkP1xuICAgICAgICBwcm9wb3NlZF91c2VyX2lkID0gaW5pdGlhbF91c2VyX2lkXG4gICAgICBlbHNlXG4gICAgICAgIHByb3Bvc2VkX3VzZXJfaWQgPSBkdWlDbGllbnQuZ2V0SXdjQ2xpZW50KCkuX2NvbXBvbmVudE5hbWVcbiAgICAgIHJlY2VpdmVkX0hCID0ganNvbj8uZXh0cmFzLkhCXG4gICAgICBpZiBub3QgaXNfaW5pdGlhbGl6ZWRcbiAgICAgICAgaXNfaW5pdGlhbGl6ZWQgPSB0cnVlXG4gICAgICAgIGNhbGxiYWNrIEl3Y0Nvbm5lY3RvciwgcHJvcG9zZWRfdXNlcl9pZFxuICAgIGl3Y0hhbmRsZXJbXCJZYXR0YV9wdXNoX0hCX2VsZW1lbnRcIl0gPSBbcmVjZWl2ZUhCXVxuICAgIHNldFRpbWVvdXQgcmVjZWl2ZUhCLCA0MDAwXG5cbiAgc2V0VGltZW91dCBpbml0LCAoMTAwMClcblxuICB1bmRlZmluZWRcbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlSXdjQ29ubmVjdG9yXG53aW5kb3c/LmNyZWF0ZUNvbm5lY3RvciA9IGNyZWF0ZUl3Y0Nvbm5lY3RvclxuXG4iXX0=
